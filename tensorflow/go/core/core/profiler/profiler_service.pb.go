// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/profiler/profiler_service.proto

package profiler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	framework "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
	protobuf "github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProfileOptions struct {
	// We don't collect the dataset ops by default for better trace-viewer
	// scalability. The caller can mannually set this field to include the ops.
	IncludeDatasetOps    bool     `protobuf:"varint,1,opt,name=include_dataset_ops,json=includeDatasetOps,proto3" json:"include_dataset_ops,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileOptions) Reset()         { *m = ProfileOptions{} }
func (m *ProfileOptions) String() string { return proto.CompactTextString(m) }
func (*ProfileOptions) ProtoMessage()    {}
func (*ProfileOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e703572e76aa4a, []int{0}
}

func (m *ProfileOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileOptions.Unmarshal(m, b)
}
func (m *ProfileOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileOptions.Marshal(b, m, deterministic)
}
func (m *ProfileOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileOptions.Merge(m, src)
}
func (m *ProfileOptions) XXX_Size() int {
	return xxx_messageInfo_ProfileOptions.Size(m)
}
func (m *ProfileOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileOptions proto.InternalMessageInfo

func (m *ProfileOptions) GetIncludeDatasetOps() bool {
	if m != nil {
		return m.IncludeDatasetOps
	}
	return false
}

type ToolRequestOptions struct {
	// Required formats for the tool, it should be one of "json", "proto", "raw"
	// etc. If not specified (backward compatible), use default format, i.e. most
	// tools use json format.
	OutputFormats string `protobuf:"bytes,2,opt,name=output_formats,json=outputFormats,proto3" json:"output_formats,omitempty"`
	// Whether save the result directly to repository or pass it back to caller.
	// Default to false for backward compatibilities.
	SaveToRepo           bool     `protobuf:"varint,3,opt,name=save_to_repo,json=saveToRepo,proto3" json:"save_to_repo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToolRequestOptions) Reset()         { *m = ToolRequestOptions{} }
func (m *ToolRequestOptions) String() string { return proto.CompactTextString(m) }
func (*ToolRequestOptions) ProtoMessage()    {}
func (*ToolRequestOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e703572e76aa4a, []int{1}
}

func (m *ToolRequestOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToolRequestOptions.Unmarshal(m, b)
}
func (m *ToolRequestOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToolRequestOptions.Marshal(b, m, deterministic)
}
func (m *ToolRequestOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToolRequestOptions.Merge(m, src)
}
func (m *ToolRequestOptions) XXX_Size() int {
	return xxx_messageInfo_ToolRequestOptions.Size(m)
}
func (m *ToolRequestOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ToolRequestOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ToolRequestOptions proto.InternalMessageInfo

func (m *ToolRequestOptions) GetOutputFormats() string {
	if m != nil {
		return m.OutputFormats
	}
	return ""
}

func (m *ToolRequestOptions) GetSaveToRepo() bool {
	if m != nil {
		return m.SaveToRepo
	}
	return false
}

type ProfileRequest struct {
	// In future, the caller will be able to customize when profiling starts and
	// stops. For now, it collects `duration_ms` milliseconds worth of data.
	DurationMs uint64 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// The maximum number of events to return. By default (value 0), return all
	// events.
	MaxEvents uint64 `protobuf:"varint,2,opt,name=max_events,json=maxEvents,proto3" json:"max_events,omitempty"`
	// Required profiling tools name such as "input_pipeline_analyzer" etc
	Tools []string `protobuf:"bytes,3,rep,name=tools,proto3" json:"tools,omitempty"`
	// Specifies the requirement for each tools.
	ToolOptions map[string]*ToolRequestOptions `protobuf:"bytes,8,rep,name=tool_options,json=toolOptions,proto3" json:"tool_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional profiling options that control how a TF session will be profiled.
	Opts *ProfileOptions `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts,omitempty"`
	// The place where we will dump profile data. We will normally use
	// MODEL_DIR/plugin/profile/ as our repository root.
	RepositoryRoot string `protobuf:"bytes,5,opt,name=repository_root,json=repositoryRoot,proto3" json:"repository_root,omitempty"`
	// The user provided profile session identifier.
	SessionId string `protobuf:"bytes,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The hostname of system where the profile should happen.
	// We use it as identifier in part of our output filename.
	HostName             string   `protobuf:"bytes,7,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileRequest) Reset()         { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()    {}
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e703572e76aa4a, []int{2}
}

func (m *ProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileRequest.Unmarshal(m, b)
}
func (m *ProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileRequest.Marshal(b, m, deterministic)
}
func (m *ProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileRequest.Merge(m, src)
}
func (m *ProfileRequest) XXX_Size() int {
	return xxx_messageInfo_ProfileRequest.Size(m)
}
func (m *ProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileRequest proto.InternalMessageInfo

func (m *ProfileRequest) GetDurationMs() uint64 {
	if m != nil {
		return m.DurationMs
	}
	return 0
}

func (m *ProfileRequest) GetMaxEvents() uint64 {
	if m != nil {
		return m.MaxEvents
	}
	return 0
}

func (m *ProfileRequest) GetTools() []string {
	if m != nil {
		return m.Tools
	}
	return nil
}

func (m *ProfileRequest) GetToolOptions() map[string]*ToolRequestOptions {
	if m != nil {
		return m.ToolOptions
	}
	return nil
}

func (m *ProfileRequest) GetOpts() *ProfileOptions {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *ProfileRequest) GetRepositoryRoot() string {
	if m != nil {
		return m.RepositoryRoot
	}
	return ""
}

func (m *ProfileRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ProfileRequest) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

type ProfileToolData struct {
	// The file name which this data is associated (e.g. "input_pipeline.json",
	// "cluster_xxx.memory_viewer.json").
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The data payload (likely json) for the specific tool.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileToolData) Reset()         { *m = ProfileToolData{} }
func (m *ProfileToolData) String() string { return proto.CompactTextString(m) }
func (*ProfileToolData) ProtoMessage()    {}
func (*ProfileToolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e703572e76aa4a, []int{3}
}

func (m *ProfileToolData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileToolData.Unmarshal(m, b)
}
func (m *ProfileToolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileToolData.Marshal(b, m, deterministic)
}
func (m *ProfileToolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileToolData.Merge(m, src)
}
func (m *ProfileToolData) XXX_Size() int {
	return xxx_messageInfo_ProfileToolData.Size(m)
}
func (m *ProfileToolData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileToolData.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileToolData proto.InternalMessageInfo

func (m *ProfileToolData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileToolData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProfileResponse struct {
	// Graphs of programs executed on devices during the profiling period.
	ComputationGraph []*framework.GraphDef `protobuf:"bytes,2,rep,name=computation_graph,json=computationGraph,proto3" json:"computation_graph,omitempty"`
	// Performance profile that can be used to annotate HLO operations in the
	// computation graph.
	HloMetadata *protobuf.RunMetadata `protobuf:"bytes,5,opt,name=hlo_metadata,json=hloMetadata,proto3" json:"hlo_metadata,omitempty"`
	// Encoded Trace proto message that contains metadata about the trace captured
	// during the profiling period. Describes the devices and resources that
	// 'trace_events' refers to.
	EncodedTrace []byte `protobuf:"bytes,3,opt,name=encoded_trace,json=encodedTrace,proto3" json:"encoded_trace,omitempty"`
	// Assembles a hierarchical performance profile based on HLOs in trace events.
	// If the trace covers multiple programs, the longest-running one is analyzed.
	// See op_profile.proto for the detailed semantics of the returned profile.
	OpProfile *Profile `protobuf:"bytes,4,opt,name=op_profile,json=opProfile,proto3" json:"op_profile,omitempty"`
	// Data payload for each required tools.
	ToolData []*ProfileToolData `protobuf:"bytes,6,rep,name=tool_data,json=toolData,proto3" json:"tool_data,omitempty"`
	// When we write profiling data directly to repository directory, we need a
	// way to figure out whether the captured trace is empty (due to idle TPU).
	EmptyTrace           bool     `protobuf:"varint,7,opt,name=empty_trace,json=emptyTrace,proto3" json:"empty_trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileResponse) Reset()         { *m = ProfileResponse{} }
func (m *ProfileResponse) String() string { return proto.CompactTextString(m) }
func (*ProfileResponse) ProtoMessage()    {}
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e703572e76aa4a, []int{4}
}

func (m *ProfileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileResponse.Unmarshal(m, b)
}
func (m *ProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileResponse.Marshal(b, m, deterministic)
}
func (m *ProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileResponse.Merge(m, src)
}
func (m *ProfileResponse) XXX_Size() int {
	return xxx_messageInfo_ProfileResponse.Size(m)
}
func (m *ProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileResponse proto.InternalMessageInfo

func (m *ProfileResponse) GetComputationGraph() []*framework.GraphDef {
	if m != nil {
		return m.ComputationGraph
	}
	return nil
}

func (m *ProfileResponse) GetHloMetadata() *protobuf.RunMetadata {
	if m != nil {
		return m.HloMetadata
	}
	return nil
}

func (m *ProfileResponse) GetEncodedTrace() []byte {
	if m != nil {
		return m.EncodedTrace
	}
	return nil
}

func (m *ProfileResponse) GetOpProfile() *Profile {
	if m != nil {
		return m.OpProfile
	}
	return nil
}

func (m *ProfileResponse) GetToolData() []*ProfileToolData {
	if m != nil {
		return m.ToolData
	}
	return nil
}

func (m *ProfileResponse) GetEmptyTrace() bool {
	if m != nil {
		return m.EmptyTrace
	}
	return false
}

type MonitorRequest struct {
	// Duration for which to profile between each update.
	DurationMs uint64 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// Indicates the level at which we want to monitor. Currently, two levels are
	// supported:
	// Level 1: An ultra lightweight mode that captures only some utilization
	// metrics.
	// Level 2: More verbose than level 1. Collects utilization metrics, device
	// information, step time information, etc. Do not use this option if the TPU
	// host is being very heavily used.
	MonitoringLevel int32 `protobuf:"varint,2,opt,name=monitoring_level,json=monitoringLevel,proto3" json:"monitoring_level,omitempty"`
	// True to display timestamp in monitoring result.
	Timestamp            bool     `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorRequest) Reset()         { *m = MonitorRequest{} }
func (m *MonitorRequest) String() string { return proto.CompactTextString(m) }
func (*MonitorRequest) ProtoMessage()    {}
func (*MonitorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e703572e76aa4a, []int{5}
}

func (m *MonitorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorRequest.Unmarshal(m, b)
}
func (m *MonitorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorRequest.Marshal(b, m, deterministic)
}
func (m *MonitorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorRequest.Merge(m, src)
}
func (m *MonitorRequest) XXX_Size() int {
	return xxx_messageInfo_MonitorRequest.Size(m)
}
func (m *MonitorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorRequest proto.InternalMessageInfo

func (m *MonitorRequest) GetDurationMs() uint64 {
	if m != nil {
		return m.DurationMs
	}
	return 0
}

func (m *MonitorRequest) GetMonitoringLevel() int32 {
	if m != nil {
		return m.MonitoringLevel
	}
	return 0
}

func (m *MonitorRequest) GetTimestamp() bool {
	if m != nil {
		return m.Timestamp
	}
	return false
}

type MonitorResponse struct {
	// Properly formatted string data that can be directly returned back to user.
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MonitorResponse) Reset()         { *m = MonitorResponse{} }
func (m *MonitorResponse) String() string { return proto.CompactTextString(m) }
func (*MonitorResponse) ProtoMessage()    {}
func (*MonitorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0e703572e76aa4a, []int{6}
}

func (m *MonitorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MonitorResponse.Unmarshal(m, b)
}
func (m *MonitorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MonitorResponse.Marshal(b, m, deterministic)
}
func (m *MonitorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonitorResponse.Merge(m, src)
}
func (m *MonitorResponse) XXX_Size() int {
	return xxx_messageInfo_MonitorResponse.Size(m)
}
func (m *MonitorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MonitorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MonitorResponse proto.InternalMessageInfo

func (m *MonitorResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*ProfileOptions)(nil), "tensorflow.ProfileOptions")
	proto.RegisterType((*ToolRequestOptions)(nil), "tensorflow.ToolRequestOptions")
	proto.RegisterType((*ProfileRequest)(nil), "tensorflow.ProfileRequest")
	proto.RegisterMapType((map[string]*ToolRequestOptions)(nil), "tensorflow.ProfileRequest.ToolOptionsEntry")
	proto.RegisterType((*ProfileToolData)(nil), "tensorflow.ProfileToolData")
	proto.RegisterType((*ProfileResponse)(nil), "tensorflow.ProfileResponse")
	proto.RegisterType((*MonitorRequest)(nil), "tensorflow.MonitorRequest")
	proto.RegisterType((*MonitorResponse)(nil), "tensorflow.MonitorResponse")
}

func init() {
	proto.RegisterFile("tensorflow/core/profiler/profiler_service.proto", fileDescriptor_f0e703572e76aa4a)
}

var fileDescriptor_f0e703572e76aa4a = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xeb, 0x6e, 0xe3, 0x44,
	0x14, 0xde, 0xdc, 0xda, 0xf8, 0x24, 0x9b, 0x64, 0x87, 0x95, 0xb0, 0x52, 0x60, 0x23, 0xa3, 0x68,
	0xb3, 0x42, 0x72, 0xa4, 0xc0, 0x8f, 0x65, 0x7f, 0xb1, 0xd0, 0x2d, 0x02, 0xd1, 0x16, 0x0d, 0xfd,
	0x85, 0x04, 0x96, 0xeb, 0x4c, 0x12, 0xab, 0xb6, 0xcf, 0x30, 0x33, 0x4e, 0x1b, 0xde, 0x85, 0x27,
	0xe0, 0x9d, 0x78, 0x16, 0x34, 0x17, 0xe7, 0x52, 0x52, 0x89, 0x7f, 0x67, 0xbe, 0x73, 0xfb, 0xce,
	0x6d, 0x60, 0xaa, 0x58, 0x21, 0x51, 0x2c, 0x32, 0xbc, 0x9f, 0x26, 0x28, 0xd8, 0x94, 0x0b, 0x5c,
	0xa4, 0x19, 0x13, 0x5b, 0x21, 0x92, 0x4c, 0xac, 0xd3, 0x84, 0x85, 0x5c, 0xa0, 0x42, 0x02, 0x3b,
	0x87, 0xe1, 0xf8, 0xb1, 0xf3, 0x42, 0xc4, 0x39, 0xbb, 0x47, 0x71, 0x37, 0x5d, 0x8a, 0x98, 0xaf,
	0xac, 0xcb, 0xf0, 0xcd, 0x93, 0x39, 0x90, 0x47, 0x4e, 0x76, 0xa6, 0xe3, 0x23, 0xa6, 0x0a, 0x6f,
	0xcb, 0xc5, 0x34, 0xc1, 0x62, 0x91, 0x2e, 0xad, 0x59, 0xf0, 0x0d, 0xf4, 0x7e, 0xb6, 0x7e, 0xd7,
	0x5c, 0xa5, 0x58, 0x48, 0x12, 0xc2, 0x47, 0x69, 0x91, 0x64, 0xe5, 0x9c, 0x45, 0xf3, 0x58, 0xc5,
	0x92, 0xa9, 0x08, 0xb9, 0xf4, 0x6b, 0xa3, 0xda, 0xa4, 0x4d, 0x5f, 0x38, 0xd5, 0xb9, 0xd5, 0x5c,
	0x73, 0x19, 0xfc, 0x06, 0xe4, 0x06, 0x31, 0xa3, 0xec, 0x8f, 0x92, 0x49, 0x55, 0x45, 0x19, 0x43,
	0x0f, 0x4b, 0xc5, 0x4b, 0x15, 0x2d, 0x50, 0xe4, 0xb1, 0x92, 0x7e, 0x7d, 0x54, 0x9b, 0x78, 0xf4,
	0xb9, 0x45, 0x2f, 0x2c, 0x48, 0x46, 0xd0, 0x95, 0xf1, 0x9a, 0x45, 0x0a, 0x23, 0xc1, 0x38, 0xfa,
	0x0d, 0x93, 0x05, 0x34, 0x76, 0x83, 0x94, 0x71, 0x0c, 0xfe, 0x6e, 0x6c, 0x19, 0xba, 0x14, 0xe4,
	0x15, 0x74, 0xe6, 0xa5, 0x88, 0x75, 0xa2, 0x28, 0xb7, 0xcc, 0x9a, 0x14, 0x2a, 0xe8, 0x52, 0x92,
	0x4f, 0x01, 0xf2, 0xf8, 0x21, 0x62, 0x6b, 0x56, 0xb8, 0xc4, 0x4d, 0xea, 0xe5, 0xf1, 0xc3, 0x07,
	0x03, 0x90, 0x97, 0xd0, 0x52, 0x88, 0x99, 0xf4, 0x1b, 0xa3, 0xc6, 0xc4, 0xa3, 0xf6, 0x41, 0xae,
	0xa0, 0xab, 0x85, 0x08, 0x6d, 0x05, 0x7e, 0x7b, 0xd4, 0x98, 0x74, 0x66, 0x5f, 0x84, 0xbb, 0x3e,
	0x86, 0x87, 0x3c, 0x42, 0x5d, 0xb6, 0xab, 0xf7, 0x43, 0xa1, 0xc4, 0x86, 0x76, 0xd4, 0x0e, 0x21,
	0x21, 0x34, 0x91, 0x2b, 0xe9, 0x37, 0x47, 0xb5, 0x49, 0x67, 0x36, 0x3c, 0x12, 0xc7, 0x59, 0x52,
	0x63, 0x47, 0x5e, 0x43, 0x5f, 0xb7, 0x40, 0xa6, 0x0a, 0xc5, 0x26, 0x12, 0x88, 0xca, 0x6f, 0x99,
	0x96, 0xf5, 0x76, 0x30, 0x45, 0x54, 0xba, 0x3a, 0xc9, 0xa4, 0xd4, 0xd5, 0xa7, 0x73, 0xff, 0xc4,
	0xd8, 0x78, 0x0e, 0xf9, 0x61, 0x4e, 0xce, 0xc0, 0x5b, 0xa1, 0x54, 0x51, 0x11, 0xe7, 0xcc, 0x3f,
	0x35, 0xda, 0xb6, 0x06, 0xae, 0xe2, 0x9c, 0x0d, 0x7f, 0x87, 0xc1, 0x63, 0xd6, 0x64, 0x00, 0x8d,
	0x3b, 0xb6, 0x31, 0x6d, 0xf4, 0xa8, 0x16, 0xc9, 0x57, 0xd0, 0x5a, 0xc7, 0x59, 0xc9, 0x4c, 0xeb,
	0x3a, 0xb3, 0xcf, 0xf6, 0xb9, 0xff, 0x77, 0xd6, 0xd4, 0x1a, 0xbf, 0xab, 0xbf, 0xad, 0x05, 0x5f,
	0x43, 0xdf, 0x15, 0xa7, 0xed, 0xf4, 0x96, 0x10, 0x02, 0x4d, 0x43, 0xc5, 0xc6, 0x37, 0xb2, 0xc6,
	0xf4, 0x6e, 0x99, 0xf8, 0x5d, 0x6a, 0xe4, 0xe0, 0x9f, 0xfa, 0xd6, 0x97, 0x32, 0xc9, 0xb1, 0x90,
	0x8c, 0xbc, 0x87, 0x17, 0x09, 0xe6, 0xbc, 0x54, 0x76, 0xd8, 0xe6, 0x14, 0xfc, 0xba, 0x19, 0xcc,
	0xcb, 0x7d, 0x52, 0xdf, 0x6b, 0xc5, 0x39, 0x5b, 0xd0, 0xc1, 0x9e, 0xb9, 0x01, 0xc9, 0x3b, 0xe8,
	0xae, 0x32, 0x8c, 0x72, 0xa6, 0x62, 0x93, 0xb2, 0x65, 0x4a, 0xfa, 0x78, 0xdf, 0x9b, 0x96, 0xc5,
	0xa5, 0x53, 0xd3, 0xce, 0x2a, 0xc3, 0xea, 0x41, 0x3e, 0x87, 0xe7, 0xac, 0x48, 0x70, 0xce, 0xe6,
	0x91, 0x12, 0x71, 0xc2, 0xcc, 0x7a, 0x76, 0x69, 0xd7, 0x81, 0x37, 0x1a, 0x23, 0x17, 0x00, 0xbb,
	0xe3, 0x73, 0xd3, 0x7e, 0xbd, 0x1f, 0xbe, 0xba, 0xd1, 0x70, 0xef, 0x46, 0xab, 0x42, 0x3d, 0xe4,
	0x4e, 0x24, 0x6f, 0xc1, 0x33, 0xfb, 0x67, 0x58, 0x9e, 0x98, 0x1a, 0xcf, 0x8e, 0x2c, 0x4d, 0xd5,
	0x57, 0xda, 0x56, 0x55, 0x87, 0x5f, 0x41, 0x87, 0xe5, 0x5c, 0x6d, 0x1c, 0xc9, 0x53, 0x7b, 0x43,
	0x06, 0x32, 0x14, 0x7f, 0x6c, 0xb6, 0x6b, 0x83, 0x7a, 0xf0, 0x27, 0xf4, 0x2e, 0xb1, 0xd0, 0x7b,
	0xf4, 0xbf, 0x0f, 0xe9, 0x0d, 0x0c, 0x72, 0xeb, 0x92, 0x16, 0xcb, 0x28, 0x63, 0x6b, 0x96, 0x99,
	0x99, 0xb5, 0x68, 0x7f, 0x87, 0xff, 0xa4, 0x61, 0xf2, 0x09, 0x78, 0x2a, 0xcd, 0x99, 0x54, 0x71,
	0xce, 0xdd, 0x19, 0xef, 0x80, 0x60, 0x0c, 0xfd, 0x6d, 0x6e, 0x37, 0xdb, 0x6a, 0x07, 0xdc, 0x5e,
	0x68, 0x79, 0xf6, 0x57, 0x6d, 0xbb, 0x03, 0xe2, 0x17, 0xfb, 0x59, 0x92, 0x73, 0x38, 0xad, 0x5a,
	0x34, 0x7c, 0xfa, 0x18, 0x87, 0x67, 0x47, 0x75, 0x36, 0x57, 0xf0, 0x4c, 0x47, 0x71, 0x04, 0x0e,
	0xa3, 0x1c, 0x76, 0xe4, 0x30, 0xca, 0x23, 0xc6, 0xc1, 0xb3, 0x6f, 0xbf, 0xfb, 0xf5, 0xfd, 0x32,
	0x55, 0xab, 0xf2, 0x36, 0x4c, 0x30, 0xdf, 0xff, 0xf0, 0x8f, 0x8b, 0x4b, 0xb4, 0x5f, 0xef, 0xc1,
	0x57, 0x7d, 0x7b, 0x62, 0x7e, 0xde, 0x2f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x87, 0x62, 0xc2,
	0xe1, 0x31, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProfilerServiceClient is the client API for ProfilerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfilerServiceClient interface {
	// Starts a profiling session, blocks until it completes, and returns data.
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// Collects profiling data and returns user-friendly metrics.
	Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (*MonitorResponse, error)
}

type profilerServiceClient struct {
	cc *grpc.ClientConn
}

func NewProfilerServiceClient(cc *grpc.ClientConn) ProfilerServiceClient {
	return &profilerServiceClient{cc}
}

func (c *profilerServiceClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.ProfilerService/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerServiceClient) Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (*MonitorResponse, error) {
	out := new(MonitorResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.ProfilerService/Monitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilerServiceServer is the server API for ProfilerService service.
type ProfilerServiceServer interface {
	// Starts a profiling session, blocks until it completes, and returns data.
	Profile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	// Collects profiling data and returns user-friendly metrics.
	Monitor(context.Context, *MonitorRequest) (*MonitorResponse, error)
}

// UnimplementedProfilerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProfilerServiceServer struct {
}

func (*UnimplementedProfilerServiceServer) Profile(ctx context.Context, req *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (*UnimplementedProfilerServiceServer) Monitor(ctx context.Context, req *MonitorRequest) (*MonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}

func RegisterProfilerServiceServer(s *grpc.Server, srv ProfilerServiceServer) {
	s.RegisterService(&_ProfilerService_serviceDesc, srv)
}

func _ProfilerService_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServiceServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.ProfilerService/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServiceServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilerService_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServiceServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.ProfilerService/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServiceServer).Monitor(ctx, req.(*MonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfilerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.ProfilerService",
	HandlerType: (*ProfilerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _ProfilerService_Profile_Handler,
		},
		{
			MethodName: "Monitor",
			Handler:    _ProfilerService_Monitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorflow/core/profiler/profiler_service.proto",
}
