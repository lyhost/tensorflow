// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/util/test_log.proto

package util

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of benchmark.
type TestResults_BenchmarkType int32

const (
	TestResults_UNKNOWN            TestResults_BenchmarkType = 0
	TestResults_CPP_MICROBENCHMARK TestResults_BenchmarkType = 1
	TestResults_PYTHON_BENCHMARK   TestResults_BenchmarkType = 2
	TestResults_ANDROID_BENCHMARK  TestResults_BenchmarkType = 3
)

var TestResults_BenchmarkType_name = map[int32]string{
	0: "UNKNOWN",
	1: "CPP_MICROBENCHMARK",
	2: "PYTHON_BENCHMARK",
	3: "ANDROID_BENCHMARK",
}

var TestResults_BenchmarkType_value = map[string]int32{
	"UNKNOWN":            0,
	"CPP_MICROBENCHMARK": 1,
	"PYTHON_BENCHMARK":   2,
	"ANDROID_BENCHMARK":  3,
}

func (x TestResults_BenchmarkType) String() string {
	return proto.EnumName(TestResults_BenchmarkType_name, int32(x))
}

func (TestResults_BenchmarkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{13, 0}
}

type EntryValue struct {
	// Types that are valid to be assigned to Kind:
	//	*EntryValue_DoubleValue
	//	*EntryValue_StringValue
	Kind                 isEntryValue_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EntryValue) Reset()         { *m = EntryValue{} }
func (m *EntryValue) String() string { return proto.CompactTextString(m) }
func (*EntryValue) ProtoMessage()    {}
func (*EntryValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{0}
}

func (m *EntryValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntryValue.Unmarshal(m, b)
}
func (m *EntryValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntryValue.Marshal(b, m, deterministic)
}
func (m *EntryValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryValue.Merge(m, src)
}
func (m *EntryValue) XXX_Size() int {
	return xxx_messageInfo_EntryValue.Size(m)
}
func (m *EntryValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryValue.DiscardUnknown(m)
}

var xxx_messageInfo_EntryValue proto.InternalMessageInfo

type isEntryValue_Kind interface {
	isEntryValue_Kind()
}

type EntryValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type EntryValue_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof"`
}

func (*EntryValue_DoubleValue) isEntryValue_Kind() {}

func (*EntryValue_StringValue) isEntryValue_Kind() {}

func (m *EntryValue) GetKind() isEntryValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *EntryValue) GetDoubleValue() float64 {
	if x, ok := m.GetKind().(*EntryValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *EntryValue) GetStringValue() string {
	if x, ok := m.GetKind().(*EntryValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EntryValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EntryValue_DoubleValue)(nil),
		(*EntryValue_StringValue)(nil),
	}
}

type MetricEntry struct {
	// Metric name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Metric value
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	// The minimum acceptable value for the metric if specified
	MinValue *wrappers.DoubleValue `protobuf:"bytes,3,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// The maximum acceptable value for the metric if specified
	MaxValue             *wrappers.DoubleValue `protobuf:"bytes,4,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MetricEntry) Reset()         { *m = MetricEntry{} }
func (m *MetricEntry) String() string { return proto.CompactTextString(m) }
func (*MetricEntry) ProtoMessage()    {}
func (*MetricEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{1}
}

func (m *MetricEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricEntry.Unmarshal(m, b)
}
func (m *MetricEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricEntry.Marshal(b, m, deterministic)
}
func (m *MetricEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricEntry.Merge(m, src)
}
func (m *MetricEntry) XXX_Size() int {
	return xxx_messageInfo_MetricEntry.Size(m)
}
func (m *MetricEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MetricEntry proto.InternalMessageInfo

func (m *MetricEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricEntry) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MetricEntry) GetMinValue() *wrappers.DoubleValue {
	if m != nil {
		return m.MinValue
	}
	return nil
}

func (m *MetricEntry) GetMaxValue() *wrappers.DoubleValue {
	if m != nil {
		return m.MaxValue
	}
	return nil
}

// Each unit test or benchmark in a test or benchmark run provides
// some set of information.  Here we provide some reasonable keys
// one would expect to see, with optional key/value pairs for things
// we haven't considered.
//
// This BenchmarkEntry should be emitted by each unit test or benchmark
// reporter.
type BenchmarkEntry struct {
	// The name of the specific benchmark or test
	// (e.g. BM_AdjustContrast_gpu_B_W_H)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If a benchmark, how many iterations it was run for
	Iters int64 `protobuf:"varint,2,opt,name=iters,proto3" json:"iters,omitempty"`
	// Total cpu time used for all iterations (in seconds)
	CpuTime float64 `protobuf:"fixed64,3,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	// Total wall time used for all iterations (in seconds)
	WallTime float64 `protobuf:"fixed64,4,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// Throughput (in MB/s)
	Throughput float64 `protobuf:"fixed64,5,opt,name=throughput,proto3" json:"throughput,omitempty"`
	// Generic map from result key to value.
	Extras map[string]*EntryValue `protobuf:"bytes,6,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Metric name, value and expected range. This can include accuracy metrics
	// typically used to determine whether the accuracy test has passed
	Metrics              []*MetricEntry `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BenchmarkEntry) Reset()         { *m = BenchmarkEntry{} }
func (m *BenchmarkEntry) String() string { return proto.CompactTextString(m) }
func (*BenchmarkEntry) ProtoMessage()    {}
func (*BenchmarkEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{2}
}

func (m *BenchmarkEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BenchmarkEntry.Unmarshal(m, b)
}
func (m *BenchmarkEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BenchmarkEntry.Marshal(b, m, deterministic)
}
func (m *BenchmarkEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkEntry.Merge(m, src)
}
func (m *BenchmarkEntry) XXX_Size() int {
	return xxx_messageInfo_BenchmarkEntry.Size(m)
}
func (m *BenchmarkEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkEntry.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkEntry proto.InternalMessageInfo

func (m *BenchmarkEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BenchmarkEntry) GetIters() int64 {
	if m != nil {
		return m.Iters
	}
	return 0
}

func (m *BenchmarkEntry) GetCpuTime() float64 {
	if m != nil {
		return m.CpuTime
	}
	return 0
}

func (m *BenchmarkEntry) GetWallTime() float64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *BenchmarkEntry) GetThroughput() float64 {
	if m != nil {
		return m.Throughput
	}
	return 0
}

func (m *BenchmarkEntry) GetExtras() map[string]*EntryValue {
	if m != nil {
		return m.Extras
	}
	return nil
}

func (m *BenchmarkEntry) GetMetrics() []*MetricEntry {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type BenchmarkEntries struct {
	Entry                []*BenchmarkEntry `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BenchmarkEntries) Reset()         { *m = BenchmarkEntries{} }
func (m *BenchmarkEntries) String() string { return proto.CompactTextString(m) }
func (*BenchmarkEntries) ProtoMessage()    {}
func (*BenchmarkEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{3}
}

func (m *BenchmarkEntries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BenchmarkEntries.Unmarshal(m, b)
}
func (m *BenchmarkEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BenchmarkEntries.Marshal(b, m, deterministic)
}
func (m *BenchmarkEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchmarkEntries.Merge(m, src)
}
func (m *BenchmarkEntries) XXX_Size() int {
	return xxx_messageInfo_BenchmarkEntries.Size(m)
}
func (m *BenchmarkEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchmarkEntries.DiscardUnknown(m)
}

var xxx_messageInfo_BenchmarkEntries proto.InternalMessageInfo

func (m *BenchmarkEntries) GetEntry() []*BenchmarkEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type BuildConfiguration struct {
	Mode                 string   `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	CcFlags              []string `protobuf:"bytes,2,rep,name=cc_flags,json=ccFlags,proto3" json:"cc_flags,omitempty"`
	Opts                 []string `protobuf:"bytes,3,rep,name=opts,proto3" json:"opts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildConfiguration) Reset()         { *m = BuildConfiguration{} }
func (m *BuildConfiguration) String() string { return proto.CompactTextString(m) }
func (*BuildConfiguration) ProtoMessage()    {}
func (*BuildConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{4}
}

func (m *BuildConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildConfiguration.Unmarshal(m, b)
}
func (m *BuildConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildConfiguration.Marshal(b, m, deterministic)
}
func (m *BuildConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildConfiguration.Merge(m, src)
}
func (m *BuildConfiguration) XXX_Size() int {
	return xxx_messageInfo_BuildConfiguration.Size(m)
}
func (m *BuildConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BuildConfiguration proto.InternalMessageInfo

func (m *BuildConfiguration) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *BuildConfiguration) GetCcFlags() []string {
	if m != nil {
		return m.CcFlags
	}
	return nil
}

func (m *BuildConfiguration) GetOpts() []string {
	if m != nil {
		return m.Opts
	}
	return nil
}

type CommitId struct {
	// Types that are valid to be assigned to Kind:
	//	*CommitId_Changelist
	//	*CommitId_Hash
	Kind isCommitId_Kind `protobuf_oneof:"kind"`
	// Hash of intermediate change between hash/changelist and what was tested.
	// Not used if the build is from a commit without modifications.
	Snapshot string `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// Changelist tested if the change list is not already submitted.
	PendingChangelist    int64    `protobuf:"varint,4,opt,name=pending_changelist,json=pendingChangelist,proto3" json:"pending_changelist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitId) Reset()         { *m = CommitId{} }
func (m *CommitId) String() string { return proto.CompactTextString(m) }
func (*CommitId) ProtoMessage()    {}
func (*CommitId) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{5}
}

func (m *CommitId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitId.Unmarshal(m, b)
}
func (m *CommitId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitId.Marshal(b, m, deterministic)
}
func (m *CommitId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitId.Merge(m, src)
}
func (m *CommitId) XXX_Size() int {
	return xxx_messageInfo_CommitId.Size(m)
}
func (m *CommitId) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitId.DiscardUnknown(m)
}

var xxx_messageInfo_CommitId proto.InternalMessageInfo

type isCommitId_Kind interface {
	isCommitId_Kind()
}

type CommitId_Changelist struct {
	Changelist int64 `protobuf:"varint,1,opt,name=changelist,proto3,oneof"`
}

type CommitId_Hash struct {
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3,oneof"`
}

func (*CommitId_Changelist) isCommitId_Kind() {}

func (*CommitId_Hash) isCommitId_Kind() {}

func (m *CommitId) GetKind() isCommitId_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *CommitId) GetChangelist() int64 {
	if x, ok := m.GetKind().(*CommitId_Changelist); ok {
		return x.Changelist
	}
	return 0
}

func (m *CommitId) GetHash() string {
	if x, ok := m.GetKind().(*CommitId_Hash); ok {
		return x.Hash
	}
	return ""
}

func (m *CommitId) GetSnapshot() string {
	if m != nil {
		return m.Snapshot
	}
	return ""
}

func (m *CommitId) GetPendingChangelist() int64 {
	if m != nil {
		return m.PendingChangelist
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommitId) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommitId_Changelist)(nil),
		(*CommitId_Hash)(nil),
	}
}

type CPUInfo struct {
	NumCores        int64 `protobuf:"varint,1,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	NumCoresAllowed int64 `protobuf:"varint,2,opt,name=num_cores_allowed,json=numCoresAllowed,proto3" json:"num_cores_allowed,omitempty"`
	// How fast are these cpus?
	MhzPerCpu float64 `protobuf:"fixed64,3,opt,name=mhz_per_cpu,json=mhzPerCpu,proto3" json:"mhz_per_cpu,omitempty"`
	// Additional cpu information. For example,
	// Intel Ivybridge with HyperThreading (24 cores) dL1:32KB dL2:256KB dL3:30MB
	CpuInfo string `protobuf:"bytes,4,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	// What kind of cpu scaling is enabled on the host.
	// Examples include "performance", "ondemand", "conservative", "mixed".
	CpuGovernor string `protobuf:"bytes,5,opt,name=cpu_governor,json=cpuGovernor,proto3" json:"cpu_governor,omitempty"`
	// Cache sizes (in bytes), e.g. "L2": 262144 (for 256KB)
	CacheSize            map[string]int64 `protobuf:"bytes,6,rep,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CPUInfo) Reset()         { *m = CPUInfo{} }
func (m *CPUInfo) String() string { return proto.CompactTextString(m) }
func (*CPUInfo) ProtoMessage()    {}
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{6}
}

func (m *CPUInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPUInfo.Unmarshal(m, b)
}
func (m *CPUInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPUInfo.Marshal(b, m, deterministic)
}
func (m *CPUInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPUInfo.Merge(m, src)
}
func (m *CPUInfo) XXX_Size() int {
	return xxx_messageInfo_CPUInfo.Size(m)
}
func (m *CPUInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CPUInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CPUInfo proto.InternalMessageInfo

func (m *CPUInfo) GetNumCores() int64 {
	if m != nil {
		return m.NumCores
	}
	return 0
}

func (m *CPUInfo) GetNumCoresAllowed() int64 {
	if m != nil {
		return m.NumCoresAllowed
	}
	return 0
}

func (m *CPUInfo) GetMhzPerCpu() float64 {
	if m != nil {
		return m.MhzPerCpu
	}
	return 0
}

func (m *CPUInfo) GetCpuInfo() string {
	if m != nil {
		return m.CpuInfo
	}
	return ""
}

func (m *CPUInfo) GetCpuGovernor() string {
	if m != nil {
		return m.CpuGovernor
	}
	return ""
}

func (m *CPUInfo) GetCacheSize() map[string]int64 {
	if m != nil {
		return m.CacheSize
	}
	return nil
}

type MemoryInfo struct {
	Total                int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Available            int64    `protobuf:"varint,2,opt,name=available,proto3" json:"available,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryInfo) Reset()         { *m = MemoryInfo{} }
func (m *MemoryInfo) String() string { return proto.CompactTextString(m) }
func (*MemoryInfo) ProtoMessage()    {}
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{7}
}

func (m *MemoryInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryInfo.Unmarshal(m, b)
}
func (m *MemoryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryInfo.Marshal(b, m, deterministic)
}
func (m *MemoryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryInfo.Merge(m, src)
}
func (m *MemoryInfo) XXX_Size() int {
	return xxx_messageInfo_MemoryInfo.Size(m)
}
func (m *MemoryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryInfo proto.InternalMessageInfo

func (m *MemoryInfo) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MemoryInfo) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

type GPUInfo struct {
	Model                string   `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	BusId                string   `protobuf:"bytes,3,opt,name=bus_id,json=busId,proto3" json:"bus_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GPUInfo) Reset()         { *m = GPUInfo{} }
func (m *GPUInfo) String() string { return proto.CompactTextString(m) }
func (*GPUInfo) ProtoMessage()    {}
func (*GPUInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{8}
}

func (m *GPUInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GPUInfo.Unmarshal(m, b)
}
func (m *GPUInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GPUInfo.Marshal(b, m, deterministic)
}
func (m *GPUInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GPUInfo.Merge(m, src)
}
func (m *GPUInfo) XXX_Size() int {
	return xxx_messageInfo_GPUInfo.Size(m)
}
func (m *GPUInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GPUInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GPUInfo proto.InternalMessageInfo

func (m *GPUInfo) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *GPUInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GPUInfo) GetBusId() string {
	if m != nil {
		return m.BusId
	}
	return ""
}

type PlatformInfo struct {
	Bits                 string   `protobuf:"bytes,1,opt,name=bits,proto3" json:"bits,omitempty"`
	Linkage              string   `protobuf:"bytes,2,opt,name=linkage,proto3" json:"linkage,omitempty"`
	Machine              string   `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
	Release              string   `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	System               string   `protobuf:"bytes,5,opt,name=system,proto3" json:"system,omitempty"`
	Version              string   `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlatformInfo) Reset()         { *m = PlatformInfo{} }
func (m *PlatformInfo) String() string { return proto.CompactTextString(m) }
func (*PlatformInfo) ProtoMessage()    {}
func (*PlatformInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{9}
}

func (m *PlatformInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlatformInfo.Unmarshal(m, b)
}
func (m *PlatformInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlatformInfo.Marshal(b, m, deterministic)
}
func (m *PlatformInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformInfo.Merge(m, src)
}
func (m *PlatformInfo) XXX_Size() int {
	return xxx_messageInfo_PlatformInfo.Size(m)
}
func (m *PlatformInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformInfo proto.InternalMessageInfo

func (m *PlatformInfo) GetBits() string {
	if m != nil {
		return m.Bits
	}
	return ""
}

func (m *PlatformInfo) GetLinkage() string {
	if m != nil {
		return m.Linkage
	}
	return ""
}

func (m *PlatformInfo) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *PlatformInfo) GetRelease() string {
	if m != nil {
		return m.Release
	}
	return ""
}

func (m *PlatformInfo) GetSystem() string {
	if m != nil {
		return m.System
	}
	return ""
}

func (m *PlatformInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type AvailableDeviceInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	MemoryLimit          int64    `protobuf:"varint,3,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	PhysicalDescription  string   `protobuf:"bytes,4,opt,name=physical_description,json=physicalDescription,proto3" json:"physical_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableDeviceInfo) Reset()         { *m = AvailableDeviceInfo{} }
func (m *AvailableDeviceInfo) String() string { return proto.CompactTextString(m) }
func (*AvailableDeviceInfo) ProtoMessage()    {}
func (*AvailableDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{10}
}

func (m *AvailableDeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailableDeviceInfo.Unmarshal(m, b)
}
func (m *AvailableDeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailableDeviceInfo.Marshal(b, m, deterministic)
}
func (m *AvailableDeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableDeviceInfo.Merge(m, src)
}
func (m *AvailableDeviceInfo) XXX_Size() int {
	return xxx_messageInfo_AvailableDeviceInfo.Size(m)
}
func (m *AvailableDeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableDeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableDeviceInfo proto.InternalMessageInfo

func (m *AvailableDeviceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AvailableDeviceInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AvailableDeviceInfo) GetMemoryLimit() int64 {
	if m != nil {
		return m.MemoryLimit
	}
	return 0
}

func (m *AvailableDeviceInfo) GetPhysicalDescription() string {
	if m != nil {
		return m.PhysicalDescription
	}
	return ""
}

type MachineConfiguration struct {
	// Host name of machine that ran the benchmark.
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Unique serial number of the machine.
	SerialIdentifier string `protobuf:"bytes,7,opt,name=serial_identifier,json=serialIdentifier,proto3" json:"serial_identifier,omitempty"`
	// Additional platform information.
	PlatformInfo *PlatformInfo `protobuf:"bytes,2,opt,name=platform_info,json=platformInfo,proto3" json:"platform_info,omitempty"`
	// CPU Information.
	CpuInfo *CPUInfo `protobuf:"bytes,3,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	// Other devices that are attached and relevant (e.g. GPUInfo).
	DeviceInfo []*any.Any `protobuf:"bytes,4,rep,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	// Devices accessible to the test (e.g. as given by list_local_devices).
	AvailableDeviceInfo  []*AvailableDeviceInfo `protobuf:"bytes,5,rep,name=available_device_info,json=availableDeviceInfo,proto3" json:"available_device_info,omitempty"`
	MemoryInfo           *MemoryInfo            `protobuf:"bytes,6,opt,name=memory_info,json=memoryInfo,proto3" json:"memory_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MachineConfiguration) Reset()         { *m = MachineConfiguration{} }
func (m *MachineConfiguration) String() string { return proto.CompactTextString(m) }
func (*MachineConfiguration) ProtoMessage()    {}
func (*MachineConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{11}
}

func (m *MachineConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineConfiguration.Unmarshal(m, b)
}
func (m *MachineConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineConfiguration.Marshal(b, m, deterministic)
}
func (m *MachineConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineConfiguration.Merge(m, src)
}
func (m *MachineConfiguration) XXX_Size() int {
	return xxx_messageInfo_MachineConfiguration.Size(m)
}
func (m *MachineConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_MachineConfiguration proto.InternalMessageInfo

func (m *MachineConfiguration) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *MachineConfiguration) GetSerialIdentifier() string {
	if m != nil {
		return m.SerialIdentifier
	}
	return ""
}

func (m *MachineConfiguration) GetPlatformInfo() *PlatformInfo {
	if m != nil {
		return m.PlatformInfo
	}
	return nil
}

func (m *MachineConfiguration) GetCpuInfo() *CPUInfo {
	if m != nil {
		return m.CpuInfo
	}
	return nil
}

func (m *MachineConfiguration) GetDeviceInfo() []*any.Any {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *MachineConfiguration) GetAvailableDeviceInfo() []*AvailableDeviceInfo {
	if m != nil {
		return m.AvailableDeviceInfo
	}
	return nil
}

func (m *MachineConfiguration) GetMemoryInfo() *MemoryInfo {
	if m != nil {
		return m.MemoryInfo
	}
	return nil
}

// Run-specific items such as arguments to the test / benchmark.
type RunConfiguration struct {
	Argument             []string `protobuf:"bytes,1,rep,name=argument,proto3" json:"argument,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunConfiguration) Reset()         { *m = RunConfiguration{} }
func (m *RunConfiguration) String() string { return proto.CompactTextString(m) }
func (*RunConfiguration) ProtoMessage()    {}
func (*RunConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{12}
}

func (m *RunConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunConfiguration.Unmarshal(m, b)
}
func (m *RunConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunConfiguration.Marshal(b, m, deterministic)
}
func (m *RunConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunConfiguration.Merge(m, src)
}
func (m *RunConfiguration) XXX_Size() int {
	return xxx_messageInfo_RunConfiguration.Size(m)
}
func (m *RunConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_RunConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_RunConfiguration proto.InternalMessageInfo

func (m *RunConfiguration) GetArgument() []string {
	if m != nil {
		return m.Argument
	}
	return nil
}

// The output of one benchmark / test run.  Each run contains a list of
// tests or benchmarks, stored as BenchmarkEntry messages.
//
// This message should be emitted by the reporter (which runs the
// test / BM in a subprocess and then reads the emitted BenchmarkEntry messages;
// usually from a serialized json file, finally collecting them along
// with additional information about the test run.
type TestResults struct {
	// The target of the run, e.g.:
	//  //tensorflow/core:kernels_adjust_contrast_op_benchmark_test
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The list of tests or benchmarks in this run.
	Entries *BenchmarkEntries `protobuf:"bytes,2,opt,name=entries,proto3" json:"entries,omitempty"`
	// The configuration of the build (compiled opt? with cuda? any copts?)
	BuildConfiguration *BuildConfiguration `protobuf:"bytes,3,opt,name=build_configuration,json=buildConfiguration,proto3" json:"build_configuration,omitempty"`
	// The commit id (git hash or changelist)
	CommitId *CommitId `protobuf:"bytes,4,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	// The time the run started (in seconds of UTC time since Unix epoch)
	StartTime int64 `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The amount of time the total run took (wall time in seconds)
	RunTime float64 `protobuf:"fixed64,6,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// Machine-specific parameters (Platform and CPU info)
	MachineConfiguration *MachineConfiguration `protobuf:"bytes,7,opt,name=machine_configuration,json=machineConfiguration,proto3" json:"machine_configuration,omitempty"`
	// Run-specific parameters (arguments, etc)
	RunConfiguration *RunConfiguration `protobuf:"bytes,8,opt,name=run_configuration,json=runConfiguration,proto3" json:"run_configuration,omitempty"`
	// Benchmark target identifier.
	Name          string                    `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	BenchmarkType TestResults_BenchmarkType `protobuf:"varint,10,opt,name=benchmark_type,json=benchmarkType,proto3,enum=tensorflow.TestResults_BenchmarkType" json:"benchmark_type,omitempty"`
	// Used for differentiating between continuous and debug builds.
	// Must be one of:
	// * cbuild: results from continuous build.
	// * presubmit: results from oneshot requests.
	// * culprit: results from culprit finder rerun.
	RunMode string `protobuf:"bytes,11,opt,name=run_mode,json=runMode,proto3" json:"run_mode,omitempty"`
	// TensorFlow version this benchmark runs against.
	// This can be either set to full version or just the major version.
	TfVersion            string   `protobuf:"bytes,12,opt,name=tf_version,json=tfVersion,proto3" json:"tf_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResults) Reset()         { *m = TestResults{} }
func (m *TestResults) String() string { return proto.CompactTextString(m) }
func (*TestResults) ProtoMessage()    {}
func (*TestResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_cee84bc6d943a572, []int{13}
}

func (m *TestResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResults.Unmarshal(m, b)
}
func (m *TestResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResults.Marshal(b, m, deterministic)
}
func (m *TestResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResults.Merge(m, src)
}
func (m *TestResults) XXX_Size() int {
	return xxx_messageInfo_TestResults.Size(m)
}
func (m *TestResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResults.DiscardUnknown(m)
}

var xxx_messageInfo_TestResults proto.InternalMessageInfo

func (m *TestResults) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *TestResults) GetEntries() *BenchmarkEntries {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *TestResults) GetBuildConfiguration() *BuildConfiguration {
	if m != nil {
		return m.BuildConfiguration
	}
	return nil
}

func (m *TestResults) GetCommitId() *CommitId {
	if m != nil {
		return m.CommitId
	}
	return nil
}

func (m *TestResults) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TestResults) GetRunTime() float64 {
	if m != nil {
		return m.RunTime
	}
	return 0
}

func (m *TestResults) GetMachineConfiguration() *MachineConfiguration {
	if m != nil {
		return m.MachineConfiguration
	}
	return nil
}

func (m *TestResults) GetRunConfiguration() *RunConfiguration {
	if m != nil {
		return m.RunConfiguration
	}
	return nil
}

func (m *TestResults) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestResults) GetBenchmarkType() TestResults_BenchmarkType {
	if m != nil {
		return m.BenchmarkType
	}
	return TestResults_UNKNOWN
}

func (m *TestResults) GetRunMode() string {
	if m != nil {
		return m.RunMode
	}
	return ""
}

func (m *TestResults) GetTfVersion() string {
	if m != nil {
		return m.TfVersion
	}
	return ""
}

func init() {
	proto.RegisterEnum("tensorflow.TestResults_BenchmarkType", TestResults_BenchmarkType_name, TestResults_BenchmarkType_value)
	proto.RegisterType((*EntryValue)(nil), "tensorflow.EntryValue")
	proto.RegisterType((*MetricEntry)(nil), "tensorflow.MetricEntry")
	proto.RegisterType((*BenchmarkEntry)(nil), "tensorflow.BenchmarkEntry")
	proto.RegisterMapType((map[string]*EntryValue)(nil), "tensorflow.BenchmarkEntry.ExtrasEntry")
	proto.RegisterType((*BenchmarkEntries)(nil), "tensorflow.BenchmarkEntries")
	proto.RegisterType((*BuildConfiguration)(nil), "tensorflow.BuildConfiguration")
	proto.RegisterType((*CommitId)(nil), "tensorflow.CommitId")
	proto.RegisterType((*CPUInfo)(nil), "tensorflow.CPUInfo")
	proto.RegisterMapType((map[string]int64)(nil), "tensorflow.CPUInfo.CacheSizeEntry")
	proto.RegisterType((*MemoryInfo)(nil), "tensorflow.MemoryInfo")
	proto.RegisterType((*GPUInfo)(nil), "tensorflow.GPUInfo")
	proto.RegisterType((*PlatformInfo)(nil), "tensorflow.PlatformInfo")
	proto.RegisterType((*AvailableDeviceInfo)(nil), "tensorflow.AvailableDeviceInfo")
	proto.RegisterType((*MachineConfiguration)(nil), "tensorflow.MachineConfiguration")
	proto.RegisterType((*RunConfiguration)(nil), "tensorflow.RunConfiguration")
	proto.RegisterType((*TestResults)(nil), "tensorflow.TestResults")
}

func init() {
	proto.RegisterFile("tensorflow/core/util/test_log.proto", fileDescriptor_cee84bc6d943a572)
}

var fileDescriptor_cee84bc6d943a572 = []byte{
	// 1400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x5b, 0x53, 0x1b, 0xb7,
	0x17, 0xcf, 0xe2, 0xeb, 0x1e, 0x03, 0x7f, 0x23, 0x4c, 0xfe, 0x0e, 0x49, 0x28, 0x75, 0xa6, 0x1d,
	0xa6, 0x17, 0xd3, 0xd0, 0xe9, 0x75, 0x9a, 0x4e, 0xc1, 0xa4, 0x81, 0x26, 0x80, 0xab, 0x90, 0x64,
	0xda, 0x87, 0xee, 0xac, 0xd7, 0xf2, 0x5a, 0xc3, 0xee, 0x6a, 0x47, 0xd2, 0x42, 0xcc, 0xd7, 0xc8,
	0xf4, 0x0b, 0xf4, 0xbd, 0x0f, 0x7d, 0xef, 0x07, 0xe9, 0x47, 0xe9, 0x63, 0x47, 0x97, 0xb5, 0xd7,
	0x40, 0x3a, 0x7d, 0xd3, 0xb9, 0xe8, 0xe8, 0x48, 0xbf, 0xdf, 0x39, 0x47, 0xf0, 0x40, 0x92, 0x44,
	0x30, 0x3e, 0x8a, 0xd8, 0xc5, 0x76, 0xc0, 0x38, 0xd9, 0xce, 0x24, 0x8d, 0xb6, 0x25, 0x11, 0xd2,
	0x8b, 0x58, 0xd8, 0x4d, 0x39, 0x93, 0x0c, 0xc1, 0xcc, 0x69, 0xfd, 0x4e, 0xc8, 0x58, 0x18, 0x91,
	0x6d, 0x6d, 0x19, 0x64, 0xa3, 0x6d, 0x3f, 0x99, 0x18, 0xb7, 0xf5, 0x8d, 0xab, 0xa6, 0x0b, 0xee,
	0xa7, 0x29, 0xe1, 0xc2, 0xd8, 0x3b, 0xbf, 0x00, 0x3c, 0x4e, 0x24, 0x9f, 0xbc, 0xf4, 0xa3, 0x8c,
	0xa0, 0x07, 0xb0, 0x38, 0x64, 0xd9, 0x20, 0x22, 0xde, 0xb9, 0x92, 0xdb, 0xce, 0xa6, 0xb3, 0xe5,
	0x1c, 0xdc, 0xc2, 0x0d, 0xa3, 0x9d, 0x3a, 0x09, 0xc9, 0x69, 0x12, 0x5a, 0xa7, 0x85, 0x4d, 0x67,
	0xcb, 0x55, 0x4e, 0x46, 0xab, 0x9d, 0xf6, 0xaa, 0x50, 0x3e, 0xa3, 0xc9, 0xb0, 0xf3, 0xbb, 0x03,
	0x8d, 0x23, 0x22, 0x39, 0x0d, 0xf4, 0x31, 0x08, 0x41, 0x39, 0xf1, 0x63, 0x13, 0xd9, 0xc5, 0x7a,
	0x8d, 0x5a, 0x50, 0x99, 0x45, 0x72, 0xb0, 0x11, 0xd0, 0x57, 0xe0, 0xc6, 0x34, 0xb1, 0x67, 0x94,
	0x36, 0x9d, 0xad, 0xc6, 0xce, 0xbd, 0xae, 0xb9, 0x4d, 0x37, 0xbf, 0x4d, 0x77, 0x7f, 0x96, 0x17,
	0xae, 0xc7, 0x34, 0x79, 0x39, 0xdd, 0xea, 0xbf, 0xb6, 0x5b, 0xcb, 0xff, 0x69, 0xab, 0xff, 0x5a,
	0xaf, 0x3a, 0x7f, 0x2d, 0xc0, 0xf2, 0x1e, 0x49, 0x82, 0x71, 0xec, 0xf3, 0xb3, 0x7f, 0x4d, 0x99,
	0x4a, 0xc2, 0x85, 0x4e, 0xb9, 0x84, 0x8d, 0x80, 0xee, 0x40, 0x3d, 0x48, 0x33, 0x4f, 0xd2, 0xd8,
	0x64, 0xec, 0xe0, 0x5a, 0x90, 0x66, 0xa7, 0x34, 0x26, 0xe8, 0x2e, 0xb8, 0x17, 0x7e, 0x14, 0x19,
	0x5b, 0x59, 0xdb, 0xea, 0x4a, 0xa1, 0x8d, 0x1b, 0x00, 0x72, 0xcc, 0x59, 0x16, 0x8e, 0xd3, 0x4c,
	0xb6, 0x2b, 0xda, 0x5a, 0xd0, 0xa0, 0x6f, 0xa1, 0x4a, 0x5e, 0x4b, 0xee, 0x8b, 0x76, 0x75, 0xb3,
	0xb4, 0xd5, 0xd8, 0x79, 0xbf, 0x3b, 0x03, 0xbf, 0x3b, 0x9f, 0x6d, 0xf7, 0xb1, 0x76, 0xd4, 0x6b,
	0x6c, 0x77, 0xa1, 0x87, 0x50, 0x8b, 0x35, 0x06, 0xa2, 0x5d, 0xd3, 0x01, 0xfe, 0x5f, 0x0c, 0x50,
	0x80, 0x07, 0xe7, 0x7e, 0xeb, 0x3f, 0x42, 0xa3, 0x10, 0x09, 0x35, 0xa1, 0x74, 0x46, 0x26, 0xf6,
	0x09, 0xd4, 0x12, 0x7d, 0x54, 0x04, 0xad, 0xb1, 0x73, 0xbb, 0x18, 0x71, 0xc6, 0x28, 0x0b, 0xe6,
	0xd7, 0x0b, 0x5f, 0x3a, 0x9d, 0x7d, 0x68, 0xce, 0xe5, 0x4a, 0x89, 0x40, 0x9f, 0x40, 0x85, 0x28,
	0xe7, 0xb6, 0xa3, 0xf3, 0x5a, 0x7f, 0xfb, 0xc5, 0xb0, 0x71, 0xec, 0xbc, 0x02, 0xb4, 0x97, 0xd1,
	0x68, 0xd8, 0x63, 0xc9, 0x88, 0x86, 0x19, 0xf7, 0x25, 0x65, 0x89, 0xc2, 0x28, 0x66, 0xc3, 0x29,
	0x46, 0x6a, 0xad, 0xd1, 0x08, 0xbc, 0x51, 0xe4, 0x87, 0x0a, 0xa6, 0xd2, 0x96, 0x8b, 0x6b, 0x41,
	0xf0, 0xbd, 0x12, 0x95, 0x3b, 0x4b, 0xa5, 0x68, 0x97, 0xb4, 0x5a, 0xaf, 0x3b, 0xbf, 0x3a, 0x50,
	0xef, 0xb1, 0x38, 0xa6, 0xf2, 0x70, 0x88, 0x36, 0x01, 0x82, 0xb1, 0x9f, 0x84, 0x24, 0xa2, 0x42,
	0xea, 0xa8, 0xa5, 0x83, 0x5b, 0xb8, 0xa0, 0x43, 0x2d, 0x28, 0x8f, 0x7d, 0x31, 0x9e, 0xb2, 0x5f,
	0x4b, 0x68, 0x1d, 0xea, 0x22, 0xf1, 0x53, 0x31, 0x66, 0x52, 0x33, 0xc0, 0xc5, 0x53, 0x19, 0x7d,
	0x0c, 0x28, 0x25, 0xc9, 0x50, 0x15, 0x4e, 0x21, 0x76, 0x59, 0x13, 0x68, 0xc5, 0x5a, 0x7a, 0x53,
	0xc3, 0xb4, 0x82, 0xfe, 0x58, 0x80, 0x5a, 0xaf, 0xff, 0xe2, 0x30, 0x19, 0x31, 0xc5, 0xa2, 0x24,
	0x8b, 0x3d, 0xd5, 0x14, 0x84, 0xc9, 0x0a, 0xd7, 0x93, 0x2c, 0xee, 0x29, 0x19, 0x7d, 0x00, 0x2b,
	0x53, 0xa3, 0xe7, 0x47, 0x11, 0xbb, 0x20, 0x43, 0xcb, 0xcf, 0xff, 0xe5, 0x4e, 0xbb, 0x46, 0x8d,
	0x36, 0xa0, 0x11, 0x8f, 0x2f, 0xbd, 0x94, 0x70, 0x2f, 0x48, 0x33, 0x4b, 0x56, 0x37, 0x1e, 0x5f,
	0xf6, 0x09, 0xef, 0xa5, 0x59, 0xce, 0x64, 0x9a, 0x8c, 0x98, 0xce, 0xd0, 0xd5, 0x4c, 0xd6, 0x39,
	0xbc, 0x0b, 0x8b, 0xca, 0x14, 0xb2, 0x73, 0xc2, 0x13, 0xc6, 0x35, 0x5d, 0x5d, 0xdc, 0x08, 0xd2,
	0xec, 0x89, 0x55, 0xa1, 0x5d, 0x80, 0xc0, 0x0f, 0xc6, 0xc4, 0x13, 0xf4, 0x92, 0x58, 0xce, 0x76,
	0x8a, 0xd0, 0xda, 0xfb, 0x74, 0x7b, 0xca, 0xeb, 0x39, 0xbd, 0x24, 0x06, 0x62, 0x37, 0xc8, 0xe5,
	0xf5, 0x6f, 0x60, 0x79, 0xde, 0x78, 0x03, 0x05, 0xe7, 0xfa, 0x46, 0xa9, 0x48, 0xb5, 0xef, 0x00,
	0x8e, 0x48, 0xcc, 0xf8, 0x44, 0x67, 0xdc, 0x82, 0x8a, 0x64, 0xd2, 0x8f, 0xec, 0x8b, 0x19, 0x01,
	0xdd, 0x03, 0xd7, 0x3f, 0xf7, 0x69, 0xe4, 0x0f, 0xa2, 0x3c, 0xc2, 0x4c, 0xd1, 0xf9, 0x01, 0x6a,
	0x4f, 0xec, 0xa3, 0xb7, 0xa0, 0xa2, 0xf8, 0x14, 0xd9, 0xa3, 0x8d, 0xa0, 0x28, 0x94, 0x65, 0xd4,
	0x3c, 0xb0, 0x8b, 0xf5, 0x1a, 0xad, 0x41, 0x75, 0x90, 0x09, 0x8f, 0x0e, 0x2d, 0xf6, 0x95, 0x41,
	0x26, 0x0e, 0x87, 0x9d, 0xdf, 0x1c, 0x58, 0xec, 0x47, 0xbe, 0x1c, 0x31, 0x1e, 0xeb, 0x88, 0x08,
	0xca, 0x03, 0x2a, 0x45, 0xce, 0x56, 0xb5, 0x46, 0x6d, 0xa8, 0x45, 0x34, 0x39, 0xf3, 0x43, 0xdb,
	0x50, 0x71, 0x2e, 0x2a, 0x4b, 0xec, 0x07, 0x63, 0x9a, 0x10, 0x1b, 0x36, 0x17, 0x95, 0x85, 0x93,
	0x88, 0xf8, 0x82, 0xe4, 0x20, 0x59, 0x11, 0xdd, 0x86, 0xaa, 0x98, 0x08, 0x49, 0x62, 0x0b, 0x8f,
	0x95, 0xd4, 0x8e, 0x73, 0xc2, 0x05, 0x65, 0x49, 0xbb, 0x6a, 0x76, 0x58, 0xb1, 0xf3, 0xc6, 0x81,
	0xd5, 0xdd, 0xfc, 0xfa, 0xfb, 0xe4, 0x9c, 0x06, 0x24, 0xcf, 0xf5, 0x5a, 0xf7, 0x43, 0x50, 0x96,
	0x93, 0x34, 0x4f, 0x54, 0xaf, 0x15, 0x2d, 0x62, 0xfd, 0xe4, 0x5e, 0x44, 0x63, 0x6a, 0xd8, 0x5f,
	0xc2, 0x0d, 0xa3, 0x7b, 0xa6, 0x54, 0xe8, 0x21, 0xb4, 0xd2, 0xf1, 0x44, 0xd0, 0xc0, 0x8f, 0xbc,
	0x21, 0x11, 0x01, 0xa7, 0xa9, 0x2a, 0x5e, 0x9b, 0xfb, 0x6a, 0x6e, 0xdb, 0x9f, 0x99, 0x3a, 0x6f,
	0x4a, 0xd0, 0x3a, 0x32, 0xb7, 0x9d, 0x2f, 0xf8, 0x75, 0xa8, 0x8f, 0x99, 0x90, 0x85, 0xd4, 0xa6,
	0x32, 0xfa, 0x10, 0x56, 0x04, 0xe1, 0xd4, 0x8f, 0x3c, 0x3a, 0x24, 0x89, 0xa4, 0x23, 0x4a, 0x78,
	0xbb, 0xa6, 0x9d, 0x9a, 0xc6, 0x70, 0x38, 0xd5, 0xa3, 0x47, 0xb0, 0x94, 0x5a, 0x6c, 0x0c, 0xdd,
	0x4d, 0x3f, 0x6b, 0x17, 0xe9, 0x5a, 0x04, 0x0f, 0x2f, 0xa6, 0x45, 0x28, 0xbb, 0x85, 0x42, 0x31,
	0x43, 0x6a, 0xf5, 0x06, 0xa2, 0xcf, 0xaa, 0xe7, 0x33, 0x68, 0x0c, 0xf5, 0xe3, 0xe6, 0xb5, 0xa5,
	0x6a, 0xa3, 0x75, 0x6d, 0x38, 0xed, 0x26, 0x13, 0x0c, 0xc3, 0x19, 0x0a, 0xcf, 0x61, 0x6d, 0xca,
	0x4d, 0xaf, 0x18, 0xa0, 0xa2, 0x03, 0xbc, 0x53, 0x3c, 0xf3, 0x06, 0x14, 0xf1, 0xaa, 0x7f, 0x03,
	0xb4, 0x5f, 0x80, 0x85, 0xc7, 0x84, 0xaa, 0x5e, 0x6f, 0xe4, 0xb3, 0x22, 0xc2, 0x10, 0x4f, 0xd7,
	0x9d, 0x2e, 0x34, 0x71, 0x96, 0x5c, 0x03, 0xc4, 0xe7, 0x61, 0x16, 0x93, 0x44, 0xea, 0x66, 0xee,
	0xe2, 0xa9, 0xdc, 0xf9, 0xb3, 0x02, 0x8d, 0x53, 0x22, 0x24, 0x26, 0x22, 0x8b, 0xa4, 0x50, 0xec,
	0x94, 0x3e, 0x0f, 0x89, 0xb4, 0xd0, 0x59, 0x09, 0x7d, 0x0e, 0x35, 0x62, 0x06, 0x83, 0x45, 0xe1,
	0xde, 0x5b, 0xe7, 0x01, 0x25, 0x02, 0xe7, 0xce, 0xe8, 0x04, 0x56, 0x07, 0x6a, 0x26, 0x78, 0x41,
	0x31, 0x25, 0x8b, 0xc7, 0xc6, 0x5c, 0x8c, 0x6b, 0xa3, 0x03, 0xa3, 0xc1, 0xf5, 0x71, 0xf2, 0x10,
	0xdc, 0x40, 0x8f, 0x02, 0x55, 0xcb, 0xe6, 0x03, 0xd1, 0x9a, 0x83, 0xd5, 0xce, 0x09, 0x5c, 0x0f,
	0xf2, 0x89, 0x71, 0x1f, 0x40, 0x48, 0x9f, 0x4b, 0x33, 0xe1, 0x2b, 0xa6, 0x9f, 0x68, 0x8d, 0x1e,
	0xf1, 0x77, 0xa0, 0xce, 0xb3, 0xc4, 0x18, 0xab, 0xe6, 0x6b, 0xc0, 0xb3, 0x44, 0x9b, 0x5e, 0xc0,
	0x9a, 0x2d, 0xe8, 0x2b, 0xf9, 0xd7, 0xf4, 0xc1, 0x9b, 0x73, 0x80, 0xdc, 0x50, 0x0b, 0xb8, 0x15,
	0xdf, 0x54, 0x21, 0x87, 0xb0, 0xa2, 0x4e, 0x9c, 0x0f, 0x59, 0xbf, 0xfe, 0xac, 0x57, 0x91, 0xc4,
	0x4d, 0x7e, 0x15, 0xdb, 0xbc, 0x07, 0xb8, 0x85, 0x1e, 0xf0, 0x0c, 0x96, 0x07, 0x39, 0x20, 0x9e,
	0xee, 0x06, 0xb0, 0xe9, 0x6c, 0x2d, 0xef, 0xbc, 0x57, 0x8c, 0x5d, 0x00, 0x7d, 0x06, 0xdf, 0xe9,
	0x24, 0x25, 0x78, 0x69, 0x50, 0x14, 0xf3, 0xe7, 0xd1, 0x33, 0xbc, 0x61, 0x5b, 0x59, 0x96, 0x1c,
	0xa9, 0x31, 0x7e, 0x1f, 0x40, 0x8e, 0xbc, 0xbc, 0x6b, 0x2d, 0x6a, 0xa3, 0x2b, 0x47, 0x2f, 0x6d,
	0xdf, 0xf2, 0x61, 0x69, 0x2e, 0x32, 0x6a, 0x40, 0xed, 0xc5, 0xf1, 0xd3, 0xe3, 0x93, 0x57, 0xc7,
	0xcd, 0x5b, 0xe8, 0x36, 0xa0, 0x5e, 0xbf, 0xef, 0x1d, 0x1d, 0xf6, 0xf0, 0xc9, 0xde, 0xe3, 0xe3,
	0xde, 0xc1, 0xd1, 0x2e, 0x7e, 0xda, 0x74, 0x50, 0x0b, 0x9a, 0xfd, 0x9f, 0x4e, 0x0f, 0x4e, 0x8e,
	0xbd, 0x99, 0x76, 0x01, 0xad, 0xc1, 0xca, 0xee, 0xf1, 0x3e, 0x3e, 0x39, 0xdc, 0x2f, 0xa8, 0x4b,
	0x7b, 0x29, 0xdc, 0x65, 0x3c, 0x2c, 0xde, 0x4b, 0x7d, 0xc8, 0xbb, 0xea, 0x43, 0x1e, 0xb1, 0x70,
	0x6f, 0x49, 0xdd, 0xf2, 0x19, 0x0b, 0xfb, 0xaa, 0x78, 0x45, 0xdf, 0xf9, 0xf9, 0x51, 0x48, 0xe5,
	0x38, 0x1b, 0x74, 0x03, 0x16, 0x6f, 0x17, 0xbe, 0xf2, 0x37, 0x2f, 0x43, 0x66, 0xfe, 0xf8, 0xd3,
	0x8f, 0xfe, 0xdf, 0x8e, 0x33, 0xa8, 0xea, 0x46, 0xf0, 0xe9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x25, 0x76, 0x04, 0x7a, 0x0a, 0x0c, 0x00, 0x00,
}
