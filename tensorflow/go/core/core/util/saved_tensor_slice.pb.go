// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/util/saved_tensor_slice.proto

package util

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	framework "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Metadata describing the set of slices of the same tensor saved in a
// checkpoint file.
type SavedSliceMeta struct {
	// Name of the tensor.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Shape of the tensor
	Shape *framework.TensorShapeProto `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	// Type of the tensor
	Type framework.DataType `protobuf:"varint,3,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	// Explicit list of slices saved in the checkpoint file.
	Slice                []*framework.TensorSliceProto `protobuf:"bytes,4,rep,name=slice,proto3" json:"slice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SavedSliceMeta) Reset()         { *m = SavedSliceMeta{} }
func (m *SavedSliceMeta) String() string { return proto.CompactTextString(m) }
func (*SavedSliceMeta) ProtoMessage()    {}
func (*SavedSliceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{0}
}

func (m *SavedSliceMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SavedSliceMeta.Unmarshal(m, b)
}
func (m *SavedSliceMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SavedSliceMeta.Marshal(b, m, deterministic)
}
func (m *SavedSliceMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedSliceMeta.Merge(m, src)
}
func (m *SavedSliceMeta) XXX_Size() int {
	return xxx_messageInfo_SavedSliceMeta.Size(m)
}
func (m *SavedSliceMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedSliceMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SavedSliceMeta proto.InternalMessageInfo

func (m *SavedSliceMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSliceMeta) GetShape() *framework.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *SavedSliceMeta) GetType() framework.DataType {
	if m != nil {
		return m.Type
	}
	return framework.DataType_DT_INVALID
}

func (m *SavedSliceMeta) GetSlice() []*framework.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

// Metadata describing the set of tensor slices saved in a checkpoint file.
// It is always stored at the beginning of each checkpoint file.
type SavedTensorSliceMeta struct {
	// Each SavedSliceMeta describes the slices for one tensor.
	Tensor []*SavedSliceMeta `protobuf:"bytes,1,rep,name=tensor,proto3" json:"tensor,omitempty"`
	// Compatibility version of this checkpoint.  See core/public/version.h
	// for version history.
	Versions             *framework.VersionDef `protobuf:"bytes,2,opt,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SavedTensorSliceMeta) Reset()         { *m = SavedTensorSliceMeta{} }
func (m *SavedTensorSliceMeta) String() string { return proto.CompactTextString(m) }
func (*SavedTensorSliceMeta) ProtoMessage()    {}
func (*SavedTensorSliceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{1}
}

func (m *SavedTensorSliceMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SavedTensorSliceMeta.Unmarshal(m, b)
}
func (m *SavedTensorSliceMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SavedTensorSliceMeta.Marshal(b, m, deterministic)
}
func (m *SavedTensorSliceMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedTensorSliceMeta.Merge(m, src)
}
func (m *SavedTensorSliceMeta) XXX_Size() int {
	return xxx_messageInfo_SavedTensorSliceMeta.Size(m)
}
func (m *SavedTensorSliceMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedTensorSliceMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SavedTensorSliceMeta proto.InternalMessageInfo

func (m *SavedTensorSliceMeta) GetTensor() []*SavedSliceMeta {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SavedTensorSliceMeta) GetVersions() *framework.VersionDef {
	if m != nil {
		return m.Versions
	}
	return nil
}

// Saved tensor slice: it stores the name of the tensors, the slice, and the
// raw data.
type SavedSlice struct {
	// Name of the tensor that this slice belongs to. This must be identical to
	// the name used to encode the key for this record.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Extent of the slice.  Must have one entry for each of the dimension of the
	// tensor that this slice belongs to.
	Slice *framework.TensorSliceProto `protobuf:"bytes,2,opt,name=slice,proto3" json:"slice,omitempty"`
	// The raw data of the slice is stored as a TensorProto. Only raw data are
	// stored (we don't fill in fields such as dtype or tensor_shape).
	Data                 *framework.TensorProto `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SavedSlice) Reset()         { *m = SavedSlice{} }
func (m *SavedSlice) String() string { return proto.CompactTextString(m) }
func (*SavedSlice) ProtoMessage()    {}
func (*SavedSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{2}
}

func (m *SavedSlice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SavedSlice.Unmarshal(m, b)
}
func (m *SavedSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SavedSlice.Marshal(b, m, deterministic)
}
func (m *SavedSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedSlice.Merge(m, src)
}
func (m *SavedSlice) XXX_Size() int {
	return xxx_messageInfo_SavedSlice.Size(m)
}
func (m *SavedSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedSlice.DiscardUnknown(m)
}

var xxx_messageInfo_SavedSlice proto.InternalMessageInfo

func (m *SavedSlice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSlice) GetSlice() *framework.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

func (m *SavedSlice) GetData() *framework.TensorProto {
	if m != nil {
		return m.Data
	}
	return nil
}

// Each record in a v3 checkpoint file is a serialized SavedTensorSlices
// message.
type SavedTensorSlices struct {
	// This is only present at the first item of each checkpoint file and serves
	// as a table of contents, listing all the tensor slices saved in this file.
	Meta *SavedTensorSliceMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// This exists in all but the first item of each checkpoint file.
	Data                 *SavedSlice `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SavedTensorSlices) Reset()         { *m = SavedTensorSlices{} }
func (m *SavedTensorSlices) String() string { return proto.CompactTextString(m) }
func (*SavedTensorSlices) ProtoMessage()    {}
func (*SavedTensorSlices) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8f545ad75d84da2, []int{3}
}

func (m *SavedTensorSlices) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SavedTensorSlices.Unmarshal(m, b)
}
func (m *SavedTensorSlices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SavedTensorSlices.Marshal(b, m, deterministic)
}
func (m *SavedTensorSlices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SavedTensorSlices.Merge(m, src)
}
func (m *SavedTensorSlices) XXX_Size() int {
	return xxx_messageInfo_SavedTensorSlices.Size(m)
}
func (m *SavedTensorSlices) XXX_DiscardUnknown() {
	xxx_messageInfo_SavedTensorSlices.DiscardUnknown(m)
}

var xxx_messageInfo_SavedTensorSlices proto.InternalMessageInfo

func (m *SavedTensorSlices) GetMeta() *SavedTensorSliceMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SavedTensorSlices) GetData() *SavedSlice {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SavedSliceMeta)(nil), "tensorflow.SavedSliceMeta")
	proto.RegisterType((*SavedTensorSliceMeta)(nil), "tensorflow.SavedTensorSliceMeta")
	proto.RegisterType((*SavedSlice)(nil), "tensorflow.SavedSlice")
	proto.RegisterType((*SavedTensorSlices)(nil), "tensorflow.SavedTensorSlices")
}

func init() {
	proto.RegisterFile("tensorflow/core/util/saved_tensor_slice.proto", fileDescriptor_d8f545ad75d84da2)
}

var fileDescriptor_d8f545ad75d84da2 = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6b, 0xf2, 0x40,
	0x10, 0xc6, 0xd9, 0xd7, 0xbc, 0xd2, 0x8e, 0x20, 0x74, 0x2b, 0x36, 0x48, 0x0f, 0x21, 0xd0, 0x12,
	0xfa, 0x27, 0x81, 0xb4, 0xd7, 0x5e, 0xc4, 0x6b, 0x41, 0xa2, 0xf4, 0xd0, 0x8b, 0xac, 0xba, 0x6a,
	0xa8, 0x71, 0xd3, 0x64, 0x55, 0xbc, 0x14, 0xfa, 0xa5, 0xfa, 0xd9, 0x7a, 0x2c, 0x3b, 0x89, 0x26,
	0x8d, 0xa6, 0xed, 0x6d, 0x60, 0x7e, 0xcf, 0x33, 0xf3, 0x0c, 0xbb, 0x70, 0x2b, 0xf9, 0x22, 0x16,
	0xd1, 0x64, 0x2e, 0xd6, 0xce, 0x48, 0x44, 0xdc, 0x59, 0x4a, 0x7f, 0xee, 0xc4, 0x6c, 0xc5, 0xc7,
	0x83, 0xa4, 0x35, 0x88, 0xe7, 0xfe, 0x88, 0xdb, 0x61, 0x24, 0xa4, 0xa0, 0x90, 0xe1, 0xad, 0x9b,
	0xa2, 0x74, 0x12, 0xb1, 0x80, 0xaf, 0x45, 0xf4, 0xe2, 0x6c, 0x95, 0x33, 0x16, 0xa6, 0xca, 0xbf,
	0xd0, 0xd9, 0x9c, 0xd6, 0xe5, 0x6f, 0x74, 0xca, 0x5d, 0xfc, 0xc0, 0x6d, 0x42, 0x1e, 0xa7, 0x98,
	0x55, 0x8e, 0xad, 0x78, 0x14, 0xfb, 0x62, 0x91, 0x92, 0xe6, 0x07, 0x81, 0x7a, 0x4f, 0xa5, 0xef,
	0xa9, 0x6d, 0x1e, 0xb9, 0x64, 0x94, 0x82, 0xb6, 0x60, 0x01, 0xd7, 0x89, 0x41, 0xac, 0x63, 0x0f,
	0x6b, 0xea, 0xc2, 0x7f, 0x0c, 0xa7, 0xff, 0x33, 0x88, 0x55, 0x73, 0xcf, 0xed, 0x6c, 0x80, 0xdd,
	0xc7, 0xb2, 0xa7, 0xda, 0x5d, 0xe5, 0xe9, 0x25, 0x28, 0xb5, 0x40, 0x53, 0x3b, 0xe9, 0x15, 0x83,
	0x58, 0x75, 0xb7, 0x91, 0x97, 0x74, 0x98, 0x64, 0xfd, 0x4d, 0xc8, 0x3d, 0x24, 0xd0, 0x5d, 0x8d,
	0xd7, 0x35, 0xa3, 0x52, 0xe2, 0xae, 0xda, 0x5b, 0x77, 0x55, 0x9b, 0x6f, 0xd0, 0xc0, 0xbd, 0x73,
	0x7d, 0xdc, 0xde, 0x85, 0x6a, 0xa2, 0xd6, 0x09, 0x9a, 0xb5, 0xf2, 0x66, 0xdf, 0x93, 0x7a, 0x29,
	0x49, 0x5d, 0x38, 0xda, 0x9e, 0x25, 0x0d, 0xd8, 0xcc, 0xab, 0x9e, 0x92, 0x5e, 0x87, 0x4f, 0xbc,
	0x1d, 0x67, 0xbe, 0x13, 0x80, 0xcc, 0xae, 0xf4, 0x68, 0x18, 0xab, 0xfc, 0x68, 0xc5, 0x58, 0xf4,
	0x1a, 0xb4, 0x31, 0x93, 0x0c, 0x8f, 0x56, 0x73, 0xcf, 0xf6, 0x25, 0x09, 0x8d, 0x90, 0xb9, 0x84,
	0x93, 0xe2, 0x0d, 0x62, 0x7a, 0x0f, 0x5a, 0xc0, 0x25, 0xc3, 0x4d, 0x6a, 0xae, 0xb1, 0x17, 0xbf,
	0x70, 0x30, 0x0f, 0x69, 0x7a, 0x95, 0xce, 0x3d, 0x10, 0x3f, 0x4b, 0x99, 0x8c, 0x6d, 0xbf, 0xc2,
	0xa9, 0x88, 0xa6, 0x79, 0x44, 0x7d, 0xa2, 0x76, 0xb3, 0x68, 0x8f, 0xab, 0xc6, 0x5d, 0xf2, 0xfc,
	0x30, 0xf5, 0xe5, 0x6c, 0x39, 0xb4, 0x47, 0x22, 0x70, 0x72, 0x2f, 0xf3, 0x70, 0x39, 0x15, 0xc9,
	0x93, 0xdd, 0xfd, 0xce, 0x4f, 0x42, 0x86, 0x55, 0x7c, 0xad, 0x77, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x51, 0xeb, 0xe1, 0x3d, 0xbf, 0x03, 0x00, 0x00,
}
