// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/kernels/boosted_trees/boosted_trees.proto

package kernels

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BucketizedSplit_DefaultDirection int32

const (
	// Left is the default direction.
	BucketizedSplit_DEFAULT_LEFT  BucketizedSplit_DefaultDirection = 0
	BucketizedSplit_DEFAULT_RIGHT BucketizedSplit_DefaultDirection = 1
)

var BucketizedSplit_DefaultDirection_name = map[int32]string{
	0: "DEFAULT_LEFT",
	1: "DEFAULT_RIGHT",
}

var BucketizedSplit_DefaultDirection_value = map[string]int32{
	"DEFAULT_LEFT":  0,
	"DEFAULT_RIGHT": 1,
}

func (x BucketizedSplit_DefaultDirection) String() string {
	return proto.EnumName(BucketizedSplit_DefaultDirection_name, int32(x))
}

func (BucketizedSplit_DefaultDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{5, 0}
}

// Node describes a node in a tree.
type Node struct {
	// Types that are valid to be assigned to Node:
	//	*Node_Leaf
	//	*Node_BucketizedSplit
	//	*Node_CategoricalSplit
	//	*Node_DenseSplit
	Node                 isNode_Node   `protobuf_oneof:"node"`
	Metadata             *NodeMetadata `protobuf:"bytes,777,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{0}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

type isNode_Node interface {
	isNode_Node()
}

type Node_Leaf struct {
	Leaf *Leaf `protobuf:"bytes,1,opt,name=leaf,proto3,oneof"`
}

type Node_BucketizedSplit struct {
	BucketizedSplit *BucketizedSplit `protobuf:"bytes,2,opt,name=bucketized_split,json=bucketizedSplit,proto3,oneof"`
}

type Node_CategoricalSplit struct {
	CategoricalSplit *CategoricalSplit `protobuf:"bytes,3,opt,name=categorical_split,json=categoricalSplit,proto3,oneof"`
}

type Node_DenseSplit struct {
	DenseSplit *DenseSplit `protobuf:"bytes,4,opt,name=dense_split,json=denseSplit,proto3,oneof"`
}

func (*Node_Leaf) isNode_Node() {}

func (*Node_BucketizedSplit) isNode_Node() {}

func (*Node_CategoricalSplit) isNode_Node() {}

func (*Node_DenseSplit) isNode_Node() {}

func (m *Node) GetNode() isNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Node) GetLeaf() *Leaf {
	if x, ok := m.GetNode().(*Node_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (m *Node) GetBucketizedSplit() *BucketizedSplit {
	if x, ok := m.GetNode().(*Node_BucketizedSplit); ok {
		return x.BucketizedSplit
	}
	return nil
}

func (m *Node) GetCategoricalSplit() *CategoricalSplit {
	if x, ok := m.GetNode().(*Node_CategoricalSplit); ok {
		return x.CategoricalSplit
	}
	return nil
}

func (m *Node) GetDenseSplit() *DenseSplit {
	if x, ok := m.GetNode().(*Node_DenseSplit); ok {
		return x.DenseSplit
	}
	return nil
}

func (m *Node) GetMetadata() *NodeMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Node) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Node_Leaf)(nil),
		(*Node_BucketizedSplit)(nil),
		(*Node_CategoricalSplit)(nil),
		(*Node_DenseSplit)(nil),
	}
}

// NodeMetadata encodes metadata associated with each node in a tree.
type NodeMetadata struct {
	// The gain associated with this node.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// The original leaf node before this node was split.
	OriginalLeaf         *Leaf    `protobuf:"bytes,2,opt,name=original_leaf,json=originalLeaf,proto3" json:"original_leaf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeMetadata) Reset()         { *m = NodeMetadata{} }
func (m *NodeMetadata) String() string { return proto.CompactTextString(m) }
func (*NodeMetadata) ProtoMessage()    {}
func (*NodeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{1}
}

func (m *NodeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMetadata.Unmarshal(m, b)
}
func (m *NodeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMetadata.Marshal(b, m, deterministic)
}
func (m *NodeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetadata.Merge(m, src)
}
func (m *NodeMetadata) XXX_Size() int {
	return xxx_messageInfo_NodeMetadata.Size(m)
}
func (m *NodeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetadata proto.InternalMessageInfo

func (m *NodeMetadata) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *NodeMetadata) GetOriginalLeaf() *Leaf {
	if m != nil {
		return m.OriginalLeaf
	}
	return nil
}

// Leaves can either hold dense or sparse information.
type Leaf struct {
	// Types that are valid to be assigned to Leaf:
	//	*Leaf_Vector
	//	*Leaf_SparseVector
	Leaf                 isLeaf_Leaf `protobuf_oneof:"leaf"`
	Scalar               float32     `protobuf:"fixed32,3,opt,name=scalar,proto3" json:"scalar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Leaf) Reset()         { *m = Leaf{} }
func (m *Leaf) String() string { return proto.CompactTextString(m) }
func (*Leaf) ProtoMessage()    {}
func (*Leaf) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{2}
}

func (m *Leaf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Leaf.Unmarshal(m, b)
}
func (m *Leaf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Leaf.Marshal(b, m, deterministic)
}
func (m *Leaf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Leaf.Merge(m, src)
}
func (m *Leaf) XXX_Size() int {
	return xxx_messageInfo_Leaf.Size(m)
}
func (m *Leaf) XXX_DiscardUnknown() {
	xxx_messageInfo_Leaf.DiscardUnknown(m)
}

var xxx_messageInfo_Leaf proto.InternalMessageInfo

type isLeaf_Leaf interface {
	isLeaf_Leaf()
}

type Leaf_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}

type Leaf_SparseVector struct {
	SparseVector *SparseVector `protobuf:"bytes,2,opt,name=sparse_vector,json=sparseVector,proto3,oneof"`
}

func (*Leaf_Vector) isLeaf_Leaf() {}

func (*Leaf_SparseVector) isLeaf_Leaf() {}

func (m *Leaf) GetLeaf() isLeaf_Leaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *Leaf) GetVector() *Vector {
	if x, ok := m.GetLeaf().(*Leaf_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *Leaf) GetSparseVector() *SparseVector {
	if x, ok := m.GetLeaf().(*Leaf_SparseVector); ok {
		return x.SparseVector
	}
	return nil
}

func (m *Leaf) GetScalar() float32 {
	if m != nil {
		return m.Scalar
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Leaf) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Leaf_Vector)(nil),
		(*Leaf_SparseVector)(nil),
	}
}

type Vector struct {
	Value                []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{3}
}

func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type SparseVector struct {
	Index                []int32   `protobuf:"varint,1,rep,packed,name=index,proto3" json:"index,omitempty"`
	Value                []float32 `protobuf:"fixed32,2,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SparseVector) Reset()         { *m = SparseVector{} }
func (m *SparseVector) String() string { return proto.CompactTextString(m) }
func (*SparseVector) ProtoMessage()    {}
func (*SparseVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{4}
}

func (m *SparseVector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparseVector.Unmarshal(m, b)
}
func (m *SparseVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparseVector.Marshal(b, m, deterministic)
}
func (m *SparseVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparseVector.Merge(m, src)
}
func (m *SparseVector) XXX_Size() int {
	return xxx_messageInfo_SparseVector.Size(m)
}
func (m *SparseVector) XXX_DiscardUnknown() {
	xxx_messageInfo_SparseVector.DiscardUnknown(m)
}

var xxx_messageInfo_SparseVector proto.InternalMessageInfo

func (m *SparseVector) GetIndex() []int32 {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *SparseVector) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type BucketizedSplit struct {
	// Float feature column and split threshold describing
	// the rule feature <= threshold.
	FeatureId int32 `protobuf:"varint,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Threshold int32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// If feature column is multivalent, this holds the index of the dimension
	// for the split. Defaults to 0.
	DimensionId int32 `protobuf:"varint,5,opt,name=dimension_id,json=dimensionId,proto3" json:"dimension_id,omitempty"`
	// default direction for missing values.
	DefaultDirection BucketizedSplit_DefaultDirection `protobuf:"varint,6,opt,name=default_direction,json=defaultDirection,proto3,enum=tensorflow.boosted_trees.BucketizedSplit_DefaultDirection" json:"default_direction,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId               int32    `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId              int32    `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BucketizedSplit) Reset()         { *m = BucketizedSplit{} }
func (m *BucketizedSplit) String() string { return proto.CompactTextString(m) }
func (*BucketizedSplit) ProtoMessage()    {}
func (*BucketizedSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{5}
}

func (m *BucketizedSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BucketizedSplit.Unmarshal(m, b)
}
func (m *BucketizedSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BucketizedSplit.Marshal(b, m, deterministic)
}
func (m *BucketizedSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BucketizedSplit.Merge(m, src)
}
func (m *BucketizedSplit) XXX_Size() int {
	return xxx_messageInfo_BucketizedSplit.Size(m)
}
func (m *BucketizedSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_BucketizedSplit.DiscardUnknown(m)
}

var xxx_messageInfo_BucketizedSplit proto.InternalMessageInfo

func (m *BucketizedSplit) GetFeatureId() int32 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *BucketizedSplit) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *BucketizedSplit) GetDimensionId() int32 {
	if m != nil {
		return m.DimensionId
	}
	return 0
}

func (m *BucketizedSplit) GetDefaultDirection() BucketizedSplit_DefaultDirection {
	if m != nil {
		return m.DefaultDirection
	}
	return BucketizedSplit_DEFAULT_LEFT
}

func (m *BucketizedSplit) GetLeftId() int32 {
	if m != nil {
		return m.LeftId
	}
	return 0
}

func (m *BucketizedSplit) GetRightId() int32 {
	if m != nil {
		return m.RightId
	}
	return 0
}

type CategoricalSplit struct {
	// Categorical feature column and split describing the rule feature value ==
	// value.
	FeatureId int32 `protobuf:"varint,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Value     int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId               int32    `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId              int32    `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CategoricalSplit) Reset()         { *m = CategoricalSplit{} }
func (m *CategoricalSplit) String() string { return proto.CompactTextString(m) }
func (*CategoricalSplit) ProtoMessage()    {}
func (*CategoricalSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{6}
}

func (m *CategoricalSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CategoricalSplit.Unmarshal(m, b)
}
func (m *CategoricalSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CategoricalSplit.Marshal(b, m, deterministic)
}
func (m *CategoricalSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoricalSplit.Merge(m, src)
}
func (m *CategoricalSplit) XXX_Size() int {
	return xxx_messageInfo_CategoricalSplit.Size(m)
}
func (m *CategoricalSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoricalSplit.DiscardUnknown(m)
}

var xxx_messageInfo_CategoricalSplit proto.InternalMessageInfo

func (m *CategoricalSplit) GetFeatureId() int32 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *CategoricalSplit) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CategoricalSplit) GetLeftId() int32 {
	if m != nil {
		return m.LeftId
	}
	return 0
}

func (m *CategoricalSplit) GetRightId() int32 {
	if m != nil {
		return m.RightId
	}
	return 0
}

// TODO(nponomareva): move out of boosted_trees and rename to trees.proto
type DenseSplit struct {
	// Float feature column and split threshold describing
	// the rule feature <= threshold.
	FeatureId int32   `protobuf:"varint,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Threshold float32 `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId               int32    `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId              int32    `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DenseSplit) Reset()         { *m = DenseSplit{} }
func (m *DenseSplit) String() string { return proto.CompactTextString(m) }
func (*DenseSplit) ProtoMessage()    {}
func (*DenseSplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{7}
}

func (m *DenseSplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DenseSplit.Unmarshal(m, b)
}
func (m *DenseSplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DenseSplit.Marshal(b, m, deterministic)
}
func (m *DenseSplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenseSplit.Merge(m, src)
}
func (m *DenseSplit) XXX_Size() int {
	return xxx_messageInfo_DenseSplit.Size(m)
}
func (m *DenseSplit) XXX_DiscardUnknown() {
	xxx_messageInfo_DenseSplit.DiscardUnknown(m)
}

var xxx_messageInfo_DenseSplit proto.InternalMessageInfo

func (m *DenseSplit) GetFeatureId() int32 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *DenseSplit) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DenseSplit) GetLeftId() int32 {
	if m != nil {
		return m.LeftId
	}
	return 0
}

func (m *DenseSplit) GetRightId() int32 {
	if m != nil {
		return m.RightId
	}
	return 0
}

// Tree describes a list of connected nodes.
// Node 0 must be the root and can carry any payload including a leaf
// in the case of representing the bias.
// Note that each node id is implicitly its index in the list of nodes.
type Tree struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}
func (*Tree) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{8}
}

func (m *Tree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tree.Unmarshal(m, b)
}
func (m *Tree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tree.Marshal(b, m, deterministic)
}
func (m *Tree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tree.Merge(m, src)
}
func (m *Tree) XXX_Size() int {
	return xxx_messageInfo_Tree.Size(m)
}
func (m *Tree) XXX_DiscardUnknown() {
	xxx_messageInfo_Tree.DiscardUnknown(m)
}

var xxx_messageInfo_Tree proto.InternalMessageInfo

func (m *Tree) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type TreeMetadata struct {
	// Number of layers grown for this tree.
	NumLayersGrown int32 `protobuf:"varint,2,opt,name=num_layers_grown,json=numLayersGrown,proto3" json:"num_layers_grown,omitempty"`
	// Whether the tree is finalized in that no more layers can be grown.
	IsFinalized bool `protobuf:"varint,3,opt,name=is_finalized,json=isFinalized,proto3" json:"is_finalized,omitempty"`
	// If tree was finalized and post pruning happened, it is possible that cache
	// still refers to some nodes that were deleted or that the node ids changed
	// (e.g. node id 5 became node id 2 due to pruning of the other branch).
	// The mapping below allows us to understand where the old ids now map to and
	// how the values should be adjusted due to post-pruning.
	// The size of the list should be equal to the number of nodes in the tree
	// before post-pruning happened.
	// If the node was pruned, it will have new_node_id equal to the id of a node
	// that this node was collapsed into. For a node that didn't get pruned, it is
	// possible that its id still changed, so new_node_id will have the
	// corresponding id in the pruned tree.
	// If post-pruning didn't happen, or it did and it had no effect (e.g. no
	// nodes got pruned), this list will be empty.
	PostPrunedNodesMeta  []*TreeMetadata_PostPruneNodeUpdate `protobuf:"bytes,4,rep,name=post_pruned_nodes_meta,json=postPrunedNodesMeta,proto3" json:"post_pruned_nodes_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *TreeMetadata) Reset()         { *m = TreeMetadata{} }
func (m *TreeMetadata) String() string { return proto.CompactTextString(m) }
func (*TreeMetadata) ProtoMessage()    {}
func (*TreeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{9}
}

func (m *TreeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeMetadata.Unmarshal(m, b)
}
func (m *TreeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeMetadata.Marshal(b, m, deterministic)
}
func (m *TreeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMetadata.Merge(m, src)
}
func (m *TreeMetadata) XXX_Size() int {
	return xxx_messageInfo_TreeMetadata.Size(m)
}
func (m *TreeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMetadata proto.InternalMessageInfo

func (m *TreeMetadata) GetNumLayersGrown() int32 {
	if m != nil {
		return m.NumLayersGrown
	}
	return 0
}

func (m *TreeMetadata) GetIsFinalized() bool {
	if m != nil {
		return m.IsFinalized
	}
	return false
}

func (m *TreeMetadata) GetPostPrunedNodesMeta() []*TreeMetadata_PostPruneNodeUpdate {
	if m != nil {
		return m.PostPrunedNodesMeta
	}
	return nil
}

type TreeMetadata_PostPruneNodeUpdate struct {
	NewNodeId            int32     `protobuf:"varint,1,opt,name=new_node_id,json=newNodeId,proto3" json:"new_node_id,omitempty"`
	LogitChange          []float32 `protobuf:"fixed32,2,rep,packed,name=logit_change,json=logitChange,proto3" json:"logit_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TreeMetadata_PostPruneNodeUpdate) Reset()         { *m = TreeMetadata_PostPruneNodeUpdate{} }
func (m *TreeMetadata_PostPruneNodeUpdate) String() string { return proto.CompactTextString(m) }
func (*TreeMetadata_PostPruneNodeUpdate) ProtoMessage()    {}
func (*TreeMetadata_PostPruneNodeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{9, 0}
}

func (m *TreeMetadata_PostPruneNodeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeMetadata_PostPruneNodeUpdate.Unmarshal(m, b)
}
func (m *TreeMetadata_PostPruneNodeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeMetadata_PostPruneNodeUpdate.Marshal(b, m, deterministic)
}
func (m *TreeMetadata_PostPruneNodeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeMetadata_PostPruneNodeUpdate.Merge(m, src)
}
func (m *TreeMetadata_PostPruneNodeUpdate) XXX_Size() int {
	return xxx_messageInfo_TreeMetadata_PostPruneNodeUpdate.Size(m)
}
func (m *TreeMetadata_PostPruneNodeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeMetadata_PostPruneNodeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TreeMetadata_PostPruneNodeUpdate proto.InternalMessageInfo

func (m *TreeMetadata_PostPruneNodeUpdate) GetNewNodeId() int32 {
	if m != nil {
		return m.NewNodeId
	}
	return 0
}

func (m *TreeMetadata_PostPruneNodeUpdate) GetLogitChange() []float32 {
	if m != nil {
		return m.LogitChange
	}
	return nil
}

type GrowingMetadata struct {
	// Number of trees that we have attempted to build. After pruning, these
	// trees might have been removed.
	NumTreesAttempted int64 `protobuf:"varint,1,opt,name=num_trees_attempted,json=numTreesAttempted,proto3" json:"num_trees_attempted,omitempty"`
	// Number of layers that we have attempted to build. After pruning, these
	// layers might have been removed.
	NumLayersAttempted int64 `protobuf:"varint,2,opt,name=num_layers_attempted,json=numLayersAttempted,proto3" json:"num_layers_attempted,omitempty"`
	// The start (inclusive) and end (exclusive) ids of the nodes in the latest
	// layer of the latest tree.
	LastLayerNodeStart   int32    `protobuf:"varint,3,opt,name=last_layer_node_start,json=lastLayerNodeStart,proto3" json:"last_layer_node_start,omitempty"`
	LastLayerNodeEnd     int32    `protobuf:"varint,4,opt,name=last_layer_node_end,json=lastLayerNodeEnd,proto3" json:"last_layer_node_end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrowingMetadata) Reset()         { *m = GrowingMetadata{} }
func (m *GrowingMetadata) String() string { return proto.CompactTextString(m) }
func (*GrowingMetadata) ProtoMessage()    {}
func (*GrowingMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{10}
}

func (m *GrowingMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrowingMetadata.Unmarshal(m, b)
}
func (m *GrowingMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrowingMetadata.Marshal(b, m, deterministic)
}
func (m *GrowingMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrowingMetadata.Merge(m, src)
}
func (m *GrowingMetadata) XXX_Size() int {
	return xxx_messageInfo_GrowingMetadata.Size(m)
}
func (m *GrowingMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_GrowingMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_GrowingMetadata proto.InternalMessageInfo

func (m *GrowingMetadata) GetNumTreesAttempted() int64 {
	if m != nil {
		return m.NumTreesAttempted
	}
	return 0
}

func (m *GrowingMetadata) GetNumLayersAttempted() int64 {
	if m != nil {
		return m.NumLayersAttempted
	}
	return 0
}

func (m *GrowingMetadata) GetLastLayerNodeStart() int32 {
	if m != nil {
		return m.LastLayerNodeStart
	}
	return 0
}

func (m *GrowingMetadata) GetLastLayerNodeEnd() int32 {
	if m != nil {
		return m.LastLayerNodeEnd
	}
	return 0
}

// TreeEnsemble describes an ensemble of decision trees.
type TreeEnsemble struct {
	Trees        []*Tree         `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
	TreeWeights  []float32       `protobuf:"fixed32,2,rep,packed,name=tree_weights,json=treeWeights,proto3" json:"tree_weights,omitempty"`
	TreeMetadata []*TreeMetadata `protobuf:"bytes,3,rep,name=tree_metadata,json=treeMetadata,proto3" json:"tree_metadata,omitempty"`
	// Metadata that is used during the training.
	GrowingMetadata      *GrowingMetadata `protobuf:"bytes,4,opt,name=growing_metadata,json=growingMetadata,proto3" json:"growing_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TreeEnsemble) Reset()         { *m = TreeEnsemble{} }
func (m *TreeEnsemble) String() string { return proto.CompactTextString(m) }
func (*TreeEnsemble) ProtoMessage()    {}
func (*TreeEnsemble) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{11}
}

func (m *TreeEnsemble) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeEnsemble.Unmarshal(m, b)
}
func (m *TreeEnsemble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeEnsemble.Marshal(b, m, deterministic)
}
func (m *TreeEnsemble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeEnsemble.Merge(m, src)
}
func (m *TreeEnsemble) XXX_Size() int {
	return xxx_messageInfo_TreeEnsemble.Size(m)
}
func (m *TreeEnsemble) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeEnsemble.DiscardUnknown(m)
}

var xxx_messageInfo_TreeEnsemble proto.InternalMessageInfo

func (m *TreeEnsemble) GetTrees() []*Tree {
	if m != nil {
		return m.Trees
	}
	return nil
}

func (m *TreeEnsemble) GetTreeWeights() []float32 {
	if m != nil {
		return m.TreeWeights
	}
	return nil
}

func (m *TreeEnsemble) GetTreeMetadata() []*TreeMetadata {
	if m != nil {
		return m.TreeMetadata
	}
	return nil
}

func (m *TreeEnsemble) GetGrowingMetadata() *GrowingMetadata {
	if m != nil {
		return m.GrowingMetadata
	}
	return nil
}

// DebugOutput contains outputs useful for debugging/model interpretation, at
// the individual example-level. Debug outputs that are available to the user
// are: 1) Directional feature contributions (DFCs) 2) Node IDs for ensemble
// prediction path 3) Leaf node IDs.
type DebugOutput struct {
	// Return the logits and associated feature splits across prediction paths for
	// each tree, for every example, at predict time. We will use these values to
	// compute DFCs in Python, by subtracting each child prediction from its
	// parent prediction and associating this change with its respective feature
	// id.
	FeatureIds           []int32   `protobuf:"varint,1,rep,packed,name=feature_ids,json=featureIds,proto3" json:"feature_ids,omitempty"`
	LogitsPath           []float32 `protobuf:"fixed32,2,rep,packed,name=logits_path,json=logitsPath,proto3" json:"logits_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DebugOutput) Reset()         { *m = DebugOutput{} }
func (m *DebugOutput) String() string { return proto.CompactTextString(m) }
func (*DebugOutput) ProtoMessage()    {}
func (*DebugOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dc2fb218740a32a, []int{12}
}

func (m *DebugOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugOutput.Unmarshal(m, b)
}
func (m *DebugOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugOutput.Marshal(b, m, deterministic)
}
func (m *DebugOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugOutput.Merge(m, src)
}
func (m *DebugOutput) XXX_Size() int {
	return xxx_messageInfo_DebugOutput.Size(m)
}
func (m *DebugOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugOutput.DiscardUnknown(m)
}

var xxx_messageInfo_DebugOutput proto.InternalMessageInfo

func (m *DebugOutput) GetFeatureIds() []int32 {
	if m != nil {
		return m.FeatureIds
	}
	return nil
}

func (m *DebugOutput) GetLogitsPath() []float32 {
	if m != nil {
		return m.LogitsPath
	}
	return nil
}

func init() {
	proto.RegisterEnum("tensorflow.boosted_trees.BucketizedSplit_DefaultDirection", BucketizedSplit_DefaultDirection_name, BucketizedSplit_DefaultDirection_value)
	proto.RegisterType((*Node)(nil), "tensorflow.boosted_trees.Node")
	proto.RegisterType((*NodeMetadata)(nil), "tensorflow.boosted_trees.NodeMetadata")
	proto.RegisterType((*Leaf)(nil), "tensorflow.boosted_trees.Leaf")
	proto.RegisterType((*Vector)(nil), "tensorflow.boosted_trees.Vector")
	proto.RegisterType((*SparseVector)(nil), "tensorflow.boosted_trees.SparseVector")
	proto.RegisterType((*BucketizedSplit)(nil), "tensorflow.boosted_trees.BucketizedSplit")
	proto.RegisterType((*CategoricalSplit)(nil), "tensorflow.boosted_trees.CategoricalSplit")
	proto.RegisterType((*DenseSplit)(nil), "tensorflow.boosted_trees.DenseSplit")
	proto.RegisterType((*Tree)(nil), "tensorflow.boosted_trees.Tree")
	proto.RegisterType((*TreeMetadata)(nil), "tensorflow.boosted_trees.TreeMetadata")
	proto.RegisterType((*TreeMetadata_PostPruneNodeUpdate)(nil), "tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate")
	proto.RegisterType((*GrowingMetadata)(nil), "tensorflow.boosted_trees.GrowingMetadata")
	proto.RegisterType((*TreeEnsemble)(nil), "tensorflow.boosted_trees.TreeEnsemble")
	proto.RegisterType((*DebugOutput)(nil), "tensorflow.boosted_trees.DebugOutput")
}

func init() {
	proto.RegisterFile("tensorflow/core/kernels/boosted_trees/boosted_trees.proto", fileDescriptor_0dc2fb218740a32a)
}

var fileDescriptor_0dc2fb218740a32a = []byte{
	// 1008 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5b, 0x6f, 0x1b, 0xc5,
	0x17, 0x8f, 0xd7, 0x97, 0xa6, 0xc7, 0x4e, 0xb3, 0x99, 0xf4, 0xdf, 0xbf, 0x41, 0x10, 0xc2, 0x0a,
	0x55, 0x01, 0x09, 0x07, 0x0a, 0x12, 0x22, 0xe2, 0x81, 0xe6, 0x6e, 0x91, 0xd2, 0x68, 0x92, 0x96,
	0xcb, 0xcb, 0x6a, 0xec, 0x39, 0x5e, 0xaf, 0xb2, 0x9e, 0xb1, 0x66, 0x66, 0x6b, 0x2e, 0xe2, 0x91,
	0x07, 0xf8, 0x20, 0xbc, 0xf3, 0x29, 0xf8, 0x04, 0x7c, 0x17, 0x1e, 0xd1, 0xcc, 0x5e, 0xbc, 0xb1,
	0xea, 0x26, 0xf4, 0x6d, 0xcf, 0x6f, 0xce, 0xef, 0xb7, 0xe7, 0xba, 0x3b, 0xf0, 0xb9, 0x41, 0xa1,
	0xa5, 0x1a, 0x25, 0x72, 0xb6, 0x3b, 0x94, 0x0a, 0x77, 0xaf, 0x50, 0x09, 0x4c, 0xf4, 0xee, 0x40,
	0x4a, 0x6d, 0x90, 0x87, 0x46, 0x21, 0x2e, 0x58, 0xbd, 0xa9, 0x92, 0x46, 0x92, 0xee, 0x9c, 0xda,
	0xbb, 0x76, 0x1e, 0xfc, 0x5a, 0x87, 0xc6, 0xd7, 0x92, 0x23, 0xf9, 0x14, 0x1a, 0x09, 0xb2, 0x51,
	0xb7, 0xb6, 0x5d, 0xdb, 0x69, 0x3f, 0xda, 0xea, 0x2d, 0x63, 0xf4, 0xce, 0x90, 0x8d, 0x4e, 0x57,
	0xa8, 0xf3, 0x26, 0xcf, 0xc1, 0x1f, 0xa4, 0xc3, 0x2b, 0x34, 0xf1, 0x4f, 0xc8, 0x43, 0x3d, 0x4d,
	0x62, 0xd3, 0xf5, 0x9c, 0xc2, 0xfb, 0xcb, 0x15, 0xf6, 0x4b, 0xc6, 0x85, 0x25, 0x9c, 0xae, 0xd0,
	0xf5, 0xc1, 0x75, 0x88, 0x7c, 0x07, 0x1b, 0x43, 0x66, 0x30, 0x92, 0x2a, 0x1e, 0xb2, 0x24, 0x17,
	0xae, 0x3b, 0xe1, 0x0f, 0x96, 0x0b, 0x1f, 0xcc, 0x29, 0x85, 0xb2, 0x3f, 0x5c, 0xc0, 0xc8, 0x09,
	0xb4, 0x39, 0x0a, 0x8d, 0xb9, 0x68, 0xc3, 0x89, 0xbe, 0xb7, 0x5c, 0xf4, 0xd0, 0x3a, 0x17, 0x72,
	0xc0, 0x4b, 0x8b, 0x1c, 0xc0, 0xea, 0x04, 0x0d, 0xe3, 0xcc, 0xb0, 0xee, 0x6f, 0x2d, 0x27, 0xf3,
	0x70, 0xb9, 0x8c, 0x2d, 0xf2, 0x93, 0xdc, 0x9d, 0x96, 0xc4, 0xfd, 0x16, 0x34, 0x84, 0xe4, 0x18,
	0x44, 0xd0, 0xa9, 0x7a, 0x10, 0x02, 0x8d, 0x88, 0xc5, 0xc2, 0xb5, 0xc3, 0xa3, 0xee, 0x99, 0x1c,
	0xc0, 0x9a, 0x54, 0x71, 0x14, 0x0b, 0x96, 0x84, 0xae, 0x57, 0xde, 0x6d, 0x7a, 0x45, 0x3b, 0x05,
	0xc9, 0x5a, 0xc1, 0x9f, 0x35, 0x68, 0xd8, 0x07, 0xb2, 0x07, 0xad, 0x17, 0x38, 0x34, 0x52, 0xe5,
	0x2d, 0xdf, 0x5e, 0x2e, 0xf3, 0xdc, 0xf9, 0x9d, 0xae, 0xd0, 0x9c, 0x41, 0x9e, 0xc0, 0x9a, 0x9e,
	0x32, 0xa5, 0x31, 0xcc, 0x25, 0xbc, 0x9b, 0xd2, 0xbf, 0x70, 0xee, 0xa5, 0x50, 0x47, 0x57, 0x6c,
	0xf2, 0x00, 0x5a, 0x7a, 0xc8, 0x12, 0xa6, 0x5c, 0x8b, 0x3d, 0x9a, 0x5b, 0xb6, 0x38, 0x36, 0xcf,
	0x60, 0x0b, 0x5a, 0xb9, 0xe7, 0x7d, 0x68, 0xbe, 0x60, 0x49, 0x8a, 0xdd, 0xda, 0x76, 0x7d, 0xc7,
	0xa3, 0x99, 0x11, 0xec, 0x41, 0xa7, 0xaa, 0x6f, 0xbd, 0x62, 0xc1, 0xf1, 0x07, 0xe7, 0xd5, 0xa4,
	0x99, 0x31, 0xe7, 0x7a, 0x55, 0xee, 0x5f, 0x1e, 0xac, 0x2f, 0x0c, 0x24, 0x79, 0x1b, 0x60, 0x84,
	0xcc, 0xa4, 0x0a, 0xc3, 0x98, 0xbb, 0xf2, 0x34, 0xe9, 0xdd, 0x1c, 0xe9, 0x73, 0xf2, 0x16, 0xdc,
	0x35, 0x63, 0x85, 0x7a, 0x2c, 0x13, 0xee, 0x32, 0x6f, 0xd2, 0x39, 0x40, 0xde, 0x85, 0x0e, 0x8f,
	0x27, 0x28, 0x74, 0x2c, 0x85, 0xa5, 0x37, 0x9d, 0x43, 0xbb, 0xc4, 0xfa, 0x9c, 0x44, 0xb0, 0xc1,
	0x71, 0xc4, 0xd2, 0xc4, 0x84, 0x3c, 0x56, 0x38, 0x34, 0xb1, 0x14, 0x5d, 0x3b, 0x41, 0xf7, 0x1e,
	0xed, 0xdd, 0x7a, 0x6d, 0x7a, 0x87, 0x99, 0xc4, 0x61, 0xa1, 0x40, 0x7d, 0xbe, 0x80, 0x90, 0xff,
	0xc3, 0x9d, 0x04, 0x47, 0xc6, 0x86, 0x51, 0x77, 0x61, 0xb4, 0xac, 0xd9, 0xe7, 0xe4, 0x0d, 0x58,
	0x55, 0x71, 0x34, 0x76, 0x27, 0x0d, 0x77, 0x72, 0xc7, 0xd9, 0x7d, 0x1e, 0x7c, 0x06, 0xfe, 0xa2,
	0x32, 0xf1, 0xa1, 0x73, 0x78, 0x74, 0xfc, 0xf8, 0xd9, 0xd9, 0x65, 0x78, 0x76, 0x74, 0x7c, 0xe9,
	0xaf, 0x90, 0x0d, 0x58, 0x2b, 0x10, 0xda, 0x3f, 0x39, 0xbd, 0xf4, 0x6b, 0xc1, 0xcf, 0xe0, 0x2f,
	0x2e, 0xe0, 0x4d, 0x95, 0xac, 0xb4, 0xc4, 0x9e, 0x64, 0xc6, 0x6b, 0x45, 0xfd, 0x0b, 0xc0, 0x7c,
	0x51, 0xff, 0x73, 0x03, 0xbd, 0x6a, 0x03, 0x5f, 0xe7, 0xf5, 0x5f, 0x40, 0xe3, 0x52, 0xa1, 0xfd,
	0x8a, 0x36, 0xed, 0x3a, 0x6b, 0x37, 0x79, 0xaf, 0x5c, 0x4d, 0xbb, 0xed, 0x34, 0x73, 0x0e, 0xfe,
	0xf0, 0xa0, 0x63, 0xe9, 0xe5, 0xf6, 0xef, 0x80, 0x2f, 0xd2, 0x49, 0x98, 0xb0, 0x1f, 0x51, 0xe9,
	0x30, 0x52, 0x72, 0x26, 0xf2, 0x12, 0xdd, 0x13, 0xe9, 0xe4, 0xcc, 0xc1, 0x27, 0x16, 0xb5, 0xd3,
	0x16, 0xeb, 0x70, 0x64, 0xd7, 0xdb, 0x4e, 0x86, 0x8b, 0x78, 0x95, 0xb6, 0x63, 0x7d, 0x5c, 0x40,
	0x44, 0xc2, 0x83, 0xa9, 0xd4, 0x26, 0x9c, 0xaa, 0x54, 0x20, 0x0f, 0xdd, 0x2b, 0x43, 0xfb, 0x01,
	0xea, 0x36, 0x5c, 0x90, 0xaf, 0x18, 0xb9, 0x6a, 0x50, 0xbd, 0x73, 0xa9, 0xcd, 0xb9, 0xd5, 0xb0,
	0xa1, 0x3f, 0x9b, 0x72, 0x66, 0x90, 0x6e, 0x4e, 0x0b, 0x90, 0x5b, 0x54, 0x5b, 0xe7, 0x37, 0xbf,
	0x85, 0xcd, 0x97, 0xf8, 0x92, 0x2d, 0x68, 0x0b, 0x9c, 0xb9, 0xf7, 0x57, 0xba, 0x22, 0x70, 0x66,
	0x7d, 0xfa, 0x6e, 0x71, 0x12, 0x19, 0xc5, 0x26, 0x1c, 0x8e, 0x99, 0x88, 0x8a, 0x35, 0x6d, 0x3b,
	0xec, 0xc0, 0x41, 0xc1, 0xdf, 0x35, 0x58, 0xb7, 0x79, 0xc7, 0x22, 0x2a, 0x6b, 0xd5, 0x83, 0x4d,
	0x5b, 0x2b, 0x17, 0x70, 0xc8, 0x8c, 0xc1, 0xc9, 0xd4, 0x60, 0x26, 0x5f, 0xa7, 0x1b, 0x22, 0x9d,
	0xd8, 0x24, 0xf4, 0xe3, 0xe2, 0x80, 0x7c, 0x04, 0xf7, 0x2b, 0xb5, 0x9d, 0x13, 0x3c, 0x47, 0x20,
	0x65, 0x7d, 0xe7, 0x8c, 0x8f, 0xe1, 0x7f, 0x09, 0xd3, 0x26, 0xa3, 0x64, 0xf1, 0x6b, 0xc3, 0x94,
	0xc9, 0xc7, 0x83, 0xd8, 0x43, 0xc7, 0xb1, 0x89, 0x5c, 0xd8, 0x13, 0xf2, 0x21, 0x6c, 0x2e, 0x52,
	0x50, 0x14, 0x53, 0xe3, 0x5f, 0x23, 0x1c, 0x09, 0x1e, 0xfc, 0x9e, 0x0f, 0xc0, 0x91, 0xd0, 0x38,
	0x19, 0x24, 0x6e, 0x8e, 0x5c, 0x42, 0x37, 0xcf, 0x91, 0xa5, 0xd1, 0xcc, 0xd9, 0x56, 0xd0, 0x3e,
	0x84, 0x33, 0xb4, 0x63, 0xa9, 0x8b, 0x0a, 0x5a, 0xec, 0x9b, 0x0c, 0x22, 0x5f, 0xc1, 0x9a, 0x73,
	0x29, 0xff, 0x5c, 0x75, 0xf7, 0x82, 0x87, 0xb7, 0x9b, 0x01, 0xea, 0xf4, 0xcb, 0xd2, 0x5f, 0x82,
	0x1f, 0x65, 0xdd, 0x98, 0xeb, 0x35, 0x6e, 0xfa, 0xfb, 0x2f, 0xf4, 0x8f, 0xae, 0x47, 0xd7, 0x81,
	0xe0, 0x29, 0xb4, 0x0f, 0x71, 0x90, 0x46, 0x4f, 0x53, 0x33, 0x4d, 0x0d, 0x79, 0x07, 0xda, 0xf3,
	0x5d, 0xd6, 0xf9, 0x27, 0x1d, 0xca, 0x65, 0xd6, 0xd6, 0xc1, 0xcd, 0x88, 0x0e, 0xa7, 0xcc, 0x8c,
	0xf3, 0xa4, 0x21, 0x83, 0xce, 0x99, 0x19, 0xef, 0xa7, 0xd0, 0x95, 0x2a, 0xaa, 0x46, 0x34, 0x52,
	0x6c, 0x82, 0x33, 0xa9, 0xae, 0xf6, 0xc9, 0x7e, 0x16, 0x9c, 0x1b, 0x92, 0x73, 0x7b, 0x59, 0xd2,
	0xe7, 0xb5, 0xef, 0xbf, 0x8c, 0x62, 0x33, 0x4e, 0x07, 0xbd, 0xa1, 0x9c, 0xec, 0x56, 0x6e, 0x5d,
	0x2f, 0x7f, 0x8c, 0x64, 0x76, 0x1d, 0xab, 0xde, 0xc9, 0xfe, 0xa9, 0xd5, 0x06, 0x2d, 0x77, 0xf7,
	0xfa, 0xe4, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x5a, 0x47, 0x21, 0xb8, 0x09, 0x00, 0x00,
}
