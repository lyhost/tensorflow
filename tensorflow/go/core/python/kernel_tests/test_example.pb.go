// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/python/kernel_tests/proto/test_example.proto

package kernel_tests

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	framework "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnumValue_Color int32

const (
	EnumValue_RED    EnumValue_Color = 0
	EnumValue_ORANGE EnumValue_Color = 1
	EnumValue_YELLOW EnumValue_Color = 2
	EnumValue_GREEN  EnumValue_Color = 3
	EnumValue_BLUE   EnumValue_Color = 4
	EnumValue_INDIGO EnumValue_Color = 5
	EnumValue_VIOLET EnumValue_Color = 6
)

var EnumValue_Color_name = map[int32]string{
	0: "RED",
	1: "ORANGE",
	2: "YELLOW",
	3: "GREEN",
	4: "BLUE",
	5: "INDIGO",
	6: "VIOLET",
}

var EnumValue_Color_value = map[string]int32{
	"RED":    0,
	"ORANGE": 1,
	"YELLOW": 2,
	"GREEN":  3,
	"BLUE":   4,
	"INDIGO": 5,
	"VIOLET": 6,
}

func (x EnumValue_Color) Enum() *EnumValue_Color {
	p := new(EnumValue_Color)
	*p = x
	return p
}

func (x EnumValue_Color) String() string {
	return proto.EnumName(EnumValue_Color_name, int32(x))
}

func (x *EnumValue_Color) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EnumValue_Color_value, data, "EnumValue_Color")
	if err != nil {
		return err
	}
	*x = EnumValue_Color(value)
	return nil
}

func (EnumValue_Color) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{6, 0}
}

// A TestCase holds a proto and assertions about how it should decode.
type TestCase struct {
	// Batches of primitive values.
	Values []*TestValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	// The batch shapes.
	Shapes []int32 `protobuf:"varint,2,rep,name=shapes" json:"shapes,omitempty"`
	// Expected sizes for each field.
	Sizes []int32 `protobuf:"varint,3,rep,name=sizes" json:"sizes,omitempty"`
	// Expected values for each field.
	Fields               []*FieldSpec `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TestCase) Reset()         { *m = TestCase{} }
func (m *TestCase) String() string { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()    {}
func (*TestCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{0}
}

func (m *TestCase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestCase.Unmarshal(m, b)
}
func (m *TestCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestCase.Marshal(b, m, deterministic)
}
func (m *TestCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCase.Merge(m, src)
}
func (m *TestCase) XXX_Size() int {
	return xxx_messageInfo_TestCase.Size(m)
}
func (m *TestCase) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCase.DiscardUnknown(m)
}

var xxx_messageInfo_TestCase proto.InternalMessageInfo

func (m *TestCase) GetValues() []*TestValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *TestCase) GetShapes() []int32 {
	if m != nil {
		return m.Shapes
	}
	return nil
}

func (m *TestCase) GetSizes() []int32 {
	if m != nil {
		return m.Sizes
	}
	return nil
}

func (m *TestCase) GetFields() []*FieldSpec {
	if m != nil {
		return m.Fields
	}
	return nil
}

// FieldSpec describes the expected output for a single field.
type FieldSpec struct {
	Name                 *string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Dtype                *framework.DataType `protobuf:"varint,2,opt,name=dtype,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Value                *TestValue          `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FieldSpec) Reset()         { *m = FieldSpec{} }
func (m *FieldSpec) String() string { return proto.CompactTextString(m) }
func (*FieldSpec) ProtoMessage()    {}
func (*FieldSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{1}
}

func (m *FieldSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldSpec.Unmarshal(m, b)
}
func (m *FieldSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldSpec.Marshal(b, m, deterministic)
}
func (m *FieldSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldSpec.Merge(m, src)
}
func (m *FieldSpec) XXX_Size() int {
	return xxx_messageInfo_FieldSpec.Size(m)
}
func (m *FieldSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FieldSpec proto.InternalMessageInfo

func (m *FieldSpec) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FieldSpec) GetDtype() framework.DataType {
	if m != nil && m.Dtype != nil {
		return *m.Dtype
	}
	return framework.DataType_DT_INVALID
}

func (m *FieldSpec) GetValue() *TestValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// NOTE: This definition must be kept in sync with PackedTestValue.
type TestValue struct {
	DoubleValue   []float64         `protobuf:"fixed64,1,rep,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue    []float32         `protobuf:"fixed32,2,rep,name=float_value,json=floatValue" json:"float_value,omitempty"`
	Int64Value    []int64           `protobuf:"varint,3,rep,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value   []uint64          `protobuf:"varint,4,rep,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value    []int32           `protobuf:"varint,5,rep,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value  []uint64          `protobuf:"fixed64,6,rep,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value  []uint32          `protobuf:"fixed32,7,rep,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue     []bool            `protobuf:"varint,8,rep,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue   []string          `protobuf:"bytes,9,rep,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue    [][]byte          `protobuf:"bytes,12,rep,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	Uint32Value   []uint32          `protobuf:"varint,13,rep,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	Sfixed32Value []int32           `protobuf:"fixed32,15,rep,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value []int64           `protobuf:"fixed64,16,rep,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value   []int32           `protobuf:"zigzag32,17,rep,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value   []int64           `protobuf:"zigzag64,18,rep,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	MessageValue  []*PrimitiveValue `protobuf:"bytes,19,rep,name=message_value,json=messageValue" json:"message_value,omitempty"`
	// Optional fields with explicitly-specified defaults.
	DoubleValueWithDefault       *float64 `protobuf:"fixed64,20,opt,name=double_value_with_default,json=doubleValueWithDefault,def=1" json:"double_value_with_default,omitempty"`
	FloatValueWithDefault        *float32 `protobuf:"fixed32,21,opt,name=float_value_with_default,json=floatValueWithDefault,def=2" json:"float_value_with_default,omitempty"`
	Int64ValueWithDefault        *int64   `protobuf:"varint,22,opt,name=int64_value_with_default,json=int64ValueWithDefault,def=3" json:"int64_value_with_default,omitempty"`
	Uint64ValueWithDefault       *uint64  `protobuf:"varint,23,opt,name=uint64_value_with_default,json=uint64ValueWithDefault,def=4" json:"uint64_value_with_default,omitempty"`
	Int32ValueWithDefault        *int32   `protobuf:"varint,24,opt,name=int32_value_with_default,json=int32ValueWithDefault,def=5" json:"int32_value_with_default,omitempty"`
	Fixed64ValueWithDefault      *uint64  `protobuf:"fixed64,25,opt,name=fixed64_value_with_default,json=fixed64ValueWithDefault,def=6" json:"fixed64_value_with_default,omitempty"`
	Fixed32ValueWithDefault      *uint32  `protobuf:"fixed32,26,opt,name=fixed32_value_with_default,json=fixed32ValueWithDefault,def=7" json:"fixed32_value_with_default,omitempty"`
	BoolValueWithDefault         *bool    `protobuf:"varint,27,opt,name=bool_value_with_default,json=boolValueWithDefault,def=1" json:"bool_value_with_default,omitempty"`
	StringValueWithDefault       *string  `protobuf:"bytes,28,opt,name=string_value_with_default,json=stringValueWithDefault,def=a" json:"string_value_with_default,omitempty"`
	BytesValueWithDefault        []byte   `protobuf:"bytes,29,opt,name=bytes_value_with_default,json=bytesValueWithDefault,def=a longer default string" json:"bytes_value_with_default,omitempty"`
	Uint32ValueWithDefault       *uint32  `protobuf:"varint,30,opt,name=uint32_value_with_default,json=uint32ValueWithDefault,def=9" json:"uint32_value_with_default,omitempty"`
	Sfixed32ValueWithDefault     *int32   `protobuf:"fixed32,31,opt,name=sfixed32_value_with_default,json=sfixed32ValueWithDefault,def=10" json:"sfixed32_value_with_default,omitempty"`
	Sfixed64ValueWithDefault     *int64   `protobuf:"fixed64,32,opt,name=sfixed64_value_with_default,json=sfixed64ValueWithDefault,def=11" json:"sfixed64_value_with_default,omitempty"`
	Sint32ValueWithDefault       *int32   `protobuf:"zigzag32,33,opt,name=sint32_value_with_default,json=sint32ValueWithDefault,def=12" json:"sint32_value_with_default,omitempty"`
	Sint64ValueWithDefault       *int64   `protobuf:"zigzag64,34,opt,name=sint64_value_with_default,json=sint64ValueWithDefault,def=13" json:"sint64_value_with_default,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *TestValue) Reset()         { *m = TestValue{} }
func (m *TestValue) String() string { return proto.CompactTextString(m) }
func (*TestValue) ProtoMessage()    {}
func (*TestValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{2}
}

var extRange_TestValue = []proto.ExtensionRange{
	{Start: 100, End: 199},
}

func (*TestValue) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_TestValue
}

func (m *TestValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestValue.Unmarshal(m, b)
}
func (m *TestValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestValue.Marshal(b, m, deterministic)
}
func (m *TestValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestValue.Merge(m, src)
}
func (m *TestValue) XXX_Size() int {
	return xxx_messageInfo_TestValue.Size(m)
}
func (m *TestValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TestValue.DiscardUnknown(m)
}

var xxx_messageInfo_TestValue proto.InternalMessageInfo

const Default_TestValue_DoubleValueWithDefault float64 = 1
const Default_TestValue_FloatValueWithDefault float32 = 2
const Default_TestValue_Int64ValueWithDefault int64 = 3
const Default_TestValue_Uint64ValueWithDefault uint64 = 4
const Default_TestValue_Int32ValueWithDefault int32 = 5
const Default_TestValue_Fixed64ValueWithDefault uint64 = 6
const Default_TestValue_Fixed32ValueWithDefault uint32 = 7
const Default_TestValue_BoolValueWithDefault bool = true
const Default_TestValue_StringValueWithDefault string = "a"

var Default_TestValue_BytesValueWithDefault []byte = []byte("a longer default string")

const Default_TestValue_Uint32ValueWithDefault uint32 = 9
const Default_TestValue_Sfixed32ValueWithDefault int32 = 10
const Default_TestValue_Sfixed64ValueWithDefault int64 = 11
const Default_TestValue_Sint32ValueWithDefault int32 = 12
const Default_TestValue_Sint64ValueWithDefault int64 = 13

func (m *TestValue) GetDoubleValue() []float64 {
	if m != nil {
		return m.DoubleValue
	}
	return nil
}

func (m *TestValue) GetFloatValue() []float32 {
	if m != nil {
		return m.FloatValue
	}
	return nil
}

func (m *TestValue) GetInt64Value() []int64 {
	if m != nil {
		return m.Int64Value
	}
	return nil
}

func (m *TestValue) GetUint64Value() []uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return nil
}

func (m *TestValue) GetInt32Value() []int32 {
	if m != nil {
		return m.Int32Value
	}
	return nil
}

func (m *TestValue) GetFixed64Value() []uint64 {
	if m != nil {
		return m.Fixed64Value
	}
	return nil
}

func (m *TestValue) GetFixed32Value() []uint32 {
	if m != nil {
		return m.Fixed32Value
	}
	return nil
}

func (m *TestValue) GetBoolValue() []bool {
	if m != nil {
		return m.BoolValue
	}
	return nil
}

func (m *TestValue) GetStringValue() []string {
	if m != nil {
		return m.StringValue
	}
	return nil
}

func (m *TestValue) GetBytesValue() [][]byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *TestValue) GetUint32Value() []uint32 {
	if m != nil {
		return m.Uint32Value
	}
	return nil
}

func (m *TestValue) GetSfixed32Value() []int32 {
	if m != nil {
		return m.Sfixed32Value
	}
	return nil
}

func (m *TestValue) GetSfixed64Value() []int64 {
	if m != nil {
		return m.Sfixed64Value
	}
	return nil
}

func (m *TestValue) GetSint32Value() []int32 {
	if m != nil {
		return m.Sint32Value
	}
	return nil
}

func (m *TestValue) GetSint64Value() []int64 {
	if m != nil {
		return m.Sint64Value
	}
	return nil
}

func (m *TestValue) GetMessageValue() []*PrimitiveValue {
	if m != nil {
		return m.MessageValue
	}
	return nil
}

func (m *TestValue) GetDoubleValueWithDefault() float64 {
	if m != nil && m.DoubleValueWithDefault != nil {
		return *m.DoubleValueWithDefault
	}
	return Default_TestValue_DoubleValueWithDefault
}

func (m *TestValue) GetFloatValueWithDefault() float32 {
	if m != nil && m.FloatValueWithDefault != nil {
		return *m.FloatValueWithDefault
	}
	return Default_TestValue_FloatValueWithDefault
}

func (m *TestValue) GetInt64ValueWithDefault() int64 {
	if m != nil && m.Int64ValueWithDefault != nil {
		return *m.Int64ValueWithDefault
	}
	return Default_TestValue_Int64ValueWithDefault
}

func (m *TestValue) GetUint64ValueWithDefault() uint64 {
	if m != nil && m.Uint64ValueWithDefault != nil {
		return *m.Uint64ValueWithDefault
	}
	return Default_TestValue_Uint64ValueWithDefault
}

func (m *TestValue) GetInt32ValueWithDefault() int32 {
	if m != nil && m.Int32ValueWithDefault != nil {
		return *m.Int32ValueWithDefault
	}
	return Default_TestValue_Int32ValueWithDefault
}

func (m *TestValue) GetFixed64ValueWithDefault() uint64 {
	if m != nil && m.Fixed64ValueWithDefault != nil {
		return *m.Fixed64ValueWithDefault
	}
	return Default_TestValue_Fixed64ValueWithDefault
}

func (m *TestValue) GetFixed32ValueWithDefault() uint32 {
	if m != nil && m.Fixed32ValueWithDefault != nil {
		return *m.Fixed32ValueWithDefault
	}
	return Default_TestValue_Fixed32ValueWithDefault
}

func (m *TestValue) GetBoolValueWithDefault() bool {
	if m != nil && m.BoolValueWithDefault != nil {
		return *m.BoolValueWithDefault
	}
	return Default_TestValue_BoolValueWithDefault
}

func (m *TestValue) GetStringValueWithDefault() string {
	if m != nil && m.StringValueWithDefault != nil {
		return *m.StringValueWithDefault
	}
	return Default_TestValue_StringValueWithDefault
}

func (m *TestValue) GetBytesValueWithDefault() []byte {
	if m != nil && m.BytesValueWithDefault != nil {
		return m.BytesValueWithDefault
	}
	return append([]byte(nil), Default_TestValue_BytesValueWithDefault...)
}

func (m *TestValue) GetUint32ValueWithDefault() uint32 {
	if m != nil && m.Uint32ValueWithDefault != nil {
		return *m.Uint32ValueWithDefault
	}
	return Default_TestValue_Uint32ValueWithDefault
}

func (m *TestValue) GetSfixed32ValueWithDefault() int32 {
	if m != nil && m.Sfixed32ValueWithDefault != nil {
		return *m.Sfixed32ValueWithDefault
	}
	return Default_TestValue_Sfixed32ValueWithDefault
}

func (m *TestValue) GetSfixed64ValueWithDefault() int64 {
	if m != nil && m.Sfixed64ValueWithDefault != nil {
		return *m.Sfixed64ValueWithDefault
	}
	return Default_TestValue_Sfixed64ValueWithDefault
}

func (m *TestValue) GetSint32ValueWithDefault() int32 {
	if m != nil && m.Sint32ValueWithDefault != nil {
		return *m.Sint32ValueWithDefault
	}
	return Default_TestValue_Sint32ValueWithDefault
}

func (m *TestValue) GetSint64ValueWithDefault() int64 {
	if m != nil && m.Sint64ValueWithDefault != nil {
		return *m.Sint64ValueWithDefault
	}
	return Default_TestValue_Sint64ValueWithDefault
}

// A PackedTestValue looks exactly the same as a TestValue in the text format,
// but the binary serializion is different. We test the packed representations
// by loading the same test cases using this definition instead of TestValue.
//
// NOTE: This definition must be kept in sync with TestValue in every way except
// the packed=true declaration and the lack of extensions.
type PackedTestValue struct {
	DoubleValue              []float64         `protobuf:"fixed64,1,rep,packed,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue               []float32         `protobuf:"fixed32,2,rep,packed,name=float_value,json=floatValue" json:"float_value,omitempty"`
	Int64Value               []int64           `protobuf:"varint,3,rep,packed,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value              []uint64          `protobuf:"varint,4,rep,packed,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value               []int32           `protobuf:"varint,5,rep,packed,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value             []uint64          `protobuf:"fixed64,6,rep,packed,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value             []uint32          `protobuf:"fixed32,7,rep,packed,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue                []bool            `protobuf:"varint,8,rep,packed,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue              []string          `protobuf:"bytes,9,rep,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue               [][]byte          `protobuf:"bytes,12,rep,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	Uint32Value              []uint32          `protobuf:"varint,13,rep,packed,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	Sfixed32Value            []int32           `protobuf:"fixed32,15,rep,packed,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value            []int64           `protobuf:"fixed64,16,rep,packed,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value              []int32           `protobuf:"zigzag32,17,rep,packed,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value              []int64           `protobuf:"zigzag64,18,rep,packed,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	MessageValue             []*PrimitiveValue `protobuf:"bytes,19,rep,name=message_value,json=messageValue" json:"message_value,omitempty"`
	DoubleValueWithDefault   *float64          `protobuf:"fixed64,20,opt,name=double_value_with_default,json=doubleValueWithDefault,def=1" json:"double_value_with_default,omitempty"`
	FloatValueWithDefault    *float32          `protobuf:"fixed32,21,opt,name=float_value_with_default,json=floatValueWithDefault,def=2" json:"float_value_with_default,omitempty"`
	Int64ValueWithDefault    *int64            `protobuf:"varint,22,opt,name=int64_value_with_default,json=int64ValueWithDefault,def=3" json:"int64_value_with_default,omitempty"`
	Uint64ValueWithDefault   *uint64           `protobuf:"varint,23,opt,name=uint64_value_with_default,json=uint64ValueWithDefault,def=4" json:"uint64_value_with_default,omitempty"`
	Int32ValueWithDefault    *int32            `protobuf:"varint,24,opt,name=int32_value_with_default,json=int32ValueWithDefault,def=5" json:"int32_value_with_default,omitempty"`
	Fixed64ValueWithDefault  *uint64           `protobuf:"fixed64,25,opt,name=fixed64_value_with_default,json=fixed64ValueWithDefault,def=6" json:"fixed64_value_with_default,omitempty"`
	Fixed32ValueWithDefault  *uint32           `protobuf:"fixed32,26,opt,name=fixed32_value_with_default,json=fixed32ValueWithDefault,def=7" json:"fixed32_value_with_default,omitempty"`
	BoolValueWithDefault     *bool             `protobuf:"varint,27,opt,name=bool_value_with_default,json=boolValueWithDefault,def=1" json:"bool_value_with_default,omitempty"`
	StringValueWithDefault   *string           `protobuf:"bytes,28,opt,name=string_value_with_default,json=stringValueWithDefault,def=a" json:"string_value_with_default,omitempty"`
	BytesValueWithDefault    []byte            `protobuf:"bytes,29,opt,name=bytes_value_with_default,json=bytesValueWithDefault,def=a longer default string" json:"bytes_value_with_default,omitempty"`
	Uint32ValueWithDefault   *uint32           `protobuf:"varint,30,opt,name=uint32_value_with_default,json=uint32ValueWithDefault,def=9" json:"uint32_value_with_default,omitempty"`
	Sfixed32ValueWithDefault *int32            `protobuf:"fixed32,31,opt,name=sfixed32_value_with_default,json=sfixed32ValueWithDefault,def=10" json:"sfixed32_value_with_default,omitempty"`
	Sfixed64ValueWithDefault *int64            `protobuf:"fixed64,32,opt,name=sfixed64_value_with_default,json=sfixed64ValueWithDefault,def=11" json:"sfixed64_value_with_default,omitempty"`
	Sint32ValueWithDefault   *int32            `protobuf:"zigzag32,33,opt,name=sint32_value_with_default,json=sint32ValueWithDefault,def=12" json:"sint32_value_with_default,omitempty"`
	Sint64ValueWithDefault   *int64            `protobuf:"zigzag64,34,opt,name=sint64_value_with_default,json=sint64ValueWithDefault,def=13" json:"sint64_value_with_default,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}          `json:"-"`
	XXX_unrecognized         []byte            `json:"-"`
	XXX_sizecache            int32             `json:"-"`
}

func (m *PackedTestValue) Reset()         { *m = PackedTestValue{} }
func (m *PackedTestValue) String() string { return proto.CompactTextString(m) }
func (*PackedTestValue) ProtoMessage()    {}
func (*PackedTestValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{3}
}

func (m *PackedTestValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PackedTestValue.Unmarshal(m, b)
}
func (m *PackedTestValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PackedTestValue.Marshal(b, m, deterministic)
}
func (m *PackedTestValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackedTestValue.Merge(m, src)
}
func (m *PackedTestValue) XXX_Size() int {
	return xxx_messageInfo_PackedTestValue.Size(m)
}
func (m *PackedTestValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PackedTestValue.DiscardUnknown(m)
}

var xxx_messageInfo_PackedTestValue proto.InternalMessageInfo

const Default_PackedTestValue_DoubleValueWithDefault float64 = 1
const Default_PackedTestValue_FloatValueWithDefault float32 = 2
const Default_PackedTestValue_Int64ValueWithDefault int64 = 3
const Default_PackedTestValue_Uint64ValueWithDefault uint64 = 4
const Default_PackedTestValue_Int32ValueWithDefault int32 = 5
const Default_PackedTestValue_Fixed64ValueWithDefault uint64 = 6
const Default_PackedTestValue_Fixed32ValueWithDefault uint32 = 7
const Default_PackedTestValue_BoolValueWithDefault bool = true
const Default_PackedTestValue_StringValueWithDefault string = "a"

var Default_PackedTestValue_BytesValueWithDefault []byte = []byte("a longer default string")

const Default_PackedTestValue_Uint32ValueWithDefault uint32 = 9
const Default_PackedTestValue_Sfixed32ValueWithDefault int32 = 10
const Default_PackedTestValue_Sfixed64ValueWithDefault int64 = 11
const Default_PackedTestValue_Sint32ValueWithDefault int32 = 12
const Default_PackedTestValue_Sint64ValueWithDefault int64 = 13

func (m *PackedTestValue) GetDoubleValue() []float64 {
	if m != nil {
		return m.DoubleValue
	}
	return nil
}

func (m *PackedTestValue) GetFloatValue() []float32 {
	if m != nil {
		return m.FloatValue
	}
	return nil
}

func (m *PackedTestValue) GetInt64Value() []int64 {
	if m != nil {
		return m.Int64Value
	}
	return nil
}

func (m *PackedTestValue) GetUint64Value() []uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return nil
}

func (m *PackedTestValue) GetInt32Value() []int32 {
	if m != nil {
		return m.Int32Value
	}
	return nil
}

func (m *PackedTestValue) GetFixed64Value() []uint64 {
	if m != nil {
		return m.Fixed64Value
	}
	return nil
}

func (m *PackedTestValue) GetFixed32Value() []uint32 {
	if m != nil {
		return m.Fixed32Value
	}
	return nil
}

func (m *PackedTestValue) GetBoolValue() []bool {
	if m != nil {
		return m.BoolValue
	}
	return nil
}

func (m *PackedTestValue) GetStringValue() []string {
	if m != nil {
		return m.StringValue
	}
	return nil
}

func (m *PackedTestValue) GetBytesValue() [][]byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *PackedTestValue) GetUint32Value() []uint32 {
	if m != nil {
		return m.Uint32Value
	}
	return nil
}

func (m *PackedTestValue) GetSfixed32Value() []int32 {
	if m != nil {
		return m.Sfixed32Value
	}
	return nil
}

func (m *PackedTestValue) GetSfixed64Value() []int64 {
	if m != nil {
		return m.Sfixed64Value
	}
	return nil
}

func (m *PackedTestValue) GetSint32Value() []int32 {
	if m != nil {
		return m.Sint32Value
	}
	return nil
}

func (m *PackedTestValue) GetSint64Value() []int64 {
	if m != nil {
		return m.Sint64Value
	}
	return nil
}

func (m *PackedTestValue) GetMessageValue() []*PrimitiveValue {
	if m != nil {
		return m.MessageValue
	}
	return nil
}

func (m *PackedTestValue) GetDoubleValueWithDefault() float64 {
	if m != nil && m.DoubleValueWithDefault != nil {
		return *m.DoubleValueWithDefault
	}
	return Default_PackedTestValue_DoubleValueWithDefault
}

func (m *PackedTestValue) GetFloatValueWithDefault() float32 {
	if m != nil && m.FloatValueWithDefault != nil {
		return *m.FloatValueWithDefault
	}
	return Default_PackedTestValue_FloatValueWithDefault
}

func (m *PackedTestValue) GetInt64ValueWithDefault() int64 {
	if m != nil && m.Int64ValueWithDefault != nil {
		return *m.Int64ValueWithDefault
	}
	return Default_PackedTestValue_Int64ValueWithDefault
}

func (m *PackedTestValue) GetUint64ValueWithDefault() uint64 {
	if m != nil && m.Uint64ValueWithDefault != nil {
		return *m.Uint64ValueWithDefault
	}
	return Default_PackedTestValue_Uint64ValueWithDefault
}

func (m *PackedTestValue) GetInt32ValueWithDefault() int32 {
	if m != nil && m.Int32ValueWithDefault != nil {
		return *m.Int32ValueWithDefault
	}
	return Default_PackedTestValue_Int32ValueWithDefault
}

func (m *PackedTestValue) GetFixed64ValueWithDefault() uint64 {
	if m != nil && m.Fixed64ValueWithDefault != nil {
		return *m.Fixed64ValueWithDefault
	}
	return Default_PackedTestValue_Fixed64ValueWithDefault
}

func (m *PackedTestValue) GetFixed32ValueWithDefault() uint32 {
	if m != nil && m.Fixed32ValueWithDefault != nil {
		return *m.Fixed32ValueWithDefault
	}
	return Default_PackedTestValue_Fixed32ValueWithDefault
}

func (m *PackedTestValue) GetBoolValueWithDefault() bool {
	if m != nil && m.BoolValueWithDefault != nil {
		return *m.BoolValueWithDefault
	}
	return Default_PackedTestValue_BoolValueWithDefault
}

func (m *PackedTestValue) GetStringValueWithDefault() string {
	if m != nil && m.StringValueWithDefault != nil {
		return *m.StringValueWithDefault
	}
	return Default_PackedTestValue_StringValueWithDefault
}

func (m *PackedTestValue) GetBytesValueWithDefault() []byte {
	if m != nil && m.BytesValueWithDefault != nil {
		return m.BytesValueWithDefault
	}
	return append([]byte(nil), Default_PackedTestValue_BytesValueWithDefault...)
}

func (m *PackedTestValue) GetUint32ValueWithDefault() uint32 {
	if m != nil && m.Uint32ValueWithDefault != nil {
		return *m.Uint32ValueWithDefault
	}
	return Default_PackedTestValue_Uint32ValueWithDefault
}

func (m *PackedTestValue) GetSfixed32ValueWithDefault() int32 {
	if m != nil && m.Sfixed32ValueWithDefault != nil {
		return *m.Sfixed32ValueWithDefault
	}
	return Default_PackedTestValue_Sfixed32ValueWithDefault
}

func (m *PackedTestValue) GetSfixed64ValueWithDefault() int64 {
	if m != nil && m.Sfixed64ValueWithDefault != nil {
		return *m.Sfixed64ValueWithDefault
	}
	return Default_PackedTestValue_Sfixed64ValueWithDefault
}

func (m *PackedTestValue) GetSint32ValueWithDefault() int32 {
	if m != nil && m.Sint32ValueWithDefault != nil {
		return *m.Sint32ValueWithDefault
	}
	return Default_PackedTestValue_Sint32ValueWithDefault
}

func (m *PackedTestValue) GetSint64ValueWithDefault() int64 {
	if m != nil && m.Sint64ValueWithDefault != nil {
		return *m.Sint64ValueWithDefault
	}
	return Default_PackedTestValue_Sint64ValueWithDefault
}

type PrimitiveValue struct {
	DoubleValue          *float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue           *float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	Int64Value           *int64   `protobuf:"varint,3,opt,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value          *uint64  `protobuf:"varint,4,opt,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value           *int32   `protobuf:"varint,5,opt,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value         *uint64  `protobuf:"fixed64,6,opt,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value         *uint32  `protobuf:"fixed32,7,opt,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue            *bool    `protobuf:"varint,8,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue          *string  `protobuf:"bytes,9,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue           []byte   `protobuf:"bytes,12,opt,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	Uint32Value          *uint32  `protobuf:"varint,13,opt,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	Sfixed32Value        *int32   `protobuf:"fixed32,15,opt,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value        *int64   `protobuf:"fixed64,16,opt,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value          *int32   `protobuf:"zigzag32,17,opt,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value          *int64   `protobuf:"zigzag64,18,opt,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimitiveValue) Reset()         { *m = PrimitiveValue{} }
func (m *PrimitiveValue) String() string { return proto.CompactTextString(m) }
func (*PrimitiveValue) ProtoMessage()    {}
func (*PrimitiveValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{4}
}

func (m *PrimitiveValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimitiveValue.Unmarshal(m, b)
}
func (m *PrimitiveValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimitiveValue.Marshal(b, m, deterministic)
}
func (m *PrimitiveValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitiveValue.Merge(m, src)
}
func (m *PrimitiveValue) XXX_Size() int {
	return xxx_messageInfo_PrimitiveValue.Size(m)
}
func (m *PrimitiveValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitiveValue.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitiveValue proto.InternalMessageInfo

func (m *PrimitiveValue) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *PrimitiveValue) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *PrimitiveValue) GetInt64Value() int64 {
	if m != nil && m.Int64Value != nil {
		return *m.Int64Value
	}
	return 0
}

func (m *PrimitiveValue) GetUint64Value() uint64 {
	if m != nil && m.Uint64Value != nil {
		return *m.Uint64Value
	}
	return 0
}

func (m *PrimitiveValue) GetInt32Value() int32 {
	if m != nil && m.Int32Value != nil {
		return *m.Int32Value
	}
	return 0
}

func (m *PrimitiveValue) GetFixed64Value() uint64 {
	if m != nil && m.Fixed64Value != nil {
		return *m.Fixed64Value
	}
	return 0
}

func (m *PrimitiveValue) GetFixed32Value() uint32 {
	if m != nil && m.Fixed32Value != nil {
		return *m.Fixed32Value
	}
	return 0
}

func (m *PrimitiveValue) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *PrimitiveValue) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *PrimitiveValue) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *PrimitiveValue) GetUint32Value() uint32 {
	if m != nil && m.Uint32Value != nil {
		return *m.Uint32Value
	}
	return 0
}

func (m *PrimitiveValue) GetSfixed32Value() int32 {
	if m != nil && m.Sfixed32Value != nil {
		return *m.Sfixed32Value
	}
	return 0
}

func (m *PrimitiveValue) GetSfixed64Value() int64 {
	if m != nil && m.Sfixed64Value != nil {
		return *m.Sfixed64Value
	}
	return 0
}

func (m *PrimitiveValue) GetSint32Value() int32 {
	if m != nil && m.Sint32Value != nil {
		return *m.Sint32Value
	}
	return 0
}

func (m *PrimitiveValue) GetSint64Value() int64 {
	if m != nil && m.Sint64Value != nil {
		return *m.Sint64Value
	}
	return 0
}

// Message containing fields with field numbers higher than any field above.
// An instance of this message is prepended to each binary message in the test
// to exercise the code path that handles fields encoded out of order of field
// number.
type ExtraFields struct {
	StringValue          *string  `protobuf:"bytes,1776,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BoolValue            *bool    `protobuf:"varint,1777,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtraFields) Reset()         { *m = ExtraFields{} }
func (m *ExtraFields) String() string { return proto.CompactTextString(m) }
func (*ExtraFields) ProtoMessage()    {}
func (*ExtraFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{5}
}

func (m *ExtraFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtraFields.Unmarshal(m, b)
}
func (m *ExtraFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtraFields.Marshal(b, m, deterministic)
}
func (m *ExtraFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraFields.Merge(m, src)
}
func (m *ExtraFields) XXX_Size() int {
	return xxx_messageInfo_ExtraFields.Size(m)
}
func (m *ExtraFields) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraFields.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraFields proto.InternalMessageInfo

func (m *ExtraFields) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *ExtraFields) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

type EnumValue struct {
	EnumValue            *EnumValue_Color  `protobuf:"varint,14,opt,name=enum_value,json=enumValue,enum=tensorflow.contrib.proto.EnumValue_Color" json:"enum_value,omitempty"`
	RepeatedEnumValue    []EnumValue_Color `protobuf:"varint,15,rep,name=repeated_enum_value,json=repeatedEnumValue,enum=tensorflow.contrib.proto.EnumValue_Color" json:"repeated_enum_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EnumValue) Reset()         { *m = EnumValue{} }
func (m *EnumValue) String() string { return proto.CompactTextString(m) }
func (*EnumValue) ProtoMessage()    {}
func (*EnumValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{6}
}

func (m *EnumValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnumValue.Unmarshal(m, b)
}
func (m *EnumValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnumValue.Marshal(b, m, deterministic)
}
func (m *EnumValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumValue.Merge(m, src)
}
func (m *EnumValue) XXX_Size() int {
	return xxx_messageInfo_EnumValue.Size(m)
}
func (m *EnumValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumValue.DiscardUnknown(m)
}

var xxx_messageInfo_EnumValue proto.InternalMessageInfo

func (m *EnumValue) GetEnumValue() EnumValue_Color {
	if m != nil && m.EnumValue != nil {
		return *m.EnumValue
	}
	return EnumValue_RED
}

func (m *EnumValue) GetRepeatedEnumValue() []EnumValue_Color {
	if m != nil {
		return m.RepeatedEnumValue
	}
	return nil
}

type InnerMessageValue struct {
	FloatValue           *float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	BytesValues          [][]byte `protobuf:"bytes,8,rep,name=bytes_values,json=bytesValues" json:"bytes_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InnerMessageValue) Reset()         { *m = InnerMessageValue{} }
func (m *InnerMessageValue) String() string { return proto.CompactTextString(m) }
func (*InnerMessageValue) ProtoMessage()    {}
func (*InnerMessageValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{7}
}

func (m *InnerMessageValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InnerMessageValue.Unmarshal(m, b)
}
func (m *InnerMessageValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InnerMessageValue.Marshal(b, m, deterministic)
}
func (m *InnerMessageValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InnerMessageValue.Merge(m, src)
}
func (m *InnerMessageValue) XXX_Size() int {
	return xxx_messageInfo_InnerMessageValue.Size(m)
}
func (m *InnerMessageValue) XXX_DiscardUnknown() {
	xxx_messageInfo_InnerMessageValue.DiscardUnknown(m)
}

var xxx_messageInfo_InnerMessageValue proto.InternalMessageInfo

func (m *InnerMessageValue) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *InnerMessageValue) GetBytesValues() [][]byte {
	if m != nil {
		return m.BytesValues
	}
	return nil
}

type MiddleMessageValue struct {
	Int32Values          []int32            `protobuf:"varint,5,rep,name=int32_values,json=int32Values" json:"int32_values,omitempty"`
	MessageValue         *InnerMessageValue `protobuf:"bytes,11,opt,name=message_value,json=messageValue" json:"message_value,omitempty"`
	Uint32Value          *uint32            `protobuf:"varint,13,opt,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MiddleMessageValue) Reset()         { *m = MiddleMessageValue{} }
func (m *MiddleMessageValue) String() string { return proto.CompactTextString(m) }
func (*MiddleMessageValue) ProtoMessage()    {}
func (*MiddleMessageValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{8}
}

func (m *MiddleMessageValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MiddleMessageValue.Unmarshal(m, b)
}
func (m *MiddleMessageValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MiddleMessageValue.Marshal(b, m, deterministic)
}
func (m *MiddleMessageValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiddleMessageValue.Merge(m, src)
}
func (m *MiddleMessageValue) XXX_Size() int {
	return xxx_messageInfo_MiddleMessageValue.Size(m)
}
func (m *MiddleMessageValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MiddleMessageValue.DiscardUnknown(m)
}

var xxx_messageInfo_MiddleMessageValue proto.InternalMessageInfo

func (m *MiddleMessageValue) GetInt32Values() []int32 {
	if m != nil {
		return m.Int32Values
	}
	return nil
}

func (m *MiddleMessageValue) GetMessageValue() *InnerMessageValue {
	if m != nil {
		return m.MessageValue
	}
	return nil
}

func (m *MiddleMessageValue) GetUint32Value() uint32 {
	if m != nil && m.Uint32Value != nil {
		return *m.Uint32Value
	}
	return 0
}

type MessageValue struct {
	DoubleValue          *float64            `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	MessageValue         *MiddleMessageValue `protobuf:"bytes,11,opt,name=message_value,json=messageValue" json:"message_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MessageValue) Reset()         { *m = MessageValue{} }
func (m *MessageValue) String() string { return proto.CompactTextString(m) }
func (*MessageValue) ProtoMessage()    {}
func (*MessageValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{9}
}

func (m *MessageValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageValue.Unmarshal(m, b)
}
func (m *MessageValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageValue.Marshal(b, m, deterministic)
}
func (m *MessageValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageValue.Merge(m, src)
}
func (m *MessageValue) XXX_Size() int {
	return xxx_messageInfo_MessageValue.Size(m)
}
func (m *MessageValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageValue.DiscardUnknown(m)
}

var xxx_messageInfo_MessageValue proto.InternalMessageInfo

func (m *MessageValue) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *MessageValue) GetMessageValue() *MiddleMessageValue {
	if m != nil {
		return m.MessageValue
	}
	return nil
}

type RepeatedMessageValue struct {
	MessageValues        []*RepeatedMessageValue_NestedMessageValue `protobuf:"bytes,11,rep,name=message_values,json=messageValues" json:"message_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *RepeatedMessageValue) Reset()         { *m = RepeatedMessageValue{} }
func (m *RepeatedMessageValue) String() string { return proto.CompactTextString(m) }
func (*RepeatedMessageValue) ProtoMessage()    {}
func (*RepeatedMessageValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{10}
}

func (m *RepeatedMessageValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepeatedMessageValue.Unmarshal(m, b)
}
func (m *RepeatedMessageValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepeatedMessageValue.Marshal(b, m, deterministic)
}
func (m *RepeatedMessageValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedMessageValue.Merge(m, src)
}
func (m *RepeatedMessageValue) XXX_Size() int {
	return xxx_messageInfo_RepeatedMessageValue.Size(m)
}
func (m *RepeatedMessageValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedMessageValue.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedMessageValue proto.InternalMessageInfo

func (m *RepeatedMessageValue) GetMessageValues() []*RepeatedMessageValue_NestedMessageValue {
	if m != nil {
		return m.MessageValues
	}
	return nil
}

type RepeatedMessageValue_NestedMessageValue struct {
	FloatValue           *float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	BytesValues          [][]byte `protobuf:"bytes,8,rep,name=bytes_values,json=bytesValues" json:"bytes_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RepeatedMessageValue_NestedMessageValue) Reset() {
	*m = RepeatedMessageValue_NestedMessageValue{}
}
func (m *RepeatedMessageValue_NestedMessageValue) String() string { return proto.CompactTextString(m) }
func (*RepeatedMessageValue_NestedMessageValue) ProtoMessage()    {}
func (*RepeatedMessageValue_NestedMessageValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_83f9293384d935a5, []int{10, 0}
}

func (m *RepeatedMessageValue_NestedMessageValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RepeatedMessageValue_NestedMessageValue.Unmarshal(m, b)
}
func (m *RepeatedMessageValue_NestedMessageValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RepeatedMessageValue_NestedMessageValue.Marshal(b, m, deterministic)
}
func (m *RepeatedMessageValue_NestedMessageValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RepeatedMessageValue_NestedMessageValue.Merge(m, src)
}
func (m *RepeatedMessageValue_NestedMessageValue) XXX_Size() int {
	return xxx_messageInfo_RepeatedMessageValue_NestedMessageValue.Size(m)
}
func (m *RepeatedMessageValue_NestedMessageValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RepeatedMessageValue_NestedMessageValue.DiscardUnknown(m)
}

var xxx_messageInfo_RepeatedMessageValue_NestedMessageValue proto.InternalMessageInfo

func (m *RepeatedMessageValue_NestedMessageValue) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *RepeatedMessageValue_NestedMessageValue) GetBytesValues() [][]byte {
	if m != nil {
		return m.BytesValues
	}
	return nil
}

var E_ExtValue = &proto.ExtensionDesc{
	ExtendedType:  (*TestValue)(nil),
	ExtensionType: ([]*PrimitiveValue)(nil),
	Field:         100,
	Name:          "tensorflow.contrib.proto.ext_value",
	Tag:           "bytes,100,rep,name=ext_value",
	Filename:      "tensorflow/python/kernel_tests/proto/test_example.proto",
}

func init() {
	proto.RegisterEnum("tensorflow.contrib.proto.EnumValue_Color", EnumValue_Color_name, EnumValue_Color_value)
	proto.RegisterType((*TestCase)(nil), "tensorflow.contrib.proto.TestCase")
	proto.RegisterType((*FieldSpec)(nil), "tensorflow.contrib.proto.FieldSpec")
	proto.RegisterType((*TestValue)(nil), "tensorflow.contrib.proto.TestValue")
	proto.RegisterType((*PackedTestValue)(nil), "tensorflow.contrib.proto.PackedTestValue")
	proto.RegisterType((*PrimitiveValue)(nil), "tensorflow.contrib.proto.PrimitiveValue")
	proto.RegisterType((*ExtraFields)(nil), "tensorflow.contrib.proto.ExtraFields")
	proto.RegisterType((*EnumValue)(nil), "tensorflow.contrib.proto.EnumValue")
	proto.RegisterType((*InnerMessageValue)(nil), "tensorflow.contrib.proto.InnerMessageValue")
	proto.RegisterType((*MiddleMessageValue)(nil), "tensorflow.contrib.proto.MiddleMessageValue")
	proto.RegisterType((*MessageValue)(nil), "tensorflow.contrib.proto.MessageValue")
	proto.RegisterType((*RepeatedMessageValue)(nil), "tensorflow.contrib.proto.RepeatedMessageValue")
	proto.RegisterType((*RepeatedMessageValue_NestedMessageValue)(nil), "tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue")
	proto.RegisterExtension(E_ExtValue)
}

func init() {
	proto.RegisterFile("tensorflow/python/kernel_tests/proto/test_example.proto", fileDescriptor_83f9293384d935a5)
}

var fileDescriptor_83f9293384d935a5 = []byte{
	// 1354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0xfd, 0x46, 0x94, 0x64, 0x69, 0x25, 0xd9, 0x32, 0xe3, 0x1f, 0xda, 0xf9, 0x92, 0xac, 0x69,
	0x18, 0xd9, 0xa4, 0x85, 0x54, 0x3b, 0x69, 0x82, 0x30, 0x69, 0x81, 0x24, 0x56, 0x5d, 0x03, 0x8e,
	0xed, 0x6c, 0xf3, 0xd3, 0xf4, 0x46, 0xa0, 0xad, 0xb5, 0xcd, 0x46, 0x12, 0x05, 0x2e, 0x95, 0xd8,
	0xbd, 0x2e, 0xda, 0xa7, 0xe8, 0x1b, 0xb4, 0x37, 0x7d, 0x8a, 0x3e, 0x43, 0xaf, 0xfa, 0x08, 0xed,
	0x1b, 0x14, 0xe4, 0x52, 0xd4, 0x52, 0x5a, 0x95, 0x0a, 0x90, 0x4b, 0xdf, 0x51, 0xa3, 0x73, 0x66,
	0x66, 0x67, 0x67, 0x79, 0x38, 0x8b, 0xee, 0xfb, 0xac, 0xcb, 0x5d, 0xef, 0xa4, 0xed, 0xbe, 0xaf,
	0xf7, 0x2e, 0xfc, 0x33, 0xb7, 0x5b, 0x7f, 0xcb, 0xbc, 0x2e, 0x6b, 0x37, 0x7d, 0xc6, 0x7d, 0x5e,
	0xef, 0x79, 0xae, 0xef, 0xd6, 0x83, 0xe7, 0x26, 0x3b, 0xb7, 0x3b, 0xbd, 0x36, 0xab, 0x85, 0x26,
	0xdd, 0x18, 0x12, 0x6b, 0xc7, 0x6e, 0xd7, 0xf7, 0x9c, 0x23, 0xf1, 0xcf, 0xea, 0x86, 0xe4, 0xf2,
	0xd8, 0xf5, 0x58, 0xfd, 0xc4, 0xb3, 0x3b, 0xec, 0xbd, 0xeb, 0xbd, 0xad, 0xfb, 0x17, 0x3d, 0xc6,
	0x05, 0xcc, 0xfc, 0x1d, 0x50, 0xe1, 0x05, 0xe3, 0xfe, 0x53, 0x9b, 0x33, 0xfd, 0x21, 0xca, 0xbf,
	0xb3, 0xdb, 0x7d, 0xc6, 0x0d, 0xc0, 0x1a, 0x29, 0x6d, 0xad, 0xd7, 0x26, 0xb9, 0xaf, 0x05, 0x9c,
	0x57, 0x01, 0x96, 0x46, 0x14, 0x7d, 0x09, 0xe5, 0xf9, 0x99, 0xdd, 0x63, 0xdc, 0xc8, 0x60, 0x8d,
	0xe4, 0x68, 0xf4, 0x4b, 0x5f, 0x40, 0x39, 0xee, 0xfc, 0xc0, 0xb8, 0xa1, 0x85, 0x66, 0xf1, 0x23,
	0x08, 0x75, 0xe2, 0xb0, 0x76, 0x8b, 0x1b, 0xd9, 0xb4, 0x50, 0x5f, 0x05, 0xb8, 0x6f, 0x7a, 0xec,
	0x98, 0x46, 0x14, 0xf3, 0x27, 0x40, 0xc5, 0xd8, 0xaa, 0xeb, 0x28, 0xdb, 0xb5, 0x3b, 0xcc, 0x00,
	0x0c, 0xa4, 0x48, 0xc3, 0x67, 0xfd, 0x36, 0xca, 0xb5, 0x82, 0x65, 0x1a, 0x19, 0x0c, 0x64, 0x76,
	0x6b, 0x41, 0xf6, 0xbe, 0x6d, 0xfb, 0xf6, 0x8b, 0x8b, 0x1e, 0xa3, 0x02, 0xa2, 0x3f, 0x40, 0xb9,
	0x70, 0x09, 0x86, 0x86, 0x61, 0xda, 0x45, 0x0b, 0x86, 0xf9, 0x5b, 0x19, 0x15, 0x63, 0xa3, 0xbe,
	0x86, 0xca, 0x2d, 0xb7, 0x7f, 0xd4, 0x66, 0x4d, 0xe1, 0x2f, 0x28, 0x22, 0xd0, 0x92, 0xb0, 0x09,
	0xc8, 0x0d, 0x54, 0x3a, 0x69, 0xbb, 0xb6, 0x1f, 0x21, 0x82, 0x4a, 0x65, 0x28, 0x0a, 0x4d, 0x31,
	0xc0, 0xe9, 0xfa, 0xf7, 0xee, 0x36, 0x07, 0x29, 0x69, 0x44, 0xa3, 0x28, 0x34, 0xc5, 0x41, 0xfa,
	0x32, 0x22, 0x28, 0x5f, 0x96, 0x96, 0xfa, 0x12, 0x44, 0xf8, 0xb8, 0xb3, 0x15, 0x21, 0x72, 0x61,
	0xdd, 0x51, 0x68, 0x12, 0x80, 0x75, 0x54, 0x39, 0x71, 0xce, 0x59, 0x2b, 0x76, 0x92, 0xc7, 0x1a,
	0xc9, 0xd3, 0x72, 0x64, 0x4c, 0x82, 0x62, 0x3f, 0x33, 0x58, 0x23, 0x33, 0x11, 0x68, 0xe0, 0xe9,
	0x1a, 0x42, 0x47, 0xae, 0xdb, 0x8e, 0x10, 0x05, 0xac, 0x91, 0x02, 0x2d, 0x06, 0x96, 0x38, 0x59,
	0xee, 0x7b, 0x4e, 0xf7, 0x34, 0x02, 0x14, 0xb1, 0x46, 0x8a, 0xb4, 0x24, 0x6c, 0x71, 0xb2, 0x47,
	0x17, 0x3e, 0xe3, 0x11, 0xa2, 0x8c, 0x35, 0x52, 0xa6, 0x28, 0x34, 0x25, 0x16, 0x1c, 0xa7, 0x51,
	0xc1, 0x1a, 0xa9, 0x88, 0x05, 0x0f, 0xb2, 0xd8, 0x40, 0xb3, 0x3c, 0x99, 0xeb, 0x1c, 0xd6, 0xc8,
	0x1c, 0xad, 0xf0, 0x44, 0xb2, 0x31, 0x2c, 0x5e, 0x77, 0x15, 0x6b, 0xa4, 0x3a, 0x80, 0x49, 0x15,
	0xe6, 0x72, 0xc0, 0x79, 0xac, 0x91, 0x79, 0x5a, 0xe2, 0x52, 0xc0, 0x08, 0x12, 0xfb, 0xd1, 0xb1,
	0x46, 0x74, 0x01, 0x19, 0x78, 0x79, 0x86, 0x2a, 0x1d, 0xc6, 0xb9, 0x7d, 0x3a, 0xe8, 0x86, 0x2b,
	0x61, 0x9f, 0x93, 0xc9, 0xdd, 0x75, 0xe8, 0x39, 0x1d, 0xc7, 0x77, 0xde, 0x89, 0x56, 0xa1, 0xe5,
	0x88, 0x2e, 0xdc, 0x3d, 0x42, 0x2b, 0x72, 0x6f, 0x35, 0xdf, 0x3b, 0xfe, 0x59, 0xb3, 0xc5, 0x4e,
	0xec, 0x7e, 0xdb, 0x37, 0x16, 0x30, 0x10, 0xb0, 0x60, 0x93, 0x2e, 0x49, 0xbd, 0xf6, 0xda, 0xf1,
	0xcf, 0xb6, 0x05, 0x40, 0xb7, 0x90, 0x21, 0xb5, 0x5d, 0x92, 0xbc, 0x88, 0x81, 0x64, 0x2c, 0xd8,
	0xa2, 0x8b, 0xc3, 0x36, 0x1c, 0xe1, 0x4a, 0x4b, 0x4d, 0x72, 0x97, 0x30, 0x10, 0xcd, 0x82, 0x3b,
	0x74, 0x71, 0xb8, 0x72, 0x99, 0xfb, 0x08, 0xad, 0xf4, 0x27, 0x92, 0x97, 0x31, 0x90, 0xac, 0x05,
	0x77, 0xe9, 0x52, 0x5f, 0xcd, 0x16, 0x91, 0x07, 0xfb, 0x90, 0x24, 0x1b, 0x18, 0x48, 0xce, 0x82,
	0xcf, 0xc3, 0xc8, 0xd1, 0xb6, 0xc8, 0xdc, 0x2f, 0xd1, 0x6a, 0x62, 0xab, 0x93, 0xec, 0x15, 0x0c,
	0x24, 0x6f, 0xc1, 0x3d, 0xba, 0x2c, 0xef, 0xbc, 0x8a, 0xaf, 0x8e, 0xbe, 0x8a, 0x81, 0xcc, 0x58,
	0x70, 0x3f, 0xe2, 0x2b, 0xe2, 0x3f, 0x44, 0xcb, 0xc3, 0x83, 0x91, 0x24, 0x5f, 0xc5, 0x40, 0x0a,
	0x56, 0xd6, 0xf7, 0xfa, 0x8c, 0x2e, 0xc4, 0x67, 0x65, 0xa4, 0x6c, 0xf2, 0xb1, 0x49, 0xd2, 0xff,
	0x1f, 0xbc, 0xe6, 0x2c, 0xb0, 0xe9, 0x92, 0x74, 0x8c, 0x64, 0xf6, 0x21, 0x32, 0xa4, 0x13, 0x95,
	0x24, 0x5f, 0xc3, 0x40, 0xca, 0xd6, 0xb2, 0x8d, 0xdb, 0x6e, 0xf7, 0x94, 0x79, 0x38, 0xb2, 0x63,
	0xe1, 0x8a, 0x2e, 0x0e, 0xcf, 0x9d, 0x62, 0x1b, 0xd5, 0xb5, 0xb8, 0x8e, 0x81, 0x54, 0x2c, 0x78,
	0x20, 0xb6, 0x51, 0x51, 0x8a, 0xc7, 0xe8, 0x2a, 0xff, 0x8f, 0x5a, 0xde, 0xc0, 0x40, 0xe6, 0xac,
	0xcc, 0xe6, 0x67, 0xd4, 0xe0, 0x93, 0xaa, 0x19, 0xbb, 0x50, 0x6f, 0x27, 0xc6, 0x40, 0xaa, 0x56,
	0x66, 0x73, 0x73, 0xe0, 0x42, 0xb1, 0xa1, 0x5f, 0xa0, 0x15, 0x3e, 0x71, 0x0d, 0x6b, 0x18, 0xc8,
	0xbc, 0x95, 0xd9, 0xdc, 0xa2, 0x4b, 0x5c, 0xbd, 0x88, 0x88, 0xae, 0x8e, 0x6f, 0x62, 0x20, 0xba,
	0x95, 0xd9, 0xbc, 0x23, 0xe8, 0xe3, 0xd1, 0x6f, 0xe7, 0x0a, 0xad, 0xea, 0x1f, 0x60, 0xfe, 0x55,
	0x46, 0x73, 0x87, 0xf6, 0xf1, 0x5b, 0xd6, 0x1a, 0xaa, 0xc6, 0x86, 0x4a, 0x35, 0x9e, 0x64, 0xaa,
	0x23, 0xca, 0xb1, 0xae, 0x50, 0x8e, 0x10, 0x25, 0xab, 0xc7, 0xba, 0x42, 0x3d, 0x04, 0x48, 0x7a,
	0x33, 0x6d, 0xa8, 0x14, 0x44, 0x04, 0x94, 0x55, 0x64, 0x5d, 0xa1, 0x22, 0xb1, 0xaf, 0xc1, 0x8b,
	0xf0, 0xa6, 0x52, 0x49, 0x42, 0x58, 0x52, 0x4d, 0x6e, 0x2a, 0xd5, 0x44, 0x02, 0x0e, 0x5f, 0xad,
	0x63, 0x8a, 0x12, 0xa2, 0x3e, 0xb2, 0xaa, 0x6c, 0xa8, 0x54, 0x65, 0x58, 0x84, 0x41, 0x36, 0xb7,
	0xd4, 0xca, 0x12, 0x02, 0x47, 0xd4, 0xe5, 0x96, 0x5a, 0x5d, 0x64, 0xa8, 0xb4, 0x03, 0xe3, 0x0a,
	0x23, 0x82, 0xf3, 0x84, 0xac, 0x29, 0x54, 0x66, 0x08, 0xbb, 0x54, 0x9a, 0x4b, 0xa5, 0xb9, 0x54,
	0x9a, 0x4b, 0xa5, 0x49, 0xd0, 0xcd, 0x5f, 0xb2, 0x68, 0x36, 0x79, 0xbe, 0x15, 0x73, 0x09, 0xa4,
	0xce, 0x25, 0x90, 0x36, 0x97, 0x40, 0xea, 0x5c, 0x02, 0xa9, 0x73, 0x09, 0xa4, 0xcf, 0x25, 0x30,
	0xcd, 0x5c, 0x02, 0xa9, 0x73, 0x09, 0xa4, 0xcd, 0x25, 0x90, 0xaa, 0x20, 0x90, 0x3a, 0x97, 0xc0,
	0x34, 0x73, 0x09, 0x4c, 0x37, 0x97, 0xc0, 0x34, 0x73, 0x09, 0xa4, 0xcf, 0x25, 0x30, 0x32, 0x97,
	0x98, 0xcf, 0x51, 0xa9, 0x71, 0xee, 0x7b, 0x76, 0x38, 0x3f, 0x73, 0xdd, 0x1c, 0xa9, 0xc4, 0xdf,
	0x95, 0xf1, 0x52, 0x5c, 0x4f, 0x14, 0xf3, 0x9f, 0xca, 0x48, 0x35, 0xcd, 0x9f, 0x33, 0xa8, 0xd8,
	0xe8, 0xf6, 0x3b, 0x02, 0xfd, 0x35, 0x42, 0xac, 0xdb, 0xef, 0x44, 0xe8, 0xd9, 0x70, 0xfe, 0xbe,
	0x35, 0x59, 0x8b, 0x62, 0x62, 0xed, 0xa9, 0xdb, 0x76, 0x3d, 0x5a, 0x64, 0xb1, 0xa7, 0x37, 0xe8,
	0x8a, 0xc7, 0x7a, 0xcc, 0xf6, 0x59, 0xab, 0x29, 0xb9, 0x0c, 0x14, 0xf8, 0x83, 0x5c, 0xce, 0x0f,
	0xbc, 0xc4, 0x7f, 0x98, 0x2f, 0x51, 0x2e, 0xfc, 0x4f, 0x9f, 0x41, 0x1a, 0x6d, 0x6c, 0x57, 0xff,
	0xa7, 0x23, 0x94, 0x3f, 0xa0, 0x8f, 0xf7, 0x77, 0x1a, 0x55, 0x08, 0x9e, 0xdf, 0x34, 0xf6, 0xf6,
	0x0e, 0x5e, 0x57, 0x33, 0x7a, 0x11, 0xe5, 0x76, 0x68, 0xa3, 0xb1, 0x5f, 0xd5, 0xf4, 0x02, 0xca,
	0x3e, 0xd9, 0x7b, 0xd9, 0xa8, 0x66, 0x03, 0xc0, 0xee, 0xfe, 0xf6, 0xee, 0xce, 0x41, 0x35, 0x17,
	0x3c, 0xbf, 0xda, 0x3d, 0xd8, 0x6b, 0xbc, 0xa8, 0xe6, 0xcd, 0xd7, 0x68, 0x7e, 0xb7, 0xdb, 0x65,
	0xde, 0x33, 0x59, 0x50, 0x53, 0xcf, 0xd6, 0x1a, 0x2a, 0x4b, 0xad, 0xc6, 0xc3, 0x8f, 0x9e, 0x32,
	0x2d, 0x0d, 0x7b, 0x8d, 0x9b, 0xbf, 0x02, 0xd2, 0x9f, 0x39, 0xad, 0x56, 0x9b, 0x25, 0x5c, 0xaf,
	0xa1, 0xb2, 0xd4, 0x11, 0x3c, 0x1a, 0xf5, 0x4b, 0xc3, 0x8e, 0xe0, 0xfa, 0xe1, 0xe8, 0xd7, 0x41,
	0x29, 0xbc, 0xe5, 0xf8, 0x64, 0x72, 0xf9, 0xc6, 0x56, 0x30, 0xf2, 0x81, 0x90, 0xde, 0xf8, 0xe6,
	0x8f, 0x80, 0xca, 0xa3, 0x89, 0xa6, 0xbd, 0x82, 0x9e, 0xab, 0x13, 0xfd, 0x74, 0x72, 0xa2, 0xe3,
	0x05, 0x49, 0x66, 0x6a, 0xfe, 0x09, 0x68, 0x81, 0x46, 0x7b, 0x9f, 0x48, 0xe7, 0x0c, 0xcd, 0x26,
	0x62, 0x71, 0xa3, 0x14, 0x7e, 0x33, 0x3d, 0x9e, 0x1c, 0x4c, 0xe5, 0xa7, 0xb6, 0xcf, 0xf8, 0x88,
	0x89, 0x56, 0xe4, 0x0c, 0xf8, 0xea, 0xb7, 0x48, 0x1f, 0x07, 0x7d, 0x8c, 0x96, 0xb0, 0xbe, 0x47,
	0x45, 0x76, 0x1e, 0x79, 0xd0, 0xa7, 0xb9, 0xb4, 0x32, 0x5a, 0x1f, 0xf8, 0x5d, 0x58, 0x60, 0xe7,
	0x82, 0xf9, 0x64, 0xf7, 0xbb, 0x9d, 0x53, 0xc7, 0x3f, 0xeb, 0x1f, 0xd5, 0x8e, 0xdd, 0x4e, 0x5d,
	0xba, 0x59, 0x54, 0x3f, 0x9e, 0xba, 0xe2, 0xca, 0x51, 0x71, 0x95, 0xf9, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0x52, 0xe3, 0xaf, 0xeb, 0x14, 0x00, 0x00,
}
