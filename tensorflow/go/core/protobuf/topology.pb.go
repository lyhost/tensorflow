// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/tpu/topology.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Describes the geometry of a TPU mesh.
type TopologyProto struct {
	// The dimensions of the TPU topology, in cores. Typically, this is a 3D
	// topology [x, y, core], where the major dimensions correspond to TPU chips,
	// and the minor dimension describes the number of cores on a multicore chip.
	MeshShape []int32 `protobuf:"varint,1,rep,packed,name=mesh_shape,json=meshShape,proto3" json:"mesh_shape,omitempty"`
	// Number of TensorFlow tasks in the cluster.
	NumTasks int32 `protobuf:"varint,2,opt,name=num_tasks,json=numTasks,proto3" json:"num_tasks,omitempty"`
	// Number of TPU devices per task.
	NumTpuDevicesPerTask int32 `protobuf:"varint,3,opt,name=num_tpu_devices_per_task,json=numTpuDevicesPerTask,proto3" json:"num_tpu_devices_per_task,omitempty"`
	// A flattened rank 3 int32 array with shape
	// [num_tasks, num_tpu_devices_per_task, len(mesh_shape)].
	// `tasks` is the number of tasks in the TPU cluster, `devices` is the number
	// of TPU devices per task, and the minor dimension corresponds to a position
	// in the TPU mesh topology. Each entry [task, device, axis] gives the
	// `axis`-th coordinate in the topology of a task/device pair.
	DeviceCoordinates    []int32  `protobuf:"varint,4,rep,packed,name=device_coordinates,json=deviceCoordinates,proto3" json:"device_coordinates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopologyProto) Reset()         { *m = TopologyProto{} }
func (m *TopologyProto) String() string { return proto.CompactTextString(m) }
func (*TopologyProto) ProtoMessage()    {}
func (*TopologyProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db189962177e7ec, []int{0}
}

func (m *TopologyProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopologyProto.Unmarshal(m, b)
}
func (m *TopologyProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopologyProto.Marshal(b, m, deterministic)
}
func (m *TopologyProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopologyProto.Merge(m, src)
}
func (m *TopologyProto) XXX_Size() int {
	return xxx_messageInfo_TopologyProto.Size(m)
}
func (m *TopologyProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TopologyProto.DiscardUnknown(m)
}

var xxx_messageInfo_TopologyProto proto.InternalMessageInfo

func (m *TopologyProto) GetMeshShape() []int32 {
	if m != nil {
		return m.MeshShape
	}
	return nil
}

func (m *TopologyProto) GetNumTasks() int32 {
	if m != nil {
		return m.NumTasks
	}
	return 0
}

func (m *TopologyProto) GetNumTpuDevicesPerTask() int32 {
	if m != nil {
		return m.NumTpuDevicesPerTask
	}
	return 0
}

func (m *TopologyProto) GetDeviceCoordinates() []int32 {
	if m != nil {
		return m.DeviceCoordinates
	}
	return nil
}

func init() {
	proto.RegisterType((*TopologyProto)(nil), "tensorflow.tpu.TopologyProto")
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/tpu/topology.proto", fileDescriptor_2db189962177e7ec)
}

var fileDescriptor_2db189962177e7ec = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x89, 0xb5, 0x62, 0x03, 0x0a, 0x06, 0x0f, 0x01, 0x11, 0x8a, 0xa7, 0x82, 0xb8, 0x39,
	0x08, 0x9e, 0xbc, 0xf8, 0xe7, 0x01, 0x4a, 0xed, 0xc9, 0x4b, 0xd8, 0xdd, 0x4e, 0x77, 0x17, 0xbb,
	0x99, 0x90, 0xcc, 0x28, 0xbe, 0x96, 0x4f, 0xe7, 0x51, 0x92, 0x15, 0x56, 0xa1, 0xb7, 0x7c, 0xdf,
	0xef, 0x17, 0x86, 0x19, 0x79, 0x4d, 0xe0, 0x22, 0x86, 0xed, 0x0e, 0x3f, 0x4c, 0x8d, 0x01, 0x8c,
	0x0f, 0x48, 0x58, 0xf1, 0xd6, 0x90, 0x67, 0x43, 0xe8, 0x71, 0x87, 0xcd, 0x67, 0x91, 0x5b, 0x75,
	0x3a, 0xca, 0x05, 0x79, 0xbe, 0xfa, 0x12, 0xf2, 0x64, 0xfd, 0xab, 0x2c, 0xb3, 0x71, 0x29, 0x65,
	0x0f, 0xb1, 0xb5, 0xb1, 0x2d, 0x3d, 0x68, 0x31, 0x9f, 0x2c, 0xa6, 0xab, 0x59, 0x6a, 0x5e, 0x52,
	0xa1, 0x2e, 0xe4, 0xcc, 0x71, 0x6f, 0xa9, 0x8c, 0x6f, 0x51, 0x1f, 0xcc, 0xc5, 0x62, 0xba, 0x3a,
	0x76, 0xdc, 0xaf, 0x53, 0x56, 0x77, 0x52, 0x67, 0xe8, 0xd9, 0x6e, 0xe0, 0xbd, 0xab, 0x21, 0x5a,
	0x0f, 0x21, 0xcb, 0x7a, 0x92, 0xdd, 0xf3, 0xe4, 0x7a, 0x7e, 0x1e, 0xe8, 0x12, 0x42, 0xfa, 0xa8,
	0x6e, 0xa4, 0x1a, 0x7c, 0x5b, 0x23, 0x86, 0x4d, 0xe7, 0x4a, 0x82, 0xa8, 0x0f, 0xf3, 0xec, 0xb3,
	0x81, 0x3c, 0x8d, 0xe0, 0xf1, 0xe1, 0xf5, 0xbe, 0xe9, 0xa8, 0xe5, 0xaa, 0xa8, 0xb1, 0x37, 0x7f,
	0xd6, 0xdf, 0xff, 0x6c, 0xf0, 0xff, 0x5d, 0xbe, 0x85, 0xa8, 0x8e, 0x72, 0xb8, 0xfd, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x54, 0xb4, 0x01, 0xe6, 0x3d, 0x01, 0x00, 0x00,
}
