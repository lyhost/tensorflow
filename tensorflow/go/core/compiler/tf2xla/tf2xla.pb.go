// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/compiler/tf2xla/tf2xla.proto

package tf2xla

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	framework "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TensorId identifies a tensor in a TensorFlow graph, by specifying the output
// index of a particular node in the graph.  If the output of the named node
// feeds into other node(s), this corresponds to one or more edges.  Otherwise
// it doesn't correspond to any existing edges at all, e.g. for output nodes.
type TensorId struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	OutputIndex          int64    `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TensorId) Reset()         { *m = TensorId{} }
func (m *TensorId) String() string { return proto.CompactTextString(m) }
func (*TensorId) ProtoMessage()    {}
func (*TensorId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3edbe53e0017a9a7, []int{0}
}

func (m *TensorId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TensorId.Unmarshal(m, b)
}
func (m *TensorId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TensorId.Marshal(b, m, deterministic)
}
func (m *TensorId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TensorId.Merge(m, src)
}
func (m *TensorId) XXX_Size() int {
	return xxx_messageInfo_TensorId.Size(m)
}
func (m *TensorId) XXX_DiscardUnknown() {
	xxx_messageInfo_TensorId.DiscardUnknown(m)
}

var xxx_messageInfo_TensorId proto.InternalMessageInfo

func (m *TensorId) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *TensorId) GetOutputIndex() int64 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

// Feed represents a single feed tensor in the graph, which corresponds to an
// input argument for the generated computation.
type Feed struct {
	Id    *TensorId                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Shape *framework.TensorShapeProto `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	Name  string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional data type. This is not normally required, as the graph itself
	// contains this information. However, if the node being fed is an op that is
	// not linked into the binary, then the type cannot be inferred from the node;
	// in this case, the type should be set here.
	Type                 framework.DataType `protobuf:"varint,4,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Feed) Reset()         { *m = Feed{} }
func (m *Feed) String() string { return proto.CompactTextString(m) }
func (*Feed) ProtoMessage()    {}
func (*Feed) Descriptor() ([]byte, []int) {
	return fileDescriptor_3edbe53e0017a9a7, []int{1}
}

func (m *Feed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feed.Unmarshal(m, b)
}
func (m *Feed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feed.Marshal(b, m, deterministic)
}
func (m *Feed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feed.Merge(m, src)
}
func (m *Feed) XXX_Size() int {
	return xxx_messageInfo_Feed.Size(m)
}
func (m *Feed) XXX_DiscardUnknown() {
	xxx_messageInfo_Feed.DiscardUnknown(m)
}

var xxx_messageInfo_Feed proto.InternalMessageInfo

func (m *Feed) GetId() *TensorId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Feed) GetShape() *framework.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Feed) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feed) GetType() framework.DataType {
	if m != nil {
		return m.Type
	}
	return framework.DataType_DT_INVALID
}

// Fetch represents a single fetch tensor in the graph, which corresponds to an
// output argument for the generated computation.
type Fetch struct {
	Id   *TensorId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional shape and data type. If specified, may be used for validation.
	Shape                *framework.TensorShapeProto `protobuf:"bytes,3,opt,name=shape,proto3" json:"shape,omitempty"`
	Type                 framework.DataType          `protobuf:"varint,4,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Fetch) Reset()         { *m = Fetch{} }
func (m *Fetch) String() string { return proto.CompactTextString(m) }
func (*Fetch) ProtoMessage()    {}
func (*Fetch) Descriptor() ([]byte, []int) {
	return fileDescriptor_3edbe53e0017a9a7, []int{2}
}

func (m *Fetch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fetch.Unmarshal(m, b)
}
func (m *Fetch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fetch.Marshal(b, m, deterministic)
}
func (m *Fetch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fetch.Merge(m, src)
}
func (m *Fetch) XXX_Size() int {
	return xxx_messageInfo_Fetch.Size(m)
}
func (m *Fetch) XXX_DiscardUnknown() {
	xxx_messageInfo_Fetch.DiscardUnknown(m)
}

var xxx_messageInfo_Fetch proto.InternalMessageInfo

func (m *Fetch) GetId() *TensorId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Fetch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Fetch) GetShape() *framework.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Fetch) GetType() framework.DataType {
	if m != nil {
		return m.Type
	}
	return framework.DataType_DT_INVALID
}

// Variable represents a resource variable with the given name, shape and type.
type Variable struct {
	NodeName string                      `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Name     string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Shape    *framework.TensorShapeProto `protobuf:"bytes,3,opt,name=shape,proto3" json:"shape,omitempty"`
	Type     framework.DataType          `protobuf:"varint,4,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	// Flag for variables that are never assigned. Assigments to a read-only
	// variable or unassigned variables that are not read-only are invalid.
	Readonly             bool     `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Variable) Reset()         { *m = Variable{} }
func (m *Variable) String() string { return proto.CompactTextString(m) }
func (*Variable) ProtoMessage()    {}
func (*Variable) Descriptor() ([]byte, []int) {
	return fileDescriptor_3edbe53e0017a9a7, []int{3}
}

func (m *Variable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Variable.Unmarshal(m, b)
}
func (m *Variable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Variable.Marshal(b, m, deterministic)
}
func (m *Variable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Variable.Merge(m, src)
}
func (m *Variable) XXX_Size() int {
	return xxx_messageInfo_Variable.Size(m)
}
func (m *Variable) XXX_DiscardUnknown() {
	xxx_messageInfo_Variable.DiscardUnknown(m)
}

var xxx_messageInfo_Variable proto.InternalMessageInfo

func (m *Variable) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Variable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Variable) GetShape() *framework.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Variable) GetType() framework.DataType {
	if m != nil {
		return m.Type
	}
	return framework.DataType_DT_INVALID
}

func (m *Variable) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

// Options used during the conversion and compilation process.
type ConversionOptions struct {
	// When true tf.fake_quant_* ops will be emitted as custom calls to a
	// 'fake_quant_with_min_max_vars' function accepting the input, min, max,
	// num_bits, and narrow_range values as runtime arguments.
	CustomFakeQuantOpCalls bool     `protobuf:"varint,1,opt,name=custom_fake_quant_op_calls,json=customFakeQuantOpCalls,proto3" json:"custom_fake_quant_op_calls,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ConversionOptions) Reset()         { *m = ConversionOptions{} }
func (m *ConversionOptions) String() string { return proto.CompactTextString(m) }
func (*ConversionOptions) ProtoMessage()    {}
func (*ConversionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_3edbe53e0017a9a7, []int{4}
}

func (m *ConversionOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConversionOptions.Unmarshal(m, b)
}
func (m *ConversionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConversionOptions.Marshal(b, m, deterministic)
}
func (m *ConversionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversionOptions.Merge(m, src)
}
func (m *ConversionOptions) XXX_Size() int {
	return xxx_messageInfo_ConversionOptions.Size(m)
}
func (m *ConversionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ConversionOptions proto.InternalMessageInfo

func (m *ConversionOptions) GetCustomFakeQuantOpCalls() bool {
	if m != nil {
		return m.CustomFakeQuantOpCalls
	}
	return false
}

// Config represents configuration information for tf2xla conversion.
type Config struct {
	// Each feed is a positional input argument for the generated computation.
	// The order of each entry matches the order of each input argument.
	Feed []*Feed `protobuf:"bytes,1,rep,name=feed,proto3" json:"feed,omitempty"`
	// Each fetch is a positional output argument for the generated computation.
	// The order of each entry matches the order of each output argument.
	Fetch []*Fetch `protobuf:"bytes,2,rep,name=fetch,proto3" json:"fetch,omitempty"`
	// Each variable is a named input and output of the generated computation.
	Variable []*Variable `protobuf:"bytes,3,rep,name=variable,proto3" json:"variable,omitempty"`
	// Optional conversion options.
	ConversionOptions    *ConversionOptions `protobuf:"bytes,4,opt,name=conversion_options,json=conversionOptions,proto3" json:"conversion_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_3edbe53e0017a9a7, []int{5}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetFeed() []*Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *Config) GetFetch() []*Fetch {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func (m *Config) GetVariable() []*Variable {
	if m != nil {
		return m.Variable
	}
	return nil
}

func (m *Config) GetConversionOptions() *ConversionOptions {
	if m != nil {
		return m.ConversionOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*TensorId)(nil), "tensorflow.tf2xla.TensorId")
	proto.RegisterType((*Feed)(nil), "tensorflow.tf2xla.Feed")
	proto.RegisterType((*Fetch)(nil), "tensorflow.tf2xla.Fetch")
	proto.RegisterType((*Variable)(nil), "tensorflow.tf2xla.Variable")
	proto.RegisterType((*ConversionOptions)(nil), "tensorflow.tf2xla.ConversionOptions")
	proto.RegisterType((*Config)(nil), "tensorflow.tf2xla.Config")
}

func init() {
	proto.RegisterFile("tensorflow/compiler/tf2xla/tf2xla.proto", fileDescriptor_3edbe53e0017a9a7)
}

var fileDescriptor_3edbe53e0017a9a7 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb5, 0xf9, 0xa8, 0xdc, 0x49, 0x85, 0x94, 0x15, 0x1f, 0x56, 0xca, 0x21, 0x44, 0x20,
	0x2c, 0x15, 0x39, 0x92, 0x39, 0x20, 0x71, 0x6c, 0x50, 0xa4, 0x72, 0x20, 0x65, 0x1b, 0x21, 0xc4,
	0xc5, 0xda, 0xd8, 0xe3, 0xc4, 0x8a, 0xed, 0x31, 0xf6, 0xa6, 0x6d, 0x1e, 0x08, 0xde, 0x80, 0x27,
	0xe3, 0xc2, 0x11, 0x79, 0xb7, 0x09, 0xa1, 0xb1, 0xaa, 0x72, 0xe1, 0x94, 0xcd, 0xcc, 0x6f, 0x67,
	0xff, 0xb3, 0xff, 0xf5, 0xc0, 0x4b, 0x85, 0x59, 0x49, 0x45, 0x94, 0xd0, 0xd5, 0x30, 0xa0, 0x34,
	0x8f, 0x13, 0x2c, 0x86, 0x2a, 0xf2, 0xae, 0x13, 0x79, 0xf3, 0xe3, 0xe6, 0x05, 0x29, 0xe2, 0xdd,
	0x3f, 0xa0, 0x6b, 0x12, 0xbd, 0x57, 0x7f, 0xed, 0x2d, 0x70, 0x18, 0x15, 0x32, 0xc5, 0x2b, 0x2a,
	0x96, 0x43, 0x93, 0xf1, 0xcb, 0x85, 0xcc, 0xd1, 0x14, 0xe8, 0xbd, 0xb8, 0x83, 0x5e, 0xe7, 0x58,
	0x1a, 0x6c, 0xf0, 0x1e, 0xac, 0xa9, 0x06, 0xcf, 0x42, 0x7e, 0x0c, 0x87, 0x19, 0x85, 0xe8, 0x67,
	0x32, 0x45, 0x9b, 0xf5, 0x99, 0x73, 0x28, 0xac, 0x2a, 0xf0, 0x41, 0xa6, 0xc8, 0x9f, 0xc1, 0x11,
	0xad, 0x54, 0xbe, 0x52, 0x7e, 0x9c, 0x85, 0x78, 0x6d, 0x37, 0xfa, 0xcc, 0x69, 0x8a, 0x8e, 0x89,
	0x9d, 0x55, 0xa1, 0xc1, 0x37, 0x06, 0xad, 0x31, 0x62, 0xc8, 0x4f, 0xa0, 0x11, 0x87, 0xba, 0x42,
	0xc7, 0x3b, 0x76, 0xf7, 0x3a, 0x71, 0x37, 0x27, 0x8a, 0x46, 0x1c, 0x72, 0x0f, 0xda, 0x5a, 0xb7,
	0xae, 0xd8, 0xf1, 0x9e, 0xee, 0xf2, 0x06, 0xbc, 0xa8, 0xd2, 0xe7, 0x95, 0x5c, 0x61, 0x50, 0xce,
	0xa1, 0xa5, 0x45, 0x36, 0xb5, 0x48, 0xbd, 0xe6, 0x0e, 0xb4, 0xaa, 0xc6, 0xec, 0x56, 0x9f, 0x39,
	0x0f, 0xbc, 0x87, 0xbb, 0x65, 0xde, 0x49, 0x25, 0xa7, 0xeb, 0x1c, 0x85, 0x26, 0x06, 0xdf, 0x19,
	0xb4, 0xc7, 0xa8, 0x82, 0xc5, 0xbf, 0x09, 0xdd, 0x1c, 0xda, 0xd8, 0x39, 0x74, 0x2b, 0xbe, 0x79,
	0x7f, 0xf1, 0xf7, 0x17, 0xfa, 0x83, 0x81, 0xf5, 0x49, 0x16, 0xb1, 0x9c, 0x25, 0x78, 0xb7, 0x3b,
	0xff, 0x5d, 0x1b, 0xef, 0x81, 0x55, 0xa0, 0x0c, 0x29, 0x4b, 0xd6, 0x76, 0xbb, 0xcf, 0x1c, 0x4b,
	0x6c, 0xff, 0x0f, 0x26, 0xd0, 0x1d, 0x51, 0x76, 0x89, 0x45, 0x19, 0x53, 0x36, 0xc9, 0x55, 0x4c,
	0x59, 0xc9, 0xdf, 0x42, 0x2f, 0x58, 0x95, 0x8a, 0x52, 0x3f, 0x92, 0x4b, 0xf4, 0xbf, 0xae, 0x64,
	0xa6, 0x7c, 0xca, 0xfd, 0x40, 0x26, 0x49, 0xa9, 0x1b, 0xb2, 0xc4, 0x63, 0x43, 0x8c, 0xe5, 0x12,
	0x3f, 0x56, 0xf9, 0x49, 0x3e, 0xaa, 0xb2, 0x83, 0x9f, 0x0c, 0x0e, 0x46, 0x94, 0x45, 0xf1, 0x9c,
	0x9f, 0x40, 0x2b, 0x42, 0xac, 0x4c, 0x6b, 0x3a, 0x1d, 0xef, 0x49, 0x8d, 0x69, 0xd5, 0x13, 0x14,
	0x1a, 0xe2, 0x2e, 0xb4, 0xa3, 0xca, 0x68, 0xbb, 0xa1, 0x69, 0xbb, 0x96, 0x56, 0xc1, 0x42, 0x18,
	0x8c, 0xbf, 0x01, 0xeb, 0xf2, 0xe6, 0xbe, 0xed, 0xa6, 0xde, 0x52, 0xf7, 0x2a, 0x36, 0x96, 0x88,
	0x2d, 0xcc, 0x2f, 0x80, 0x07, 0xdb, 0x8e, 0x7d, 0x32, 0x2d, 0xeb, 0x5b, 0xec, 0x78, 0xcf, 0x6b,
	0x4a, 0xec, 0x5d, 0x8f, 0xe8, 0x06, 0xb7, 0x43, 0xa7, 0x04, 0x8f, 0xa8, 0x98, 0xef, 0xef, 0x3e,
	0x3d, 0x9a, 0x46, 0xde, 0xe7, 0x44, 0x6a, 0xe7, 0xca, 0x73, 0xf6, 0x65, 0x34, 0x8f, 0xd5, 0x62,
	0x35, 0x73, 0x03, 0x4a, 0x87, 0x3b, 0x9f, 0x7d, 0xfd, 0x72, 0x4e, 0x66, 0x1e, 0xdc, 0x1a, 0x3f,
	0xbf, 0x18, 0x9b, 0x1d, 0xe8, 0x99, 0xf0, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xc1,
	0xcb, 0x88, 0xa6, 0x04, 0x00, 0x00,
}
