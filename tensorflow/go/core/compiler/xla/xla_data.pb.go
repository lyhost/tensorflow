// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/compiler/xla/xla_data.proto

package xla

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Primitive types are the individual values that can be held in rectangular
// multidimensional arrays. A description of the rectangular multidimensional
// array dimensions / primitive type is given by Shape, below.
type PrimitiveType int32

const (
	// Invalid primitive type to serve as default.
	PrimitiveType_PRIMITIVE_TYPE_INVALID PrimitiveType = 0
	// Predicates are two-state booleans.
	PrimitiveType_PRED PrimitiveType = 1
	// Signed integral values of fixed width.
	PrimitiveType_S8  PrimitiveType = 2
	PrimitiveType_S16 PrimitiveType = 3
	PrimitiveType_S32 PrimitiveType = 4
	PrimitiveType_S64 PrimitiveType = 5
	// Unsigned integral values of fixed width.
	PrimitiveType_U8  PrimitiveType = 6
	PrimitiveType_U16 PrimitiveType = 7
	PrimitiveType_U32 PrimitiveType = 8
	PrimitiveType_U64 PrimitiveType = 9
	// Floating-point values of fixed width.
	//
	// Note: if f16s are not natively supported on the device, they will be
	// converted to f16 from f32 at arbirary points in the computation.
	PrimitiveType_F16 PrimitiveType = 10
	PrimitiveType_F32 PrimitiveType = 11
	// Truncated 16 bit floating-point format. This is similar to IEEE's 16 bit
	// floating-point format, but uses 1 bit for the sign, 8 bits for the exponent
	// and 7 bits for the mantissa.
	PrimitiveType_BF16 PrimitiveType = 16
	PrimitiveType_F64  PrimitiveType = 12
	// Complex values of fixed width.
	PrimitiveType_C64  PrimitiveType = 15
	PrimitiveType_C128 PrimitiveType = 18
	// A tuple is a polymorphic sequence; e.g. a shape that holds different
	// sub-shapes. They are used for things like returning multiple values from a
	// computation; e.g. a computation that returns weights and biases may have a
	// signature that results in a tuple like (f32[784x2000], f32[2000])
	//
	// If a shape proto has the tuple element type, it may not have any entries
	// in the dimensions field.
	PrimitiveType_TUPLE PrimitiveType = 13
	// An opaque type used for passing context-specific data to a custom
	// operation. Shapes of this primitive type will have empty dimensions and
	// tuple_shapes fields.
	//
	// (OPAQUE would be a better name for this identifier, but that conflicts with
	// a macro defined in windows.h.)
	PrimitiveType_OPAQUE_TYPE PrimitiveType = 14
	// A token type threaded between side-effecting operations. Shapes of this
	// primitive type will have empty dimensions and tuple_shapes fields.
	PrimitiveType_TOKEN PrimitiveType = 17
)

var PrimitiveType_name = map[int32]string{
	0:  "PRIMITIVE_TYPE_INVALID",
	1:  "PRED",
	2:  "S8",
	3:  "S16",
	4:  "S32",
	5:  "S64",
	6:  "U8",
	7:  "U16",
	8:  "U32",
	9:  "U64",
	10: "F16",
	11: "F32",
	16: "BF16",
	12: "F64",
	15: "C64",
	18: "C128",
	13: "TUPLE",
	14: "OPAQUE_TYPE",
	17: "TOKEN",
}

var PrimitiveType_value = map[string]int32{
	"PRIMITIVE_TYPE_INVALID": 0,
	"PRED":                   1,
	"S8":                     2,
	"S16":                    3,
	"S32":                    4,
	"S64":                    5,
	"U8":                     6,
	"U16":                    7,
	"U32":                    8,
	"U64":                    9,
	"F16":                    10,
	"F32":                    11,
	"BF16":                   16,
	"F64":                    12,
	"C64":                    15,
	"C128":                   18,
	"TUPLE":                  13,
	"OPAQUE_TYPE":            14,
	"TOKEN":                  17,
}

func (x PrimitiveType) String() string {
	return proto.EnumName(PrimitiveType_name, int32(x))
}

func (PrimitiveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{0}
}

// A format specifies the method used by a layout to store an array in memory.
type Format int32

const (
	// TODO(b/120869032): Rename this to FORMAT_NONE or something else which
	// better corresponds to its meaning.
	Format_INVALID_FORMAT Format = 0
	// The default layout, with exactly one storage location per element.
	Format_DENSE Format = 1
	// A sparsely encoded layout, providing only the index/value pairs of non-zero
	// elements.
	Format_SPARSE Format = 2
)

var Format_name = map[int32]string{
	0: "INVALID_FORMAT",
	1: "DENSE",
	2: "SPARSE",
}

var Format_value = map[string]int32{
	"INVALID_FORMAT": 0,
	"DENSE":          1,
	"SPARSE":         2,
}

func (x Format) String() string {
	return proto.EnumName(Format_name, int32(x))
}

func (Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{1}
}

type FftType int32

const (
	FftType_FFT   FftType = 0
	FftType_IFFT  FftType = 1
	FftType_RFFT  FftType = 2
	FftType_IRFFT FftType = 3
)

var FftType_name = map[int32]string{
	0: "FFT",
	1: "IFFT",
	2: "RFFT",
	3: "IRFFT",
}

var FftType_value = map[string]int32{
	"FFT":   0,
	"IFFT":  1,
	"RFFT":  2,
	"IRFFT": 3,
}

func (x FftType) String() string {
	return proto.EnumName(FftType_name, int32(x))
}

func (FftType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{2}
}

type RandomDistribution int32

const (
	RandomDistribution_RNG_INVALID RandomDistribution = 0
	// Creates a uniform-distribution-generated random number on the semi-open
	// interval [parameter[0], parameter[1]).
	RandomDistribution_RNG_UNIFORM RandomDistribution = 1
	// Creates a normal-distribution-generated random number with mean
	// parameter[0] and standard deviation parameter[1].
	RandomDistribution_RNG_NORMAL RandomDistribution = 2
)

var RandomDistribution_name = map[int32]string{
	0: "RNG_INVALID",
	1: "RNG_UNIFORM",
	2: "RNG_NORMAL",
}

var RandomDistribution_value = map[string]int32{
	"RNG_INVALID": 0,
	"RNG_UNIFORM": 1,
	"RNG_NORMAL":  2,
}

func (x RandomDistribution) String() string {
	return proto.EnumName(RandomDistribution_name, int32(x))
}

func (RandomDistribution) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{3}
}

type ChannelHandle_ChannelType int32

const (
	// Invalid primitive type to serve as default.
	ChannelHandle_CHANNEL_TYPE_INVALID ChannelHandle_ChannelType = 0
	// A channel for sending data between devices.
	ChannelHandle_DEVICE_TO_DEVICE ChannelHandle_ChannelType = 1
	// A channel for sending data from the device to the host. Can only be used
	// with a Send operation.
	ChannelHandle_DEVICE_TO_HOST ChannelHandle_ChannelType = 2
	// A channel for sending data from the host to the device. Can only be used
	// with a Recv operation.
	ChannelHandle_HOST_TO_DEVICE ChannelHandle_ChannelType = 3
)

var ChannelHandle_ChannelType_name = map[int32]string{
	0: "CHANNEL_TYPE_INVALID",
	1: "DEVICE_TO_DEVICE",
	2: "DEVICE_TO_HOST",
	3: "HOST_TO_DEVICE",
}

var ChannelHandle_ChannelType_value = map[string]int32{
	"CHANNEL_TYPE_INVALID": 0,
	"DEVICE_TO_DEVICE":     1,
	"DEVICE_TO_HOST":       2,
	"HOST_TO_DEVICE":       3,
}

func (x ChannelHandle_ChannelType) String() string {
	return proto.EnumName(ChannelHandle_ChannelType_name, int32(x))
}

func (ChannelHandle_ChannelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{11, 0}
}

// Should we transpose or use the adjoint of 'a'?
type TriangularSolveOptions_Transpose int32

const (
	TriangularSolveOptions_TRANSPOSE_INVALID TriangularSolveOptions_Transpose = 0
	TriangularSolveOptions_NO_TRANSPOSE      TriangularSolveOptions_Transpose = 1
	TriangularSolveOptions_TRANSPOSE         TriangularSolveOptions_Transpose = 2
	TriangularSolveOptions_ADJOINT           TriangularSolveOptions_Transpose = 3
)

var TriangularSolveOptions_Transpose_name = map[int32]string{
	0: "TRANSPOSE_INVALID",
	1: "NO_TRANSPOSE",
	2: "TRANSPOSE",
	3: "ADJOINT",
}

var TriangularSolveOptions_Transpose_value = map[string]int32{
	"TRANSPOSE_INVALID": 0,
	"NO_TRANSPOSE":      1,
	"TRANSPOSE":         2,
	"ADJOINT":           3,
}

func (x TriangularSolveOptions_Transpose) String() string {
	return proto.EnumName(TriangularSolveOptions_Transpose_name, int32(x))
}

func (TriangularSolveOptions_Transpose) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{20, 0}
}

type OpSharding_Type int32

const (
	// This sharding is replicated across all devices (implies maximal,
	// all other fields are unused).
	OpSharding_REPLICATED OpSharding_Type = 0
	// This sharding is maximal - one device runs the entire operation.
	OpSharding_MAXIMAL OpSharding_Type = 1
	// This sharding is a tuple - only the tuple_shardings field is valid.
	OpSharding_TUPLE OpSharding_Type = 2
	// None of the above; tile_shape and tile_assignment are both used.
	OpSharding_OTHER OpSharding_Type = 3
)

var OpSharding_Type_name = map[int32]string{
	0: "REPLICATED",
	1: "MAXIMAL",
	2: "TUPLE",
	3: "OTHER",
}

var OpSharding_Type_value = map[string]int32{
	"REPLICATED": 0,
	"MAXIMAL":    1,
	"TUPLE":      2,
	"OTHER":      3,
}

func (x OpSharding_Type) String() string {
	return proto.EnumName(OpSharding_Type_name, int32(x))
}

func (OpSharding_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{22, 0}
}

type PrecisionConfig_Precision int32

const (
	PrecisionConfig_DEFAULT PrecisionConfig_Precision = 0
	PrecisionConfig_HIGH    PrecisionConfig_Precision = 1
	PrecisionConfig_HIGHEST PrecisionConfig_Precision = 2
)

var PrecisionConfig_Precision_name = map[int32]string{
	0: "DEFAULT",
	1: "HIGH",
	2: "HIGHEST",
}

var PrecisionConfig_Precision_value = map[string]int32{
	"DEFAULT": 0,
	"HIGH":    1,
	"HIGHEST": 2,
}

func (x PrecisionConfig_Precision) String() string {
	return proto.EnumName(PrecisionConfig_Precision_name, int32(x))
}

func (PrecisionConfig_Precision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{25, 0}
}

// Describes the padding configuration for Pad operation. The padding amount on
// both edges as well as between the elements are specified for each dimension.
type PaddingConfig struct {
	// The padding configuration for all dimensions.
	Dimensions           []*PaddingConfig_PaddingConfigDimension `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *PaddingConfig) Reset()         { *m = PaddingConfig{} }
func (m *PaddingConfig) String() string { return proto.CompactTextString(m) }
func (*PaddingConfig) ProtoMessage()    {}
func (*PaddingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{0}
}

func (m *PaddingConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaddingConfig.Unmarshal(m, b)
}
func (m *PaddingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaddingConfig.Marshal(b, m, deterministic)
}
func (m *PaddingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaddingConfig.Merge(m, src)
}
func (m *PaddingConfig) XXX_Size() int {
	return xxx_messageInfo_PaddingConfig.Size(m)
}
func (m *PaddingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PaddingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PaddingConfig proto.InternalMessageInfo

func (m *PaddingConfig) GetDimensions() []*PaddingConfig_PaddingConfigDimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

// Describes the padding configuration for a dimension.
type PaddingConfig_PaddingConfigDimension struct {
	// Padding amount on the low-end (next to the index 0). May be negative.
	EdgePaddingLow int64 `protobuf:"varint,1,opt,name=edge_padding_low,json=edgePaddingLow,proto3" json:"edge_padding_low,omitempty"`
	// Padding amount on the high-end (next to the highest index). May be
	// negative.
	EdgePaddingHigh int64 `protobuf:"varint,2,opt,name=edge_padding_high,json=edgePaddingHigh,proto3" json:"edge_padding_high,omitempty"`
	// Padding amount between the elements. May not be negative.
	InteriorPadding      int64    `protobuf:"varint,3,opt,name=interior_padding,json=interiorPadding,proto3" json:"interior_padding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaddingConfig_PaddingConfigDimension) Reset()         { *m = PaddingConfig_PaddingConfigDimension{} }
func (m *PaddingConfig_PaddingConfigDimension) String() string { return proto.CompactTextString(m) }
func (*PaddingConfig_PaddingConfigDimension) ProtoMessage()    {}
func (*PaddingConfig_PaddingConfigDimension) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{0, 0}
}

func (m *PaddingConfig_PaddingConfigDimension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaddingConfig_PaddingConfigDimension.Unmarshal(m, b)
}
func (m *PaddingConfig_PaddingConfigDimension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaddingConfig_PaddingConfigDimension.Marshal(b, m, deterministic)
}
func (m *PaddingConfig_PaddingConfigDimension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaddingConfig_PaddingConfigDimension.Merge(m, src)
}
func (m *PaddingConfig_PaddingConfigDimension) XXX_Size() int {
	return xxx_messageInfo_PaddingConfig_PaddingConfigDimension.Size(m)
}
func (m *PaddingConfig_PaddingConfigDimension) XXX_DiscardUnknown() {
	xxx_messageInfo_PaddingConfig_PaddingConfigDimension.DiscardUnknown(m)
}

var xxx_messageInfo_PaddingConfig_PaddingConfigDimension proto.InternalMessageInfo

func (m *PaddingConfig_PaddingConfigDimension) GetEdgePaddingLow() int64 {
	if m != nil {
		return m.EdgePaddingLow
	}
	return 0
}

func (m *PaddingConfig_PaddingConfigDimension) GetEdgePaddingHigh() int64 {
	if m != nil {
		return m.EdgePaddingHigh
	}
	return 0
}

func (m *PaddingConfig_PaddingConfigDimension) GetInteriorPadding() int64 {
	if m != nil {
		return m.InteriorPadding
	}
	return 0
}

// Describes a tile used in tiling-based layout. Refer to
// g3doc/third_party/tensorflow/compiler/xla/g3doc/layout_with_tiling.md for
// details about tiling-based layout.
type TileProto struct {
	// Number of elements in each dimension of the tile. It's ordered from the
	// most major dimension of the tile to the most minor dimension of the tile.
	// The dimensions correspond to a suffix of the dimensions of the shape being
	// tiled.
	Dimensions           []int64  `protobuf:"varint,1,rep,packed,name=dimensions,proto3" json:"dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TileProto) Reset()         { *m = TileProto{} }
func (m *TileProto) String() string { return proto.CompactTextString(m) }
func (*TileProto) ProtoMessage()    {}
func (*TileProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{1}
}

func (m *TileProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TileProto.Unmarshal(m, b)
}
func (m *TileProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TileProto.Marshal(b, m, deterministic)
}
func (m *TileProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TileProto.Merge(m, src)
}
func (m *TileProto) XXX_Size() int {
	return xxx_messageInfo_TileProto.Size(m)
}
func (m *TileProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TileProto.DiscardUnknown(m)
}

var xxx_messageInfo_TileProto proto.InternalMessageInfo

func (m *TileProto) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

// A layout describes how the array is placed in (1D) memory space.  This
// includes the minor-to-major ordering of dimensions within a shape.
//
// Clients must specify the layouts of input Literals to the
// computation. Layouts specified in interior operations which take Shapes (for
// example, Convert) are ignored.
//
// See the XLA documentation for more information on shapes and layouts.
//
// LINT.IfChange
type LayoutProto struct {
	// The method used to store the data in memory. The format determines which of
	// the other fields are used by the layout.
	Format Format `protobuf:"varint,4,opt,name=format,proto3,enum=xla.Format" json:"format,omitempty"`
	// Sequence of dimension numbers, from minor (fastest varying index) to major
	// (slowest varying index). This field is required.
	MinorToMajor []int64 `protobuf:"varint,1,rep,packed,name=minor_to_major,json=minorToMajor,proto3" json:"minor_to_major,omitempty"`
	// The maximum number of elements that can be stored for SPARSE formats.  This
	// can be used to determine the maximum size in bytes of arrays stored in
	// memory.  This field must be unset unless the format is SPARSE.
	MaxSparseElements int64 `protobuf:"varint,5,opt,name=max_sparse_elements,json=maxSparseElements,proto3" json:"max_sparse_elements,omitempty"`
	// A sequence of tiles, starting from the tile that's applied first to the
	// Shape.
	//
	// TODO(b/119839262): implement tiling in each backend or add Unimplemented
	// error.
	Tiles []*TileProto `protobuf:"bytes,6,rep,name=tiles,proto3" json:"tiles,omitempty"`
	// Bit size of each element. If the size is bigger than what the element
	// type requires, the value is stored in the least significant
	// bits and the additional most significant bits are filled with 0's.
	//
	// TODO(b/119839262): implement in each backend or add Unimplemented error.
	ElementSizeInBits int64 `protobuf:"varint,7,opt,name=element_size_in_bits,json=elementSizeInBits,proto3" json:"element_size_in_bits,omitempty"`
	// Memory space where this array resides. The integer field is interpreted in
	// a backend-specific manner.
	MemorySpace          int64    `protobuf:"varint,8,opt,name=memory_space,json=memorySpace,proto3" json:"memory_space,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LayoutProto) Reset()         { *m = LayoutProto{} }
func (m *LayoutProto) String() string { return proto.CompactTextString(m) }
func (*LayoutProto) ProtoMessage()    {}
func (*LayoutProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{2}
}

func (m *LayoutProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LayoutProto.Unmarshal(m, b)
}
func (m *LayoutProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LayoutProto.Marshal(b, m, deterministic)
}
func (m *LayoutProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LayoutProto.Merge(m, src)
}
func (m *LayoutProto) XXX_Size() int {
	return xxx_messageInfo_LayoutProto.Size(m)
}
func (m *LayoutProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LayoutProto.DiscardUnknown(m)
}

var xxx_messageInfo_LayoutProto proto.InternalMessageInfo

func (m *LayoutProto) GetFormat() Format {
	if m != nil {
		return m.Format
	}
	return Format_INVALID_FORMAT
}

func (m *LayoutProto) GetMinorToMajor() []int64 {
	if m != nil {
		return m.MinorToMajor
	}
	return nil
}

func (m *LayoutProto) GetMaxSparseElements() int64 {
	if m != nil {
		return m.MaxSparseElements
	}
	return 0
}

func (m *LayoutProto) GetTiles() []*TileProto {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *LayoutProto) GetElementSizeInBits() int64 {
	if m != nil {
		return m.ElementSizeInBits
	}
	return 0
}

func (m *LayoutProto) GetMemorySpace() int64 {
	if m != nil {
		return m.MemorySpace
	}
	return 0
}

// A shape describes the number of dimensions in the array, the size of each
// dimension, and the primitive component type.
//
// Tuples are a special case in that they have rank zero and have tuple_shapes
// defined.
//
// See the XLA documentation for more information on shapes and layouts.
//
// LINT.IfChange
type ShapeProto struct {
	// The element type for this shape.
	ElementType PrimitiveType `protobuf:"varint,2,opt,name=element_type,json=elementType,proto3,enum=xla.PrimitiveType" json:"element_type,omitempty"`
	// The size (number of elements) for each dimension, or an upper bound on the
	// size if the dimension is dynamic.  In XLA, dimensions are numbered from 0
	// to N-1 for an N-dimensional array. The first element of 'dimensions' is the
	// size of dimension 0, the second element is the size of dimension 1, and so
	// forth.  Empty list indicates a scalar.
	//
	// If the respective element in 'is_dimension_dynamic' is true then the value
	// in this field represents an upper bound on the size of the dimension.
	Dimensions []int64 `protobuf:"varint,3,rep,packed,name=dimensions,proto3" json:"dimensions,omitempty"`
	// For tuples only, the shapes of constituent shapes in the tuple sequence.
	TupleShapes []*ShapeProto `protobuf:"bytes,4,rep,name=tuple_shapes,json=tupleShapes,proto3" json:"tuple_shapes,omitempty"`
	// The layout used to back this shape.
	Layout *LayoutProto `protobuf:"bytes,5,opt,name=layout,proto3" json:"layout,omitempty"`
	// For arrays, this indicates whether or not each dimension is
	// dynamically-sized. The number of elements in this repeated field should be
	// zero (indicating that no dimensions are dynamic) or equal to the number of
	// elements in the 'dimensions' field.
	IsDynamicDimension   []bool   `protobuf:"varint,6,rep,packed,name=is_dynamic_dimension,json=isDynamicDimension,proto3" json:"is_dynamic_dimension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShapeProto) Reset()         { *m = ShapeProto{} }
func (m *ShapeProto) String() string { return proto.CompactTextString(m) }
func (*ShapeProto) ProtoMessage()    {}
func (*ShapeProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{3}
}

func (m *ShapeProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShapeProto.Unmarshal(m, b)
}
func (m *ShapeProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShapeProto.Marshal(b, m, deterministic)
}
func (m *ShapeProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShapeProto.Merge(m, src)
}
func (m *ShapeProto) XXX_Size() int {
	return xxx_messageInfo_ShapeProto.Size(m)
}
func (m *ShapeProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ShapeProto.DiscardUnknown(m)
}

var xxx_messageInfo_ShapeProto proto.InternalMessageInfo

func (m *ShapeProto) GetElementType() PrimitiveType {
	if m != nil {
		return m.ElementType
	}
	return PrimitiveType_PRIMITIVE_TYPE_INVALID
}

func (m *ShapeProto) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ShapeProto) GetTupleShapes() []*ShapeProto {
	if m != nil {
		return m.TupleShapes
	}
	return nil
}

func (m *ShapeProto) GetLayout() *LayoutProto {
	if m != nil {
		return m.Layout
	}
	return nil
}

func (m *ShapeProto) GetIsDynamicDimension() []bool {
	if m != nil {
		return m.IsDynamicDimension
	}
	return nil
}

// Shape of the parameters and output of a computation (like a traditional
// function signature).
type ProgramShapeProto struct {
	Parameters           []*ShapeProto `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Result               *ShapeProto   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ParameterNames       []string      `protobuf:"bytes,3,rep,name=parameter_names,json=parameterNames,proto3" json:"parameter_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ProgramShapeProto) Reset()         { *m = ProgramShapeProto{} }
func (m *ProgramShapeProto) String() string { return proto.CompactTextString(m) }
func (*ProgramShapeProto) ProtoMessage()    {}
func (*ProgramShapeProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{4}
}

func (m *ProgramShapeProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProgramShapeProto.Unmarshal(m, b)
}
func (m *ProgramShapeProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProgramShapeProto.Marshal(b, m, deterministic)
}
func (m *ProgramShapeProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProgramShapeProto.Merge(m, src)
}
func (m *ProgramShapeProto) XXX_Size() int {
	return xxx_messageInfo_ProgramShapeProto.Size(m)
}
func (m *ProgramShapeProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ProgramShapeProto.DiscardUnknown(m)
}

var xxx_messageInfo_ProgramShapeProto proto.InternalMessageInfo

func (m *ProgramShapeProto) GetParameters() []*ShapeProto {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ProgramShapeProto) GetResult() *ShapeProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProgramShapeProto) GetParameterNames() []string {
	if m != nil {
		return m.ParameterNames
	}
	return nil
}

// Statistics of a computation.
type ComputationStats struct {
	// The number of floating point operations in the computation.
	FlopCount float64 `protobuf:"fixed64,1,opt,name=flop_count,json=flopCount,proto3" json:"flop_count,omitempty"`
	// The number of transcendental operations (e.g., exp) in the computation.
	TranscendentalCount  float64  `protobuf:"fixed64,2,opt,name=transcendental_count,json=transcendentalCount,proto3" json:"transcendental_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputationStats) Reset()         { *m = ComputationStats{} }
func (m *ComputationStats) String() string { return proto.CompactTextString(m) }
func (*ComputationStats) ProtoMessage()    {}
func (*ComputationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{5}
}

func (m *ComputationStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputationStats.Unmarshal(m, b)
}
func (m *ComputationStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputationStats.Marshal(b, m, deterministic)
}
func (m *ComputationStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputationStats.Merge(m, src)
}
func (m *ComputationStats) XXX_Size() int {
	return xxx_messageInfo_ComputationStats.Size(m)
}
func (m *ComputationStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputationStats.DiscardUnknown(m)
}

var xxx_messageInfo_ComputationStats proto.InternalMessageInfo

func (m *ComputationStats) GetFlopCount() float64 {
	if m != nil {
		return m.FlopCount
	}
	return 0
}

func (m *ComputationStats) GetTranscendentalCount() float64 {
	if m != nil {
		return m.TranscendentalCount
	}
	return 0
}

// Symbolization metadata for HLO Instructions.
//
// This metadata is used for debugging XLA code generation, as well as
// performance profiling of XLA-generated executables.
type OpMetadata struct {
	// The framework op name that generated this XLA op.
	//
	// Frameworks that build on top of XLA should mirror the names of their ops
	// back to users by specifying the op_type. In this way, even if the
	// framework's "ops" are implemented as multiple XLA HLO Ops, they can be
	// grouped appropriately. (e.g. if a SoftMax layer is emitted into XLA as
	// multiple ops, then each op should have the op_type be "SoftMax".)
	OpType string `protobuf:"bytes,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	// The user-specified name of the op.
	//
	// This name is often unique within a computation. Note: some frameworks
	// add auto-generated names if the user does not provide one.
	OpName string `protobuf:"bytes,2,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	// Indicate a file and line that this op is associated to in a user's program.
	//
	// e.g. it could be the file and line of user code that generated the op.
	SourceFile           string   `protobuf:"bytes,3,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	SourceLine           int32    `protobuf:"varint,4,opt,name=source_line,json=sourceLine,proto3" json:"source_line,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpMetadata) Reset()         { *m = OpMetadata{} }
func (m *OpMetadata) String() string { return proto.CompactTextString(m) }
func (*OpMetadata) ProtoMessage()    {}
func (*OpMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{6}
}

func (m *OpMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpMetadata.Unmarshal(m, b)
}
func (m *OpMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpMetadata.Marshal(b, m, deterministic)
}
func (m *OpMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpMetadata.Merge(m, src)
}
func (m *OpMetadata) XXX_Size() int {
	return xxx_messageInfo_OpMetadata.Size(m)
}
func (m *OpMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_OpMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_OpMetadata proto.InternalMessageInfo

func (m *OpMetadata) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *OpMetadata) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *OpMetadata) GetSourceFile() string {
	if m != nil {
		return m.SourceFile
	}
	return ""
}

func (m *OpMetadata) GetSourceLine() int32 {
	if m != nil {
		return m.SourceLine
	}
	return 0
}

// Profile data from the execution of a computation.
type ExecutionProfile struct {
	// Whether the executable was read from the compilation cache.
	CompilationCacheHit bool `protobuf:"varint,1,opt,name=compilation_cache_hit,json=compilationCacheHit,proto3" json:"compilation_cache_hit,omitempty"`
	// The time in milliseconds spent to compile the computation. This only set if
	// the executable was not read from the compilation cache
	// (compilation_cache_hit == false).
	CompileTimeMs int64 `protobuf:"varint,2,opt,name=compile_time_ms,json=compileTimeMs,proto3" json:"compile_time_ms,omitempty"`
	// The number of cycles spent for the computation. This does not include the
	// time taken for the data transfers between the host and the device. This is
	// a target-dependent field and only used for debugging purposes.
	ComputeCycleCount int64 `protobuf:"varint,3,opt,name=compute_cycle_count,json=computeCycleCount,proto3" json:"compute_cycle_count,omitempty"`
	// The time in nanoseconds spent for the computation, without data transfer.
	ComputeTimeNs int64 `protobuf:"varint,4,opt,name=compute_time_ns,json=computeTimeNs,proto3" json:"compute_time_ns,omitempty"`
	// The time in nanoseconds spent for the entire computation, including the
	// result data transfer time. Current implementation does not spend any cycles
	// for the input data transfer since the memory is initialized with the proper
	// values before the execution.
	ComputeAndTransferTimeNs int64 `protobuf:"varint,5,opt,name=compute_and_transfer_time_ns,json=computeAndTransferTimeNs,proto3" json:"compute_and_transfer_time_ns,omitempty"`
	// The size of the binary code in the executable.
	ExecutableSizeInBytes int64    `protobuf:"varint,6,opt,name=executable_size_in_bytes,json=executableSizeInBytes,proto3" json:"executable_size_in_bytes,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ExecutionProfile) Reset()         { *m = ExecutionProfile{} }
func (m *ExecutionProfile) String() string { return proto.CompactTextString(m) }
func (*ExecutionProfile) ProtoMessage()    {}
func (*ExecutionProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{7}
}

func (m *ExecutionProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionProfile.Unmarshal(m, b)
}
func (m *ExecutionProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionProfile.Marshal(b, m, deterministic)
}
func (m *ExecutionProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionProfile.Merge(m, src)
}
func (m *ExecutionProfile) XXX_Size() int {
	return xxx_messageInfo_ExecutionProfile.Size(m)
}
func (m *ExecutionProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionProfile.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionProfile proto.InternalMessageInfo

func (m *ExecutionProfile) GetCompilationCacheHit() bool {
	if m != nil {
		return m.CompilationCacheHit
	}
	return false
}

func (m *ExecutionProfile) GetCompileTimeMs() int64 {
	if m != nil {
		return m.CompileTimeMs
	}
	return 0
}

func (m *ExecutionProfile) GetComputeCycleCount() int64 {
	if m != nil {
		return m.ComputeCycleCount
	}
	return 0
}

func (m *ExecutionProfile) GetComputeTimeNs() int64 {
	if m != nil {
		return m.ComputeTimeNs
	}
	return 0
}

func (m *ExecutionProfile) GetComputeAndTransferTimeNs() int64 {
	if m != nil {
		return m.ComputeAndTransferTimeNs
	}
	return 0
}

func (m *ExecutionProfile) GetExecutableSizeInBytes() int64 {
	if m != nil {
		return m.ExecutableSizeInBytes
	}
	return 0
}

// Handle given to a user that represents an execution that the user launched
// asynchronously on the device.
type ExecutionHandle struct {
	Handle               int64    `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecutionHandle) Reset()         { *m = ExecutionHandle{} }
func (m *ExecutionHandle) String() string { return proto.CompactTextString(m) }
func (*ExecutionHandle) ProtoMessage()    {}
func (*ExecutionHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{8}
}

func (m *ExecutionHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutionHandle.Unmarshal(m, b)
}
func (m *ExecutionHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutionHandle.Marshal(b, m, deterministic)
}
func (m *ExecutionHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionHandle.Merge(m, src)
}
func (m *ExecutionHandle) XXX_Size() int {
	return xxx_messageInfo_ExecutionHandle.Size(m)
}
func (m *ExecutionHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionHandle.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionHandle proto.InternalMessageInfo

func (m *ExecutionHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a globally accessible allocation.
// Contrast this against a ComputationDataHandle, which is not globally
// accessible, since it only exists within a specific computation.
type GlobalDataHandle struct {
	Handle               int64    `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GlobalDataHandle) Reset()         { *m = GlobalDataHandle{} }
func (m *GlobalDataHandle) String() string { return proto.CompactTextString(m) }
func (*GlobalDataHandle) ProtoMessage()    {}
func (*GlobalDataHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{9}
}

func (m *GlobalDataHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalDataHandle.Unmarshal(m, b)
}
func (m *GlobalDataHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalDataHandle.Marshal(b, m, deterministic)
}
func (m *GlobalDataHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalDataHandle.Merge(m, src)
}
func (m *GlobalDataHandle) XXX_Size() int {
	return xxx_messageInfo_GlobalDataHandle.Size(m)
}
func (m *GlobalDataHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalDataHandle.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalDataHandle proto.InternalMessageInfo

func (m *GlobalDataHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a replicated virtual device. Each
// replicated device represents N physical devices for execution where N is the
// number of replicas.
type DeviceHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// The number of model-parallel virtual devices that communicate via XLA
	// Send/Recv instructions.
	DeviceCount          int64    `protobuf:"varint,2,opt,name=device_count,json=deviceCount,proto3" json:"device_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceHandle) Reset()         { *m = DeviceHandle{} }
func (m *DeviceHandle) String() string { return proto.CompactTextString(m) }
func (*DeviceHandle) ProtoMessage()    {}
func (*DeviceHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{10}
}

func (m *DeviceHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceHandle.Unmarshal(m, b)
}
func (m *DeviceHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceHandle.Marshal(b, m, deterministic)
}
func (m *DeviceHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceHandle.Merge(m, src)
}
func (m *DeviceHandle) XXX_Size() int {
	return xxx_messageInfo_DeviceHandle.Size(m)
}
func (m *DeviceHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceHandle.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceHandle proto.InternalMessageInfo

func (m *DeviceHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *DeviceHandle) GetDeviceCount() int64 {
	if m != nil {
		return m.DeviceCount
	}
	return 0
}

// Handle given to a user to represent a channel between two computations
// via a Send and Recv instruction pair. Channels are unbuffered, so Send
// Send instructions will be blocked until the data is transferred.
type ChannelHandle struct {
	Handle               int64                     `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	Type                 ChannelHandle_ChannelType `protobuf:"varint,2,opt,name=type,proto3,enum=xla.ChannelHandle_ChannelType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ChannelHandle) Reset()         { *m = ChannelHandle{} }
func (m *ChannelHandle) String() string { return proto.CompactTextString(m) }
func (*ChannelHandle) ProtoMessage()    {}
func (*ChannelHandle) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{11}
}

func (m *ChannelHandle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelHandle.Unmarshal(m, b)
}
func (m *ChannelHandle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelHandle.Marshal(b, m, deterministic)
}
func (m *ChannelHandle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelHandle.Merge(m, src)
}
func (m *ChannelHandle) XXX_Size() int {
	return xxx_messageInfo_ChannelHandle.Size(m)
}
func (m *ChannelHandle) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelHandle.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelHandle proto.InternalMessageInfo

func (m *ChannelHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *ChannelHandle) GetType() ChannelHandle_ChannelType {
	if m != nil {
		return m.Type
	}
	return ChannelHandle_CHANNEL_TYPE_INVALID
}

// DeviceAssignmentProto is a serialized form of DeviceAssignment class, which
// represents the device ids assigned to a set of replicated computations.
// See xla::DeviceAssignment class comment for more details.
type DeviceAssignmentProto struct {
	ReplicaCount         int32                                      `protobuf:"varint,1,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	ComputationCount     int32                                      `protobuf:"varint,2,opt,name=computation_count,json=computationCount,proto3" json:"computation_count,omitempty"`
	ComputationDevices   []*DeviceAssignmentProto_ComputationDevice `protobuf:"bytes,3,rep,name=computation_devices,json=computationDevices,proto3" json:"computation_devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *DeviceAssignmentProto) Reset()         { *m = DeviceAssignmentProto{} }
func (m *DeviceAssignmentProto) String() string { return proto.CompactTextString(m) }
func (*DeviceAssignmentProto) ProtoMessage()    {}
func (*DeviceAssignmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{12}
}

func (m *DeviceAssignmentProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceAssignmentProto.Unmarshal(m, b)
}
func (m *DeviceAssignmentProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceAssignmentProto.Marshal(b, m, deterministic)
}
func (m *DeviceAssignmentProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceAssignmentProto.Merge(m, src)
}
func (m *DeviceAssignmentProto) XXX_Size() int {
	return xxx_messageInfo_DeviceAssignmentProto.Size(m)
}
func (m *DeviceAssignmentProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceAssignmentProto.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceAssignmentProto proto.InternalMessageInfo

func (m *DeviceAssignmentProto) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *DeviceAssignmentProto) GetComputationCount() int32 {
	if m != nil {
		return m.ComputationCount
	}
	return 0
}

func (m *DeviceAssignmentProto) GetComputationDevices() []*DeviceAssignmentProto_ComputationDevice {
	if m != nil {
		return m.ComputationDevices
	}
	return nil
}

// Each logical computation runs on replica_count physical devices.
// ComputationDevice represents the device ids assinged to the replicas.
type DeviceAssignmentProto_ComputationDevice struct {
	ReplicaDeviceIds     []int32  `protobuf:"varint,1,rep,packed,name=replica_device_ids,json=replicaDeviceIds,proto3" json:"replica_device_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceAssignmentProto_ComputationDevice) Reset() {
	*m = DeviceAssignmentProto_ComputationDevice{}
}
func (m *DeviceAssignmentProto_ComputationDevice) String() string { return proto.CompactTextString(m) }
func (*DeviceAssignmentProto_ComputationDevice) ProtoMessage()    {}
func (*DeviceAssignmentProto_ComputationDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{12, 0}
}

func (m *DeviceAssignmentProto_ComputationDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceAssignmentProto_ComputationDevice.Unmarshal(m, b)
}
func (m *DeviceAssignmentProto_ComputationDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceAssignmentProto_ComputationDevice.Marshal(b, m, deterministic)
}
func (m *DeviceAssignmentProto_ComputationDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceAssignmentProto_ComputationDevice.Merge(m, src)
}
func (m *DeviceAssignmentProto_ComputationDevice) XXX_Size() int {
	return xxx_messageInfo_DeviceAssignmentProto_ComputationDevice.Size(m)
}
func (m *DeviceAssignmentProto_ComputationDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceAssignmentProto_ComputationDevice.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceAssignmentProto_ComputationDevice proto.InternalMessageInfo

func (m *DeviceAssignmentProto_ComputationDevice) GetReplicaDeviceIds() []int32 {
	if m != nil {
		return m.ReplicaDeviceIds
	}
	return nil
}

// Literals are used when the server and client need to exchange materialized
// data / results. Literals are also used to describe constants used in
// computations.
//
// Transfers to/from the client are encoded in literal form, and the structure
// of the repeated fields is implied by the shape.
type LiteralProto struct {
	Shape         *ShapeProto     `protobuf:"bytes,1,opt,name=shape,proto3" json:"shape,omitempty"`
	Preds         []bool          `protobuf:"varint,2,rep,packed,name=preds,proto3" json:"preds,omitempty"`
	S8S           []byte          `protobuf:"bytes,15,opt,name=s8s,proto3" json:"s8s,omitempty"`
	U8S           []byte          `protobuf:"bytes,3,opt,name=u8s,proto3" json:"u8s,omitempty"`
	S32S          []int32         `protobuf:"varint,4,rep,packed,name=s32s,proto3" json:"s32s,omitempty"`
	S64S          []int64         `protobuf:"varint,5,rep,packed,name=s64s,proto3" json:"s64s,omitempty"`
	U32S          []uint32        `protobuf:"varint,6,rep,packed,name=u32s,proto3" json:"u32s,omitempty"`
	U64S          []uint64        `protobuf:"varint,7,rep,packed,name=u64s,proto3" json:"u64s,omitempty"`
	F32S          []float32       `protobuf:"fixed32,8,rep,packed,name=f32s,proto3" json:"f32s,omitempty"`
	F64S          []float64       `protobuf:"fixed64,9,rep,packed,name=f64s,proto3" json:"f64s,omitempty"`
	C64S          []float32       `protobuf:"fixed32,12,rep,packed,name=c64s,proto3" json:"c64s,omitempty"`
	C128S         []float64       `protobuf:"fixed64,18,rep,packed,name=c128s,proto3" json:"c128s,omitempty"`
	TupleLiterals []*LiteralProto `protobuf:"bytes,10,rep,name=tuple_literals,json=tupleLiterals,proto3" json:"tuple_literals,omitempty"`
	// The F16s, BF16s, U16s and S16s are encoded in little endian byte order
	F16S                 []byte   `protobuf:"bytes,11,opt,name=f16s,proto3" json:"f16s,omitempty"`
	Bf16S                []byte   `protobuf:"bytes,13,opt,name=bf16s,proto3" json:"bf16s,omitempty"`
	U16S                 []byte   `protobuf:"bytes,16,opt,name=u16s,proto3" json:"u16s,omitempty"`
	S16S                 []byte   `protobuf:"bytes,17,opt,name=s16s,proto3" json:"s16s,omitempty"`
	SparseIndices        []int64  `protobuf:"varint,14,rep,packed,name=sparse_indices,json=sparseIndices,proto3" json:"sparse_indices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiteralProto) Reset()         { *m = LiteralProto{} }
func (m *LiteralProto) String() string { return proto.CompactTextString(m) }
func (*LiteralProto) ProtoMessage()    {}
func (*LiteralProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{13}
}

func (m *LiteralProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LiteralProto.Unmarshal(m, b)
}
func (m *LiteralProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LiteralProto.Marshal(b, m, deterministic)
}
func (m *LiteralProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiteralProto.Merge(m, src)
}
func (m *LiteralProto) XXX_Size() int {
	return xxx_messageInfo_LiteralProto.Size(m)
}
func (m *LiteralProto) XXX_DiscardUnknown() {
	xxx_messageInfo_LiteralProto.DiscardUnknown(m)
}

var xxx_messageInfo_LiteralProto proto.InternalMessageInfo

func (m *LiteralProto) GetShape() *ShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *LiteralProto) GetPreds() []bool {
	if m != nil {
		return m.Preds
	}
	return nil
}

func (m *LiteralProto) GetS8S() []byte {
	if m != nil {
		return m.S8S
	}
	return nil
}

func (m *LiteralProto) GetU8S() []byte {
	if m != nil {
		return m.U8S
	}
	return nil
}

func (m *LiteralProto) GetS32S() []int32 {
	if m != nil {
		return m.S32S
	}
	return nil
}

func (m *LiteralProto) GetS64S() []int64 {
	if m != nil {
		return m.S64S
	}
	return nil
}

func (m *LiteralProto) GetU32S() []uint32 {
	if m != nil {
		return m.U32S
	}
	return nil
}

func (m *LiteralProto) GetU64S() []uint64 {
	if m != nil {
		return m.U64S
	}
	return nil
}

func (m *LiteralProto) GetF32S() []float32 {
	if m != nil {
		return m.F32S
	}
	return nil
}

func (m *LiteralProto) GetF64S() []float64 {
	if m != nil {
		return m.F64S
	}
	return nil
}

func (m *LiteralProto) GetC64S() []float32 {
	if m != nil {
		return m.C64S
	}
	return nil
}

func (m *LiteralProto) GetC128S() []float64 {
	if m != nil {
		return m.C128S
	}
	return nil
}

func (m *LiteralProto) GetTupleLiterals() []*LiteralProto {
	if m != nil {
		return m.TupleLiterals
	}
	return nil
}

func (m *LiteralProto) GetF16S() []byte {
	if m != nil {
		return m.F16S
	}
	return nil
}

func (m *LiteralProto) GetBf16S() []byte {
	if m != nil {
		return m.Bf16S
	}
	return nil
}

func (m *LiteralProto) GetU16S() []byte {
	if m != nil {
		return m.U16S
	}
	return nil
}

func (m *LiteralProto) GetS16S() []byte {
	if m != nil {
		return m.S16S
	}
	return nil
}

func (m *LiteralProto) GetSparseIndices() []int64 {
	if m != nil {
		return m.SparseIndices
	}
	return nil
}

type WindowDimension struct {
	// The size of the window in this dimension. For a rectangle, this would be
	// the width or height.
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The stride at which the window moves across the base area in this
	// dimension. In other words, this is the spacing between different
	// positions of the window in this dimension.
	Stride int64 `protobuf:"varint,2,opt,name=stride,proto3" json:"stride,omitempty"`
	// If positive, means the amount of padding to add to the base area at the low
	// end of this dimension; if negative, its negative means the number of
	// elements removed from the low end of this dimension. For example, in the
	// horizontal dimension of a rectangle, this would be the number of padding
	// values to pad on the left, given that indices increase when going right.
	// The actual padding value depends upon the context. Convolution pads with
	// zeros. ReduceWindow and SelectAndScatter pads with the reduce function's
	// init value.
	PaddingLow int64 `protobuf:"varint,3,opt,name=padding_low,json=paddingLow,proto3" json:"padding_low,omitempty"`
	// As padding_low, but on the high end of this dimension. For example, in the
	// horizontal dimension of a rectangle, this would be the number of values to
	// pad on the right, given that indices increase when going right.
	PaddingHigh int64 `protobuf:"varint,4,opt,name=padding_high,json=paddingHigh,proto3" json:"padding_high,omitempty"`
	// Dilation factor of the sliding window in this dimension. A dilation factor
	// of 1 means no dilation. window_dilation - 1 no-op entries ("holes") are
	// implicitly placed between each kernel element. This value may not be less
	// than 1. See documentation for convolution.
	WindowDilation int64 `protobuf:"varint,5,opt,name=window_dilation,json=windowDilation,proto3" json:"window_dilation,omitempty"`
	// Dilation factor of the base area in this dimension. A dilation factor of 1
	// means no dilation. base_dilation - 1 no-op entries ("holes") are implicitly
	// placed between each base area element. This value may not be less than 1.
	// See documentation for convolution.
	BaseDilation int64 `protobuf:"varint,6,opt,name=base_dilation,json=baseDilation,proto3" json:"base_dilation,omitempty"`
	// Window reversal means that this dimension was logically reversed before the
	// operation.
	WindowReversal       bool     `protobuf:"varint,7,opt,name=window_reversal,json=windowReversal,proto3" json:"window_reversal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WindowDimension) Reset()         { *m = WindowDimension{} }
func (m *WindowDimension) String() string { return proto.CompactTextString(m) }
func (*WindowDimension) ProtoMessage()    {}
func (*WindowDimension) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{14}
}

func (m *WindowDimension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WindowDimension.Unmarshal(m, b)
}
func (m *WindowDimension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WindowDimension.Marshal(b, m, deterministic)
}
func (m *WindowDimension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowDimension.Merge(m, src)
}
func (m *WindowDimension) XXX_Size() int {
	return xxx_messageInfo_WindowDimension.Size(m)
}
func (m *WindowDimension) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowDimension.DiscardUnknown(m)
}

var xxx_messageInfo_WindowDimension proto.InternalMessageInfo

func (m *WindowDimension) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *WindowDimension) GetStride() int64 {
	if m != nil {
		return m.Stride
	}
	return 0
}

func (m *WindowDimension) GetPaddingLow() int64 {
	if m != nil {
		return m.PaddingLow
	}
	return 0
}

func (m *WindowDimension) GetPaddingHigh() int64 {
	if m != nil {
		return m.PaddingHigh
	}
	return 0
}

func (m *WindowDimension) GetWindowDilation() int64 {
	if m != nil {
		return m.WindowDilation
	}
	return 0
}

func (m *WindowDimension) GetBaseDilation() int64 {
	if m != nil {
		return m.BaseDilation
	}
	return 0
}

func (m *WindowDimension) GetWindowReversal() bool {
	if m != nil {
		return m.WindowReversal
	}
	return false
}

// Describes the windowing in an operation such as convolution.
//
// The window is moved across a base area and for each position of the
// window a computation is performed. The field below describes the
// window and the movement of the window across a base area.
type Window struct {
	Dimensions           []*WindowDimension `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Window) Reset()         { *m = Window{} }
func (m *Window) String() string { return proto.CompactTextString(m) }
func (*Window) ProtoMessage()    {}
func (*Window) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{15}
}

func (m *Window) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Window.Unmarshal(m, b)
}
func (m *Window) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Window.Marshal(b, m, deterministic)
}
func (m *Window) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Window.Merge(m, src)
}
func (m *Window) XXX_Size() int {
	return xxx_messageInfo_Window.Size(m)
}
func (m *Window) XXX_DiscardUnknown() {
	xxx_messageInfo_Window.DiscardUnknown(m)
}

var xxx_messageInfo_Window proto.InternalMessageInfo

func (m *Window) GetDimensions() []*WindowDimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

// Describes the dimension numbers for a gather operation.
//
// See https://www.tensorflow.org/performance/xla/operation_semantics#gather for
// more details.
type GatherDimensionNumbers struct {
	// "Window indices" is a term for a set of indices that index into the
	// interior of a dynamic-slice from the input tensor, the starting indices for
	// which were computed from output_gather_dims (see the operation semantic for
	// how this is defined) and the start_indices tensor.
	//
	// The window indices for a specific output index Out is computed as:
	//
	//  i = 0
	//  for (k : [0, input_tensor_shape.rank))
	//    window_indices[k] =
	//      if k in collapsed_slice_dims
	//      then 0
	//      else Out[offset_dims[i++]]
	OffsetDims         []int64 `protobuf:"varint,1,rep,packed,name=offset_dims,json=offsetDims,proto3" json:"offset_dims,omitempty"`
	CollapsedSliceDims []int64 `protobuf:"varint,2,rep,packed,name=collapsed_slice_dims,json=collapsedSliceDims,proto3" json:"collapsed_slice_dims,omitempty"`
	// This is interpreted as a map from i to start_index_map[i]. It
	// transforms the gather index looked up from the start_indices tensor into
	// the starting index in the input space.
	StartIndexMap []int64 `protobuf:"varint,3,rep,packed,name=start_index_map,json=startIndexMap,proto3" json:"start_index_map,omitempty"`
	// The dimension in the start_indices input that contains the starting
	// indices.
	IndexVectorDim       int64    `protobuf:"varint,4,opt,name=index_vector_dim,json=indexVectorDim,proto3" json:"index_vector_dim,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatherDimensionNumbers) Reset()         { *m = GatherDimensionNumbers{} }
func (m *GatherDimensionNumbers) String() string { return proto.CompactTextString(m) }
func (*GatherDimensionNumbers) ProtoMessage()    {}
func (*GatherDimensionNumbers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{16}
}

func (m *GatherDimensionNumbers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatherDimensionNumbers.Unmarshal(m, b)
}
func (m *GatherDimensionNumbers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatherDimensionNumbers.Marshal(b, m, deterministic)
}
func (m *GatherDimensionNumbers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatherDimensionNumbers.Merge(m, src)
}
func (m *GatherDimensionNumbers) XXX_Size() int {
	return xxx_messageInfo_GatherDimensionNumbers.Size(m)
}
func (m *GatherDimensionNumbers) XXX_DiscardUnknown() {
	xxx_messageInfo_GatherDimensionNumbers.DiscardUnknown(m)
}

var xxx_messageInfo_GatherDimensionNumbers proto.InternalMessageInfo

func (m *GatherDimensionNumbers) GetOffsetDims() []int64 {
	if m != nil {
		return m.OffsetDims
	}
	return nil
}

func (m *GatherDimensionNumbers) GetCollapsedSliceDims() []int64 {
	if m != nil {
		return m.CollapsedSliceDims
	}
	return nil
}

func (m *GatherDimensionNumbers) GetStartIndexMap() []int64 {
	if m != nil {
		return m.StartIndexMap
	}
	return nil
}

func (m *GatherDimensionNumbers) GetIndexVectorDim() int64 {
	if m != nil {
		return m.IndexVectorDim
	}
	return 0
}

// Describes the dimension numbers for a scatter operation.
//
// All the fields are similar to the corresponding fields in
// GatherDimensionNumbers. Differences are noted below.
type ScatterDimensionNumbers struct {
	// The set of dimensions in the updates shape that are window dimensions.
	UpdateWindowDims []int64 `protobuf:"varint,1,rep,packed,name=update_window_dims,json=updateWindowDims,proto3" json:"update_window_dims,omitempty"`
	// The set of window dimensions that must be inserted into the updates shape.
	InsertedWindowDims       []int64  `protobuf:"varint,2,rep,packed,name=inserted_window_dims,json=insertedWindowDims,proto3" json:"inserted_window_dims,omitempty"`
	ScatterDimsToOperandDims []int64  `protobuf:"varint,3,rep,packed,name=scatter_dims_to_operand_dims,json=scatterDimsToOperandDims,proto3" json:"scatter_dims_to_operand_dims,omitempty"`
	IndexVectorDim           int64    `protobuf:"varint,4,opt,name=index_vector_dim,json=indexVectorDim,proto3" json:"index_vector_dim,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *ScatterDimensionNumbers) Reset()         { *m = ScatterDimensionNumbers{} }
func (m *ScatterDimensionNumbers) String() string { return proto.CompactTextString(m) }
func (*ScatterDimensionNumbers) ProtoMessage()    {}
func (*ScatterDimensionNumbers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{17}
}

func (m *ScatterDimensionNumbers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScatterDimensionNumbers.Unmarshal(m, b)
}
func (m *ScatterDimensionNumbers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScatterDimensionNumbers.Marshal(b, m, deterministic)
}
func (m *ScatterDimensionNumbers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScatterDimensionNumbers.Merge(m, src)
}
func (m *ScatterDimensionNumbers) XXX_Size() int {
	return xxx_messageInfo_ScatterDimensionNumbers.Size(m)
}
func (m *ScatterDimensionNumbers) XXX_DiscardUnknown() {
	xxx_messageInfo_ScatterDimensionNumbers.DiscardUnknown(m)
}

var xxx_messageInfo_ScatterDimensionNumbers proto.InternalMessageInfo

func (m *ScatterDimensionNumbers) GetUpdateWindowDims() []int64 {
	if m != nil {
		return m.UpdateWindowDims
	}
	return nil
}

func (m *ScatterDimensionNumbers) GetInsertedWindowDims() []int64 {
	if m != nil {
		return m.InsertedWindowDims
	}
	return nil
}

func (m *ScatterDimensionNumbers) GetScatterDimsToOperandDims() []int64 {
	if m != nil {
		return m.ScatterDimsToOperandDims
	}
	return nil
}

func (m *ScatterDimensionNumbers) GetIndexVectorDim() int64 {
	if m != nil {
		return m.IndexVectorDim
	}
	return 0
}

type ConvolutionDimensionNumbers struct {
	// The number of the dimension that represents batch in the input.
	InputBatchDimension int64 `protobuf:"varint,7,opt,name=input_batch_dimension,json=inputBatchDimension,proto3" json:"input_batch_dimension,omitempty"`
	// The number of the dimension that represents features in the input.
	InputFeatureDimension int64 `protobuf:"varint,8,opt,name=input_feature_dimension,json=inputFeatureDimension,proto3" json:"input_feature_dimension,omitempty"`
	// The dimension numbers for the spatial dimensions that the window
	// moves through in the input.
	InputSpatialDimensions []int64 `protobuf:"varint,11,rep,packed,name=input_spatial_dimensions,json=inputSpatialDimensions,proto3" json:"input_spatial_dimensions,omitempty"`
	// The number of the dimension that represents input features in the
	// convolutional kernel (rhs).
	KernelInputFeatureDimension int64 `protobuf:"varint,3,opt,name=kernel_input_feature_dimension,json=kernelInputFeatureDimension,proto3" json:"kernel_input_feature_dimension,omitempty"`
	// The number of the dimension that represents output features in
	// the convolutional kernel (rhs).
	KernelOutputFeatureDimension int64 `protobuf:"varint,4,opt,name=kernel_output_feature_dimension,json=kernelOutputFeatureDimension,proto3" json:"kernel_output_feature_dimension,omitempty"`
	// The dimension numbers for the spatial dimensions that the window
	// moves through in the kernel (rhs). window.strides(0) is the
	// stride in the kernel_spatial_dimensions(0) dimension.
	KernelSpatialDimensions []int64 `protobuf:"varint,6,rep,packed,name=kernel_spatial_dimensions,json=kernelSpatialDimensions,proto3" json:"kernel_spatial_dimensions,omitempty"`
	// The number of the dimension that represents batch in the output.
	OutputBatchDimension int64 `protobuf:"varint,9,opt,name=output_batch_dimension,json=outputBatchDimension,proto3" json:"output_batch_dimension,omitempty"`
	// The number of the dimension that represents features in the output.
	OutputFeatureDimension int64 `protobuf:"varint,10,opt,name=output_feature_dimension,json=outputFeatureDimension,proto3" json:"output_feature_dimension,omitempty"`
	// The dimension numbers for the spatial dimensions that the window
	// moves through in the output.
	OutputSpatialDimensions []int64  `protobuf:"varint,12,rep,packed,name=output_spatial_dimensions,json=outputSpatialDimensions,proto3" json:"output_spatial_dimensions,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ConvolutionDimensionNumbers) Reset()         { *m = ConvolutionDimensionNumbers{} }
func (m *ConvolutionDimensionNumbers) String() string { return proto.CompactTextString(m) }
func (*ConvolutionDimensionNumbers) ProtoMessage()    {}
func (*ConvolutionDimensionNumbers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{18}
}

func (m *ConvolutionDimensionNumbers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvolutionDimensionNumbers.Unmarshal(m, b)
}
func (m *ConvolutionDimensionNumbers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvolutionDimensionNumbers.Marshal(b, m, deterministic)
}
func (m *ConvolutionDimensionNumbers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvolutionDimensionNumbers.Merge(m, src)
}
func (m *ConvolutionDimensionNumbers) XXX_Size() int {
	return xxx_messageInfo_ConvolutionDimensionNumbers.Size(m)
}
func (m *ConvolutionDimensionNumbers) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvolutionDimensionNumbers.DiscardUnknown(m)
}

var xxx_messageInfo_ConvolutionDimensionNumbers proto.InternalMessageInfo

func (m *ConvolutionDimensionNumbers) GetInputBatchDimension() int64 {
	if m != nil {
		return m.InputBatchDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetInputFeatureDimension() int64 {
	if m != nil {
		return m.InputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetInputSpatialDimensions() []int64 {
	if m != nil {
		return m.InputSpatialDimensions
	}
	return nil
}

func (m *ConvolutionDimensionNumbers) GetKernelInputFeatureDimension() int64 {
	if m != nil {
		return m.KernelInputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetKernelOutputFeatureDimension() int64 {
	if m != nil {
		return m.KernelOutputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetKernelSpatialDimensions() []int64 {
	if m != nil {
		return m.KernelSpatialDimensions
	}
	return nil
}

func (m *ConvolutionDimensionNumbers) GetOutputBatchDimension() int64 {
	if m != nil {
		return m.OutputBatchDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetOutputFeatureDimension() int64 {
	if m != nil {
		return m.OutputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetOutputSpatialDimensions() []int64 {
	if m != nil {
		return m.OutputSpatialDimensions
	}
	return nil
}

type DotDimensionNumbers struct {
	// The dimension numbers that represent the 'lhs' contracting dimensions.
	LhsContractingDimensions []int64 `protobuf:"varint,1,rep,packed,name=lhs_contracting_dimensions,json=lhsContractingDimensions,proto3" json:"lhs_contracting_dimensions,omitempty"`
	// The dimension numbers that represent the 'rhs' contracting dimensions.
	RhsContractingDimensions []int64 `protobuf:"varint,2,rep,packed,name=rhs_contracting_dimensions,json=rhsContractingDimensions,proto3" json:"rhs_contracting_dimensions,omitempty"`
	// The dimension numbers that represent the 'lhs' batch dimensions.
	LhsBatchDimensions []int64 `protobuf:"varint,3,rep,packed,name=lhs_batch_dimensions,json=lhsBatchDimensions,proto3" json:"lhs_batch_dimensions,omitempty"`
	// The dimension numbers that represent the 'rhs' batch dimensions.
	RhsBatchDimensions   []int64  `protobuf:"varint,4,rep,packed,name=rhs_batch_dimensions,json=rhsBatchDimensions,proto3" json:"rhs_batch_dimensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DotDimensionNumbers) Reset()         { *m = DotDimensionNumbers{} }
func (m *DotDimensionNumbers) String() string { return proto.CompactTextString(m) }
func (*DotDimensionNumbers) ProtoMessage()    {}
func (*DotDimensionNumbers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{19}
}

func (m *DotDimensionNumbers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DotDimensionNumbers.Unmarshal(m, b)
}
func (m *DotDimensionNumbers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DotDimensionNumbers.Marshal(b, m, deterministic)
}
func (m *DotDimensionNumbers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DotDimensionNumbers.Merge(m, src)
}
func (m *DotDimensionNumbers) XXX_Size() int {
	return xxx_messageInfo_DotDimensionNumbers.Size(m)
}
func (m *DotDimensionNumbers) XXX_DiscardUnknown() {
	xxx_messageInfo_DotDimensionNumbers.DiscardUnknown(m)
}

var xxx_messageInfo_DotDimensionNumbers proto.InternalMessageInfo

func (m *DotDimensionNumbers) GetLhsContractingDimensions() []int64 {
	if m != nil {
		return m.LhsContractingDimensions
	}
	return nil
}

func (m *DotDimensionNumbers) GetRhsContractingDimensions() []int64 {
	if m != nil {
		return m.RhsContractingDimensions
	}
	return nil
}

func (m *DotDimensionNumbers) GetLhsBatchDimensions() []int64 {
	if m != nil {
		return m.LhsBatchDimensions
	}
	return nil
}

func (m *DotDimensionNumbers) GetRhsBatchDimensions() []int64 {
	if m != nil {
		return m.RhsBatchDimensions
	}
	return nil
}

type TriangularSolveOptions struct {
	// If true, solves ax = b. If false, solves xa = b.
	LeftSide bool `protobuf:"varint,1,opt,name=left_side,json=leftSide,proto3" json:"left_side,omitempty"`
	// If true, 'a' is lower triangular. If false, 'a' is upper triangular.
	Lower bool `protobuf:"varint,2,opt,name=lower,proto3" json:"lower,omitempty"`
	// If true, the diagonal elements of 'a' are assumed to be 1 and not accessed.
	UnitDiagonal         bool                             `protobuf:"varint,3,opt,name=unit_diagonal,json=unitDiagonal,proto3" json:"unit_diagonal,omitempty"`
	TransposeA           TriangularSolveOptions_Transpose `protobuf:"varint,4,opt,name=transpose_a,json=transposeA,proto3,enum=xla.TriangularSolveOptions_Transpose" json:"transpose_a,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *TriangularSolveOptions) Reset()         { *m = TriangularSolveOptions{} }
func (m *TriangularSolveOptions) String() string { return proto.CompactTextString(m) }
func (*TriangularSolveOptions) ProtoMessage()    {}
func (*TriangularSolveOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{20}
}

func (m *TriangularSolveOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriangularSolveOptions.Unmarshal(m, b)
}
func (m *TriangularSolveOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriangularSolveOptions.Marshal(b, m, deterministic)
}
func (m *TriangularSolveOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriangularSolveOptions.Merge(m, src)
}
func (m *TriangularSolveOptions) XXX_Size() int {
	return xxx_messageInfo_TriangularSolveOptions.Size(m)
}
func (m *TriangularSolveOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TriangularSolveOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TriangularSolveOptions proto.InternalMessageInfo

func (m *TriangularSolveOptions) GetLeftSide() bool {
	if m != nil {
		return m.LeftSide
	}
	return false
}

func (m *TriangularSolveOptions) GetLower() bool {
	if m != nil {
		return m.Lower
	}
	return false
}

func (m *TriangularSolveOptions) GetUnitDiagonal() bool {
	if m != nil {
		return m.UnitDiagonal
	}
	return false
}

func (m *TriangularSolveOptions) GetTransposeA() TriangularSolveOptions_Transpose {
	if m != nil {
		return m.TransposeA
	}
	return TriangularSolveOptions_TRANSPOSE_INVALID
}

type CholeskyOptions struct {
	// If true, uses the lower triangle of `a`. If false, uses the upper triangle
	// of `a`.
	Lower                bool     `protobuf:"varint,1,opt,name=lower,proto3" json:"lower,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CholeskyOptions) Reset()         { *m = CholeskyOptions{} }
func (m *CholeskyOptions) String() string { return proto.CompactTextString(m) }
func (*CholeskyOptions) ProtoMessage()    {}
func (*CholeskyOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{21}
}

func (m *CholeskyOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CholeskyOptions.Unmarshal(m, b)
}
func (m *CholeskyOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CholeskyOptions.Marshal(b, m, deterministic)
}
func (m *CholeskyOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CholeskyOptions.Merge(m, src)
}
func (m *CholeskyOptions) XXX_Size() int {
	return xxx_messageInfo_CholeskyOptions.Size(m)
}
func (m *CholeskyOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CholeskyOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CholeskyOptions proto.InternalMessageInfo

func (m *CholeskyOptions) GetLower() bool {
	if m != nil {
		return m.Lower
	}
	return false
}

type OpSharding struct {
	Type OpSharding_Type `protobuf:"varint,1,opt,name=type,proto3,enum=xla.OpSharding_Type" json:"type,omitempty"`
	// The shape of the sharded tile.
	TileShape *ShapeProto `protobuf:"bytes,2,opt,name=tile_shape,json=tileShape,proto3" json:"tile_shape,omitempty"`
	// The shape of the tile assignment tensor - this must be the same rank as
	// tile_shape and the product of its dimensions must equal
	// tile_assignment_devices.size().
	TileAssignmentDimensions []int64 `protobuf:"varint,3,rep,packed,name=tile_assignment_dimensions,json=tileAssignmentDimensions,proto3" json:"tile_assignment_dimensions,omitempty"`
	// Flattened list of device IDs. The order of flattening is the same as used
	// by IndexUtil::MultiToLinearIndex(tile_assignment_shape).
	TileAssignmentDevices []int64 `protobuf:"varint,4,rep,packed,name=tile_assignment_devices,json=tileAssignmentDevices,proto3" json:"tile_assignment_devices,omitempty"`
	// If type == TUPLE, the sub-shardings, one per leaf node in the tuple shape,
	// in pre-order. The tuple shape could be nested; here we store just a
	// flattened list of all leaves in the tuple shape. Note that the tuple shape
	// is not stored here; shardings do not store the shapes to which they are
	// applied, this is inferred from the instruction this sharding gets attached
	// to.
	TupleShardings       []*OpSharding `protobuf:"bytes,5,rep,name=tuple_shardings,json=tupleShardings,proto3" json:"tuple_shardings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *OpSharding) Reset()         { *m = OpSharding{} }
func (m *OpSharding) String() string { return proto.CompactTextString(m) }
func (*OpSharding) ProtoMessage()    {}
func (*OpSharding) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{22}
}

func (m *OpSharding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpSharding.Unmarshal(m, b)
}
func (m *OpSharding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpSharding.Marshal(b, m, deterministic)
}
func (m *OpSharding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpSharding.Merge(m, src)
}
func (m *OpSharding) XXX_Size() int {
	return xxx_messageInfo_OpSharding.Size(m)
}
func (m *OpSharding) XXX_DiscardUnknown() {
	xxx_messageInfo_OpSharding.DiscardUnknown(m)
}

var xxx_messageInfo_OpSharding proto.InternalMessageInfo

func (m *OpSharding) GetType() OpSharding_Type {
	if m != nil {
		return m.Type
	}
	return OpSharding_REPLICATED
}

func (m *OpSharding) GetTileShape() *ShapeProto {
	if m != nil {
		return m.TileShape
	}
	return nil
}

func (m *OpSharding) GetTileAssignmentDimensions() []int64 {
	if m != nil {
		return m.TileAssignmentDimensions
	}
	return nil
}

func (m *OpSharding) GetTileAssignmentDevices() []int64 {
	if m != nil {
		return m.TileAssignmentDevices
	}
	return nil
}

func (m *OpSharding) GetTupleShardings() []*OpSharding {
	if m != nil {
		return m.TupleShardings
	}
	return nil
}

// Describes the replica groups in a cross replica op (e.g., all-reduce and
// all-to-all).
type ReplicaGroup struct {
	// The ids of the replicas that belongs to the same group. The ordering of the
	// ids matters in some ops (e.g., all-to-all).
	ReplicaIds           []int64  `protobuf:"varint,1,rep,packed,name=replica_ids,json=replicaIds,proto3" json:"replica_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplicaGroup) Reset()         { *m = ReplicaGroup{} }
func (m *ReplicaGroup) String() string { return proto.CompactTextString(m) }
func (*ReplicaGroup) ProtoMessage()    {}
func (*ReplicaGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{23}
}

func (m *ReplicaGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplicaGroup.Unmarshal(m, b)
}
func (m *ReplicaGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplicaGroup.Marshal(b, m, deterministic)
}
func (m *ReplicaGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaGroup.Merge(m, src)
}
func (m *ReplicaGroup) XXX_Size() int {
	return xxx_messageInfo_ReplicaGroup.Size(m)
}
func (m *ReplicaGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaGroup proto.InternalMessageInfo

func (m *ReplicaGroup) GetReplicaIds() []int64 {
	if m != nil {
		return m.ReplicaIds
	}
	return nil
}

// Describes the source target pair in the collective permute op.
type SourceTarget struct {
	Source               int64    `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Target               int64    `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceTarget) Reset()         { *m = SourceTarget{} }
func (m *SourceTarget) String() string { return proto.CompactTextString(m) }
func (*SourceTarget) ProtoMessage()    {}
func (*SourceTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{24}
}

func (m *SourceTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceTarget.Unmarshal(m, b)
}
func (m *SourceTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceTarget.Marshal(b, m, deterministic)
}
func (m *SourceTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceTarget.Merge(m, src)
}
func (m *SourceTarget) XXX_Size() int {
	return xxx_messageInfo_SourceTarget.Size(m)
}
func (m *SourceTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceTarget.DiscardUnknown(m)
}

var xxx_messageInfo_SourceTarget proto.InternalMessageInfo

func (m *SourceTarget) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *SourceTarget) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

// Used to indicate the precision configuration. It has backend specific
// meaning.
type PrecisionConfig struct {
	OperandPrecision     []PrecisionConfig_Precision `protobuf:"varint,1,rep,packed,name=operand_precision,json=operandPrecision,proto3,enum=xla.PrecisionConfig_Precision" json:"operand_precision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PrecisionConfig) Reset()         { *m = PrecisionConfig{} }
func (m *PrecisionConfig) String() string { return proto.CompactTextString(m) }
func (*PrecisionConfig) ProtoMessage()    {}
func (*PrecisionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{25}
}

func (m *PrecisionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrecisionConfig.Unmarshal(m, b)
}
func (m *PrecisionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrecisionConfig.Marshal(b, m, deterministic)
}
func (m *PrecisionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrecisionConfig.Merge(m, src)
}
func (m *PrecisionConfig) XXX_Size() int {
	return xxx_messageInfo_PrecisionConfig.Size(m)
}
func (m *PrecisionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PrecisionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PrecisionConfig proto.InternalMessageInfo

func (m *PrecisionConfig) GetOperandPrecision() []PrecisionConfig_Precision {
	if m != nil {
		return m.OperandPrecision
	}
	return nil
}

// Describes whether all data-parallelism replicas will receive the same
// parameter data at each buffer.
type ParameterReplication struct {
	// A list of boolean values for the flattened leaf buffers. Each value
	// indicates whether the corresponding leaf buffer is replicated.
	//
	// If this field is empty, it means no buffer is replicated. Otherwise, the
	// number of elements in this field must match the number of leaf buffers in
	// the HLO instruction's shape.
	ReplicatedAtLeafBuffers []bool   `protobuf:"varint,1,rep,packed,name=replicated_at_leaf_buffers,json=replicatedAtLeafBuffers,proto3" json:"replicated_at_leaf_buffers,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ParameterReplication) Reset()         { *m = ParameterReplication{} }
func (m *ParameterReplication) String() string { return proto.CompactTextString(m) }
func (*ParameterReplication) ProtoMessage()    {}
func (*ParameterReplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{26}
}

func (m *ParameterReplication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParameterReplication.Unmarshal(m, b)
}
func (m *ParameterReplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParameterReplication.Marshal(b, m, deterministic)
}
func (m *ParameterReplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParameterReplication.Merge(m, src)
}
func (m *ParameterReplication) XXX_Size() int {
	return xxx_messageInfo_ParameterReplication.Size(m)
}
func (m *ParameterReplication) XXX_DiscardUnknown() {
	xxx_messageInfo_ParameterReplication.DiscardUnknown(m)
}

var xxx_messageInfo_ParameterReplication proto.InternalMessageInfo

func (m *ParameterReplication) GetReplicatedAtLeafBuffers() []bool {
	if m != nil {
		return m.ReplicatedAtLeafBuffers
	}
	return nil
}

// A backend-config for kWhile loops that stores the loop's trip count, if it is
// known.
//
// This is useful for backends that can implement a `for i in 0..N` loop more
// efficiently than a `while` loop.  For example, on GPUs, we can implement a
// `for i in 0..N` loop by enqueueing the kernels for the loop body N times,
// whereas implementing a `while` loop requires a host-device sync on each
// iteration.
type WhileLoopBackendConfig struct {
	// This indirection lets us distinguish between known-trip-count == 0 and
	// unknown-trip-count.
	KnownTripCount       *WhileLoopBackendConfig_KnownTripCount `protobuf:"bytes,1,opt,name=known_trip_count,json=knownTripCount,proto3" json:"known_trip_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *WhileLoopBackendConfig) Reset()         { *m = WhileLoopBackendConfig{} }
func (m *WhileLoopBackendConfig) String() string { return proto.CompactTextString(m) }
func (*WhileLoopBackendConfig) ProtoMessage()    {}
func (*WhileLoopBackendConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{27}
}

func (m *WhileLoopBackendConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhileLoopBackendConfig.Unmarshal(m, b)
}
func (m *WhileLoopBackendConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhileLoopBackendConfig.Marshal(b, m, deterministic)
}
func (m *WhileLoopBackendConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhileLoopBackendConfig.Merge(m, src)
}
func (m *WhileLoopBackendConfig) XXX_Size() int {
	return xxx_messageInfo_WhileLoopBackendConfig.Size(m)
}
func (m *WhileLoopBackendConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WhileLoopBackendConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WhileLoopBackendConfig proto.InternalMessageInfo

func (m *WhileLoopBackendConfig) GetKnownTripCount() *WhileLoopBackendConfig_KnownTripCount {
	if m != nil {
		return m.KnownTripCount
	}
	return nil
}

type WhileLoopBackendConfig_KnownTripCount struct {
	N                    int64    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhileLoopBackendConfig_KnownTripCount) Reset()         { *m = WhileLoopBackendConfig_KnownTripCount{} }
func (m *WhileLoopBackendConfig_KnownTripCount) String() string { return proto.CompactTextString(m) }
func (*WhileLoopBackendConfig_KnownTripCount) ProtoMessage()    {}
func (*WhileLoopBackendConfig_KnownTripCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dcea617429ce43f, []int{27, 0}
}

func (m *WhileLoopBackendConfig_KnownTripCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WhileLoopBackendConfig_KnownTripCount.Unmarshal(m, b)
}
func (m *WhileLoopBackendConfig_KnownTripCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WhileLoopBackendConfig_KnownTripCount.Marshal(b, m, deterministic)
}
func (m *WhileLoopBackendConfig_KnownTripCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhileLoopBackendConfig_KnownTripCount.Merge(m, src)
}
func (m *WhileLoopBackendConfig_KnownTripCount) XXX_Size() int {
	return xxx_messageInfo_WhileLoopBackendConfig_KnownTripCount.Size(m)
}
func (m *WhileLoopBackendConfig_KnownTripCount) XXX_DiscardUnknown() {
	xxx_messageInfo_WhileLoopBackendConfig_KnownTripCount.DiscardUnknown(m)
}

var xxx_messageInfo_WhileLoopBackendConfig_KnownTripCount proto.InternalMessageInfo

func (m *WhileLoopBackendConfig_KnownTripCount) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func init() {
	proto.RegisterEnum("xla.PrimitiveType", PrimitiveType_name, PrimitiveType_value)
	proto.RegisterEnum("xla.Format", Format_name, Format_value)
	proto.RegisterEnum("xla.FftType", FftType_name, FftType_value)
	proto.RegisterEnum("xla.RandomDistribution", RandomDistribution_name, RandomDistribution_value)
	proto.RegisterEnum("xla.ChannelHandle_ChannelType", ChannelHandle_ChannelType_name, ChannelHandle_ChannelType_value)
	proto.RegisterEnum("xla.TriangularSolveOptions_Transpose", TriangularSolveOptions_Transpose_name, TriangularSolveOptions_Transpose_value)
	proto.RegisterEnum("xla.OpSharding_Type", OpSharding_Type_name, OpSharding_Type_value)
	proto.RegisterEnum("xla.PrecisionConfig_Precision", PrecisionConfig_Precision_name, PrecisionConfig_Precision_value)
	proto.RegisterType((*PaddingConfig)(nil), "xla.PaddingConfig")
	proto.RegisterType((*PaddingConfig_PaddingConfigDimension)(nil), "xla.PaddingConfig.PaddingConfigDimension")
	proto.RegisterType((*TileProto)(nil), "xla.TileProto")
	proto.RegisterType((*LayoutProto)(nil), "xla.LayoutProto")
	proto.RegisterType((*ShapeProto)(nil), "xla.ShapeProto")
	proto.RegisterType((*ProgramShapeProto)(nil), "xla.ProgramShapeProto")
	proto.RegisterType((*ComputationStats)(nil), "xla.ComputationStats")
	proto.RegisterType((*OpMetadata)(nil), "xla.OpMetadata")
	proto.RegisterType((*ExecutionProfile)(nil), "xla.ExecutionProfile")
	proto.RegisterType((*ExecutionHandle)(nil), "xla.ExecutionHandle")
	proto.RegisterType((*GlobalDataHandle)(nil), "xla.GlobalDataHandle")
	proto.RegisterType((*DeviceHandle)(nil), "xla.DeviceHandle")
	proto.RegisterType((*ChannelHandle)(nil), "xla.ChannelHandle")
	proto.RegisterType((*DeviceAssignmentProto)(nil), "xla.DeviceAssignmentProto")
	proto.RegisterType((*DeviceAssignmentProto_ComputationDevice)(nil), "xla.DeviceAssignmentProto.ComputationDevice")
	proto.RegisterType((*LiteralProto)(nil), "xla.LiteralProto")
	proto.RegisterType((*WindowDimension)(nil), "xla.WindowDimension")
	proto.RegisterType((*Window)(nil), "xla.Window")
	proto.RegisterType((*GatherDimensionNumbers)(nil), "xla.GatherDimensionNumbers")
	proto.RegisterType((*ScatterDimensionNumbers)(nil), "xla.ScatterDimensionNumbers")
	proto.RegisterType((*ConvolutionDimensionNumbers)(nil), "xla.ConvolutionDimensionNumbers")
	proto.RegisterType((*DotDimensionNumbers)(nil), "xla.DotDimensionNumbers")
	proto.RegisterType((*TriangularSolveOptions)(nil), "xla.TriangularSolveOptions")
	proto.RegisterType((*CholeskyOptions)(nil), "xla.CholeskyOptions")
	proto.RegisterType((*OpSharding)(nil), "xla.OpSharding")
	proto.RegisterType((*ReplicaGroup)(nil), "xla.ReplicaGroup")
	proto.RegisterType((*SourceTarget)(nil), "xla.SourceTarget")
	proto.RegisterType((*PrecisionConfig)(nil), "xla.PrecisionConfig")
	proto.RegisterType((*ParameterReplication)(nil), "xla.ParameterReplication")
	proto.RegisterType((*WhileLoopBackendConfig)(nil), "xla.WhileLoopBackendConfig")
	proto.RegisterType((*WhileLoopBackendConfig_KnownTripCount)(nil), "xla.WhileLoopBackendConfig.KnownTripCount")
}

func init() {
	proto.RegisterFile("tensorflow/compiler/xla/xla_data.proto", fileDescriptor_4dcea617429ce43f)
}

var fileDescriptor_4dcea617429ce43f = []byte{
	// 2636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x4d, 0x6f, 0x23, 0xc7,
	0xd1, 0xf6, 0xf0, 0x43, 0x22, 0x8b, 0x14, 0x39, 0xea, 0xd5, 0x6a, 0xf9, 0xca, 0x7e, 0xd7, 0x32,
	0x63, 0x7b, 0x65, 0xd9, 0x90, 0x2c, 0xae, 0xa2, 0x28, 0x89, 0xb1, 0x08, 0x97, 0xa4, 0x56, 0x5c,
	0x4b, 0x14, 0x33, 0xe4, 0xae, 0x93, 0x00, 0xc1, 0xa0, 0x45, 0x36, 0xc5, 0xc9, 0x0e, 0x67, 0x06,
	0x33, 0x4d, 0x7d, 0xf8, 0x94, 0x73, 0x02, 0x24, 0xb7, 0x00, 0xf9, 0x17, 0xb9, 0xe5, 0x14, 0x04,
	0x08, 0xf2, 0x07, 0x72, 0xcd, 0x35, 0xbf, 0x21, 0x81, 0x6f, 0x09, 0xaa, 0xba, 0x87, 0x1c, 0x49,
	0xdc, 0x38, 0x87, 0x01, 0xaa, 0x9f, 0x7a, 0xaa, 0xbb, 0xab, 0xba, 0xbb, 0xba, 0x7a, 0xe0, 0x63,
	0x29, 0xbc, 0xc8, 0x0f, 0x47, 0xae, 0x7f, 0xb5, 0x3b, 0xf0, 0x27, 0x81, 0xe3, 0x8a, 0x70, 0xf7,
	0xda, 0xe5, 0xf8, 0xd9, 0x43, 0x2e, 0xf9, 0x4e, 0x10, 0xfa, 0xd2, 0x67, 0xe9, 0x6b, 0x97, 0x57,
	0xff, 0x65, 0xc0, 0x4a, 0x97, 0x0f, 0x87, 0x8e, 0x77, 0xd1, 0xf0, 0xbd, 0x91, 0x73, 0xc1, 0xda,
	0x00, 0x43, 0x67, 0x22, 0xbc, 0xc8, 0xf1, 0xbd, 0xa8, 0x62, 0x6c, 0xa6, 0xb7, 0x0a, 0xb5, 0x4f,
	0x76, 0xae, 0x5d, 0xbe, 0x73, 0x8b, 0x77, 0xbb, 0xd5, 0x8c, 0x2d, 0xac, 0x84, 0xf1, 0xc6, 0xef,
	0x0d, 0x58, 0x5f, 0x4c, 0x63, 0x5b, 0x60, 0x8a, 0xe1, 0x85, 0xb0, 0x03, 0xa5, 0xb6, 0x5d, 0xff,
	0xaa, 0x62, 0x6c, 0x1a, 0x5b, 0x69, 0xab, 0x84, 0xb8, 0xb6, 0x3a, 0xf1, 0xaf, 0xd8, 0x36, 0xac,
	0xde, 0x62, 0x8e, 0x9d, 0x8b, 0x71, 0x25, 0x45, 0xd4, 0x72, 0x82, 0x7a, 0xec, 0x5c, 0x8c, 0xd9,
	0x27, 0x60, 0x3a, 0x9e, 0x14, 0xa1, 0xe3, 0x87, 0x31, 0xbf, 0x92, 0x56, 0xd4, 0x18, 0xd7, 0xf4,
	0xea, 0xa7, 0x90, 0xef, 0x3b, 0xae, 0xe8, 0x52, 0x28, 0x1e, 0xdf, 0xf3, 0x39, 0x9d, 0x74, 0xa4,
	0xfa, 0x87, 0x14, 0x14, 0x4e, 0xf8, 0x8d, 0x3f, 0x95, 0x8a, 0xff, 0x1d, 0x58, 0x1a, 0xf9, 0xe1,
	0x84, 0xcb, 0x4a, 0x66, 0xd3, 0xd8, 0x2a, 0xd5, 0x0a, 0x14, 0x9f, 0x23, 0x82, 0x2c, 0xad, 0x62,
	0x1f, 0x42, 0x69, 0xe2, 0x78, 0x7e, 0x68, 0x4b, 0xdf, 0x9e, 0xf0, 0x5f, 0xf8, 0xa1, 0xee, 0xb8,
	0x48, 0x68, 0xdf, 0x3f, 0x45, 0x8c, 0xed, 0xc0, 0x83, 0x09, 0xbf, 0xb6, 0xa3, 0x80, 0x87, 0x91,
	0xb0, 0x85, 0x2b, 0x26, 0xc2, 0x93, 0x51, 0x25, 0x4b, 0xb3, 0x5e, 0x9d, 0xf0, 0xeb, 0x1e, 0x69,
	0x5a, 0x5a, 0xc1, 0x3e, 0x84, 0xac, 0x74, 0x5c, 0x11, 0x55, 0x96, 0x68, 0x65, 0x4a, 0x34, 0xf2,
	0xcc, 0x13, 0x4b, 0x29, 0xd9, 0x2e, 0xac, 0xe9, 0xae, 0xec, 0xc8, 0xf9, 0x5a, 0xd8, 0x8e, 0x67,
	0x9f, 0x3b, 0x32, 0xaa, 0x2c, 0xab, 0x6e, 0xb5, 0xae, 0xe7, 0x7c, 0x2d, 0xda, 0xde, 0x73, 0x47,
	0x46, 0xec, 0x03, 0x28, 0x4e, 0xc4, 0xc4, 0x0f, 0x6f, 0x70, 0x26, 0x03, 0x51, 0xc9, 0x11, 0xb1,
	0xa0, 0xb0, 0x1e, 0x42, 0x2f, 0x33, 0xb9, 0x94, 0x99, 0x7e, 0x99, 0xc9, 0xa5, 0xcd, 0x8c, 0xb5,
	0x8a, 0xd1, 0x15, 0x43, 0x7b, 0x1e, 0x23, 0x6b, 0x25, 0x5e, 0xa0, 0x4b, 0xee, 0x4e, 0x45, 0xf5,
	0xdf, 0x06, 0x40, 0x6f, 0xcc, 0x03, 0x1d, 0xe1, 0xef, 0x42, 0x31, 0x9e, 0x90, 0xbc, 0x09, 0x04,
	0x2d, 0x60, 0xa9, 0xc6, 0xd4, 0xbe, 0x0a, 0x9d, 0x89, 0x23, 0x9d, 0x4b, 0xd1, 0xbf, 0x09, 0x84,
	0x55, 0xd0, 0x3c, 0x6c, 0xdc, 0x59, 0x98, 0xf4, 0xdd, 0x85, 0x61, 0x35, 0x28, 0xca, 0x69, 0xe0,
	0x0a, 0x3b, 0xc2, 0xa1, 0xa2, 0x4a, 0x86, 0x82, 0x52, 0xa6, 0x6e, 0xe7, 0xa3, 0x5b, 0x05, 0x22,
	0x11, 0x10, 0xb1, 0x2d, 0x58, 0x72, 0x69, 0x2d, 0x29, 0xc8, 0x85, 0x9a, 0x49, 0xec, 0xc4, 0xf2,
	0x5a, 0x5a, 0xcf, 0x3e, 0x87, 0x35, 0x27, 0xb2, 0x87, 0x37, 0x1e, 0x9f, 0x38, 0x83, 0xb9, 0xaf,
	0x14, 0xfa, 0x9c, 0xc5, 0x9c, 0xa8, 0xa9, 0x54, 0xb3, 0x6d, 0xfd, 0x32, 0x93, 0x33, 0xcc, 0x94,
	0x95, 0x09, 0xb9, 0xf7, 0xa6, 0xfa, 0x3b, 0x03, 0x56, 0xbb, 0xa1, 0x7f, 0x11, 0xf2, 0x49, 0x22,
	0x10, 0xbb, 0x00, 0x01, 0x0f, 0xf9, 0x44, 0x48, 0x11, 0xc6, 0xc7, 0xeb, 0xde, 0x7c, 0x13, 0x14,
	0xf6, 0x04, 0x96, 0x42, 0x11, 0x4d, 0x5d, 0x49, 0x31, 0x5b, 0x40, 0xd6, 0x6a, 0xf6, 0x04, 0xca,
	0x33, 0x33, 0xdb, 0xe3, 0x13, 0xa1, 0x02, 0x96, 0xb7, 0x4a, 0x33, 0xb8, 0x83, 0x68, 0x75, 0x08,
	0x66, 0xc3, 0x9f, 0x04, 0x53, 0xc9, 0xa5, 0xe3, 0x7b, 0x3d, 0xc9, 0x65, 0xc4, 0xfe, 0x1f, 0x60,
	0xe4, 0xfa, 0x81, 0x3d, 0xf0, 0xa7, 0x9e, 0xa4, 0x93, 0x68, 0x58, 0x79, 0x44, 0x1a, 0x08, 0xb0,
	0x3d, 0x58, 0x93, 0x21, 0xf7, 0xa2, 0x81, 0xf0, 0x86, 0xc2, 0x93, 0xdc, 0xd5, 0xc4, 0x14, 0x11,
	0x1f, 0xdc, 0xd6, 0x91, 0x49, 0xf5, 0x97, 0x06, 0xc0, 0x59, 0x70, 0x2a, 0x24, 0xc7, 0x9c, 0xc3,
	0x1e, 0xc1, 0xb2, 0x1f, 0xa8, 0xb5, 0xc7, 0xde, 0xf3, 0xd6, 0x92, 0x1f, 0xd0, 0x12, 0x2b, 0x05,
	0xce, 0x97, 0x7a, 0x23, 0x05, 0xce, 0x93, 0xbd, 0x0f, 0x85, 0xc8, 0x9f, 0x86, 0x03, 0x61, 0x8f,
	0x1c, 0x57, 0xd0, 0x39, 0xce, 0x5b, 0xa0, 0xa0, 0x23, 0xc7, 0x4d, 0x12, 0x5c, 0xc7, 0x13, 0x74,
	0x14, 0xb3, 0x31, 0xe1, 0xc4, 0xf1, 0x44, 0xf5, 0xcf, 0x29, 0x30, 0x5b, 0xd7, 0x62, 0x30, 0x45,
	0x3f, 0xbb, 0xa1, 0x8f, 0xfd, 0xb0, 0x1a, 0x3c, 0x54, 0x59, 0x91, 0xbc, 0xb7, 0x07, 0x7c, 0x30,
	0x16, 0xf6, 0xd8, 0x51, 0x4e, 0xe7, 0xac, 0x07, 0x09, 0x65, 0x03, 0x75, 0xc7, 0x8e, 0x64, 0x1f,
	0x43, 0x59, 0x67, 0x52, 0x5b, 0x3a, 0x13, 0x61, 0x4f, 0x22, 0x9d, 0x81, 0x56, 0x34, 0xdc, 0x77,
	0x26, 0xe2, 0x34, 0xc2, 0xc3, 0x3c, 0xa0, 0xc8, 0x0a, 0x7b, 0x70, 0x33, 0x70, 0x85, 0x8e, 0x92,
	0x4a, 0x41, 0xab, 0x5a, 0xd5, 0x40, 0x8d, 0x0a, 0xab, 0xee, 0x17, 0xf9, 0xd4, 0xaf, 0x17, 0x91,
	0x17, 0xba, 0xdf, 0xa9, 0xa4, 0x7e, 0x3b, 0x11, 0x7b, 0x06, 0xef, 0xc5, 0x3c, 0xee, 0x0d, 0x6d,
	0x0a, 0xf7, 0x48, 0x84, 0x33, 0x23, 0x95, 0x2d, 0x2a, 0x9a, 0x53, 0xf7, 0x86, 0x7d, 0xcd, 0xd0,
	0xf6, 0xdf, 0x83, 0x8a, 0xa0, 0x38, 0xf0, 0x73, 0x3c, 0x2b, 0x71, 0x46, 0xb8, 0x91, 0x94, 0x47,
	0xd0, 0xf6, 0xe1, 0x5c, 0xaf, 0xb3, 0x02, 0x2a, 0xab, 0x9f, 0x40, 0x79, 0x16, 0xc0, 0x63, 0xee,
	0x0d, 0x5d, 0xc1, 0xd6, 0x61, 0x69, 0x4c, 0x92, 0xce, 0xd7, 0xba, 0x55, 0xdd, 0x06, 0xf3, 0x85,
	0xeb, 0x9f, 0x73, 0xb7, 0xc9, 0x25, 0xff, 0x16, 0x6e, 0x1b, 0x8a, 0x4d, 0x71, 0xe9, 0x0c, 0xc4,
	0x7f, 0xe7, 0x61, 0x56, 0x1a, 0x12, 0x2f, 0xb1, 0xdd, 0xd2, 0x56, 0x41, 0x61, 0x6a, 0x9b, 0xfd,
	0xc5, 0x80, 0x95, 0xc6, 0x98, 0x7b, 0x9e, 0x70, 0xbf, 0xa5, 0xb3, 0x1a, 0x64, 0x12, 0xa9, 0xe7,
	0x31, 0x1d, 0xa3, 0x5b, 0x96, 0x71, 0x8b, 0xd2, 0x10, 0x71, 0xab, 0x02, 0x0a, 0x09, 0x90, 0x55,
	0x60, 0xad, 0x71, 0x5c, 0xef, 0x74, 0x5a, 0x27, 0x76, 0xff, 0xa7, 0xdd, 0x96, 0xdd, 0xee, 0xbc,
	0xae, 0x9f, 0xb4, 0x9b, 0xe6, 0x3b, 0x6c, 0x0d, 0xcc, 0x66, 0xeb, 0x75, 0xbb, 0xd1, 0xb2, 0xfb,
	0x67, 0xb6, 0x92, 0x4c, 0x83, 0x31, 0x28, 0xcd, 0xd1, 0xe3, 0xb3, 0x5e, 0xdf, 0x4c, 0x21, 0x86,
	0x52, 0x82, 0x97, 0xae, 0xfe, 0x3a, 0x05, 0x0f, 0x55, 0x40, 0xea, 0x51, 0xe4, 0x5c, 0x78, 0x98,
	0xff, 0xe2, 0x9b, 0x66, 0x25, 0x14, 0x81, 0xeb, 0x0c, 0x78, 0xe2, 0x68, 0x66, 0xad, 0xa2, 0x06,
	0xd5, 0x36, 0xfa, 0x14, 0xf4, 0xde, 0xd2, 0x5b, 0x7a, 0x16, 0xab, 0xac, 0x65, 0x26, 0x14, 0x8a,
	0xfc, 0xf3, 0x78, 0x8f, 0x2a, 0xb2, 0x8a, 0xa5, 0x4a, 0x15, 0x85, 0xda, 0x67, 0x14, 0x95, 0x85,
	0x53, 0xd9, 0x49, 0xe4, 0x0c, 0x45, 0xb0, 0xd8, 0xe0, 0x2e, 0x14, 0x6d, 0xd4, 0x61, 0xf5, 0x1e,
	0x91, 0x7d, 0x06, 0x2c, 0xf6, 0x42, 0xaf, 0xa7, 0x33, 0x54, 0xc9, 0x2f, 0x6b, 0x99, 0x5a, 0xa3,
	0xa8, 0xed, 0x61, 0x54, 0xfd, 0x6b, 0x1a, 0x8a, 0x27, 0x8e, 0x14, 0x21, 0x77, 0x55, 0x10, 0x3e,
	0x82, 0x2c, 0xe5, 0x77, 0x72, 0x7e, 0x41, 0x06, 0x54, 0x5a, 0xb6, 0x06, 0xd9, 0x20, 0x14, 0x43,
	0x3c, 0x9b, 0x98, 0x9f, 0x55, 0x83, 0x99, 0x90, 0x8e, 0x0e, 0xa3, 0x4a, 0x79, 0xd3, 0xd8, 0x2a,
	0x5a, 0x28, 0x22, 0x32, 0x3d, 0x8c, 0xe8, 0x54, 0x16, 0x2d, 0x14, 0x19, 0x83, 0x4c, 0xf4, 0xb4,
	0xa6, 0xae, 0x8f, 0xac, 0x45, 0x32, 0x61, 0x07, 0xfb, 0x78, 0xb6, 0xf0, 0xd2, 0x21, 0x19, 0xb1,
	0x29, 0xf2, 0xf0, 0x02, 0x58, 0xb1, 0x48, 0x26, 0x0c, 0x79, 0xcb, 0x9b, 0xe9, 0xad, 0x8c, 0x45,
	0x32, 0x62, 0x23, 0xe4, 0xe5, 0x36, 0xd3, 0x5b, 0x29, 0x8b, 0x64, 0xc2, 0x90, 0x97, 0xdf, 0x4c,
	0x6f, 0x19, 0x16, 0xc9, 0x88, 0x0d, 0x10, 0x2b, 0x2a, 0x1e, 0xca, 0xe8, 0xc5, 0x60, 0xaf, 0x76,
	0x18, 0x55, 0x18, 0x11, 0x55, 0x83, 0x1d, 0x42, 0x49, 0x5d, 0x74, 0xae, 0x0a, 0x4c, 0x54, 0x01,
	0x5a, 0xb0, 0x55, 0x75, 0x79, 0x25, 0xa2, 0x65, 0xad, 0x10, 0x51, 0x43, 0x6a, 0xdc, 0xbd, 0x83,
	0xa8, 0x52, 0x20, 0x77, 0x49, 0xc6, 0x31, 0xce, 0x09, 0x5c, 0x21, 0x50, 0x35, 0xc8, 0x13, 0x04,
	0x4d, 0xc5, 0x9c, 0x6a, 0x2c, 0x42, 0x6c, 0x55, 0x61, 0x28, 0xb3, 0x8f, 0xa0, 0xa4, 0xcb, 0x15,
	0xc7, 0x1b, 0xd2, 0xe6, 0x29, 0x51, 0x8c, 0x56, 0x14, 0xda, 0x56, 0x60, 0xf5, 0x1b, 0x03, 0xca,
	0x5f, 0x39, 0xde, 0xd0, 0xbf, 0x9a, 0x97, 0x7d, 0xd8, 0x9d, 0xf3, 0x75, 0x7c, 0x32, 0x49, 0xc6,
	0xf3, 0x1a, 0xc9, 0xd0, 0x19, 0x0a, 0x7d, 0xbc, 0x75, 0x0b, 0xd3, 0x7b, 0xb2, 0x3a, 0x54, 0x49,
	0x14, 0x82, 0x79, 0x65, 0xf8, 0x01, 0x14, 0x6f, 0x15, 0x85, 0x2a, 0x75, 0xc6, 0x46, 0x54, 0x10,
	0x3e, 0x81, 0xf2, 0x15, 0x4d, 0xc1, 0x1e, 0xea, 0x9c, 0xae, 0x73, 0x65, 0xe9, 0x4a, 0xcf, 0x4c,
	0xa1, 0x78, 0xce, 0xce, 0x79, 0x24, 0xe6, 0x34, 0x95, 0x16, 0x8b, 0x08, 0xce, 0x48, 0xf3, 0xde,
	0x42, 0x71, 0x29, 0xc2, 0x88, 0xbb, 0x54, 0x50, 0xe5, 0xe2, 0xde, 0x2c, 0x8d, 0x56, 0x9f, 0xc1,
	0x92, 0xf2, 0x9c, 0xed, 0x2f, 0xa8, 0xa6, 0xd7, 0x68, 0xcd, 0xee, 0x84, 0xe6, 0x56, 0xbd, 0xf9,
	0x27, 0x03, 0xd6, 0x5f, 0x70, 0x39, 0x16, 0xe1, 0x4c, 0xdf, 0x99, 0x4e, 0xce, 0xb1, 0x1c, 0x78,
	0x1f, 0x0a, 0xfe, 0x68, 0x14, 0x09, 0x89, 0xf5, 0xc8, 0xac, 0x56, 0x55, 0x50, 0xd3, 0x99, 0x44,
	0x58, 0xb4, 0x0c, 0x7c, 0xd7, 0xe5, 0x41, 0x24, 0x86, 0x76, 0xe4, 0xe2, 0x61, 0x23, 0x66, 0x8a,
	0x98, 0x6c, 0xa6, 0xeb, 0xa1, 0x8a, 0x2c, 0x3e, 0x86, 0x72, 0x24, 0x79, 0x28, 0x71, 0x39, 0xc5,
	0xb5, 0x3d, 0xe1, 0x81, 0xae, 0xb4, 0x56, 0x08, 0x6e, 0x23, 0x7a, 0xca, 0x03, 0xac, 0xd9, 0x15,
	0xe3, 0x52, 0x0c, 0xa4, 0x1f, 0x62, 0xb7, 0x3a, 0xe6, 0x25, 0xc2, 0x5f, 0x13, 0xdc, 0x74, 0x26,
	0xd5, 0x7f, 0x18, 0xf0, 0xa8, 0x37, 0xe0, 0x52, 0x2e, 0x70, 0xe0, 0x33, 0x60, 0xd3, 0x60, 0xc8,
	0xa5, 0xb0, 0x67, 0x2b, 0x33, 0xf3, 0xc3, 0x54, 0x9a, 0x59, 0x68, 0xc8, 0x1b, 0xc7, 0x8b, 0x44,
	0x28, 0xc5, 0xf0, 0x16, 0x5f, 0x7b, 0x13, 0xeb, 0x12, 0x16, 0xcf, 0xe0, 0xbd, 0x48, 0x0d, 0x4d,
	0x4c, 0xac, 0xbe, 0xfd, 0x40, 0x84, 0x78, 0x6f, 0x92, 0xa5, 0x72, 0xad, 0x12, 0xcd, 0xa6, 0x17,
	0xf5, 0xfd, 0x33, 0x45, 0x20, 0xfb, 0xff, 0xdd, 0xcb, 0x3f, 0x66, 0xe0, 0xdd, 0x86, 0xef, 0x5d,
	0xfa, 0x2e, 0xdd, 0x8f, 0xf7, 0x3c, 0xad, 0xc1, 0x43, 0xc7, 0x0b, 0xa6, 0xd2, 0x3e, 0xe7, 0x72,
	0x30, 0x4e, 0xd4, 0x8f, 0xaa, 0x0a, 0x7f, 0x40, 0xca, 0xe7, 0xa8, 0x9b, 0x1f, 0x90, 0x03, 0x78,
	0xa4, 0x6c, 0x46, 0x82, 0xcb, 0x69, 0x28, 0x12, 0x56, 0xaa, 0x24, 0x57, 0x5d, 0x1e, 0x29, 0xed,
	0xdc, 0xee, 0x10, 0x2a, 0xca, 0x2e, 0x0a, 0xb8, 0x74, 0xb8, 0x9b, 0xa8, 0xcc, 0x2b, 0x05, 0xf2,
	0x78, 0x9d, 0xf4, 0x3d, 0xa5, 0x6e, 0xce, 0x4b, 0xe8, 0x06, 0x3c, 0x7e, 0x23, 0x42, 0x4f, 0xb8,
	0xf6, 0xdb, 0x06, 0x56, 0x27, 0xef, 0x5d, 0xc5, 0x6a, 0x2f, 0x1c, 0xbe, 0x05, 0xef, 0xeb, 0x4e,
	0xfc, 0xa9, 0x5c, 0xdc, 0x8b, 0x8a, 0xe1, 0x7b, 0x8a, 0x76, 0x46, 0xac, 0x7b, 0xdd, 0xfc, 0x00,
	0xfe, 0x4f, 0x77, 0xb3, 0xc0, 0x8d, 0x25, 0x72, 0xe3, 0x91, 0x22, 0xdc, 0xf7, 0x63, 0x1f, 0xd6,
	0xf5, 0xd8, 0x77, 0xc3, 0x9d, 0xa7, 0x91, 0xd7, 0x94, 0xf6, 0x4e, 0xbc, 0x0f, 0xa1, 0xf2, 0xd6,
	0x19, 0x03, 0xd9, 0xe9, 0x5e, 0x17, 0xcd, 0x55, 0x5b, 0x2e, 0x98, 0x6b, 0x51, 0xcd, 0x55, 0x11,
	0xee, 0xcd, 0xb5, 0xfa, 0x4f, 0x03, 0x1e, 0x34, 0x7d, 0x79, 0x6f, 0xc7, 0x7c, 0x01, 0x1b, 0xee,
	0x38, 0xb2, 0x07, 0xbe, 0x27, 0x43, 0x3e, 0x90, 0x98, 0xd9, 0xee, 0xbd, 0x4b, 0x2b, 0xee, 0x38,
	0x6a, 0xcc, 0x09, 0x89, 0x08, 0x7c, 0x01, 0x1b, 0xe1, 0xdb, 0xad, 0xd5, 0x89, 0xa9, 0x84, 0x6f,
	0xb3, 0xfe, 0x1c, 0xd6, 0x70, 0xec, 0x3b, 0xc1, 0x8b, 0xcf, 0x0b, 0x73, 0xc7, 0xd1, 0xed, 0xd0,
	0x91, 0x45, 0xb8, 0xc8, 0x22, 0xa3, 0x2c, 0xc2, 0x7b, 0x16, 0xd5, 0x5f, 0xa5, 0x60, 0xbd, 0x1f,
	0x3a, 0xdc, 0xbb, 0x98, 0xba, 0x3c, 0xec, 0xf9, 0xee, 0xa5, 0x38, 0x0b, 0x24, 0x75, 0xf6, 0x2e,
	0xe4, 0x5d, 0x31, 0xc2, 0xe7, 0xea, 0x50, 0xe8, 0x52, 0x3c, 0x87, 0x40, 0x0f, 0xaf, 0x82, 0x35,
	0xc8, 0xba, 0xfe, 0x95, 0x08, 0xe9, 0x86, 0xc8, 0x59, 0xaa, 0x81, 0x39, 0x7b, 0xea, 0x39, 0x98,
	0x08, 0xf9, 0x85, 0xef, 0x71, 0x97, 0x36, 0x6a, 0xce, 0x2a, 0x22, 0xd8, 0xd4, 0x18, 0x3b, 0x82,
	0x02, 0x95, 0xcb, 0x81, 0x1f, 0x09, 0x9b, 0xeb, 0xf7, 0xfa, 0x47, 0xea, 0xd5, 0xbc, 0x70, 0x26,
	0x3b, 0xfd, 0x98, 0x6e, 0xc1, 0xcc, 0xb2, 0x5e, 0xed, 0x42, 0x7e, 0xa6, 0x60, 0x0f, 0x61, 0xb5,
	0x6f, 0xd5, 0x3b, 0xbd, 0xee, 0x59, 0x2f, 0x59, 0x04, 0x9a, 0x50, 0xec, 0x9c, 0xd9, 0x33, 0x8d,
	0x69, 0xb0, 0x15, 0xc8, 0xcf, 0x9b, 0x29, 0x56, 0x80, 0xe5, 0x7a, 0xf3, 0xe5, 0x59, 0xbb, 0xd3,
	0x37, 0xd3, 0xd5, 0x27, 0x50, 0x6e, 0x8c, 0x7d, 0x57, 0x44, 0x6f, 0x6e, 0xe2, 0x20, 0xcc, 0xfc,
	0x34, 0x12, 0x7e, 0x56, 0xff, 0x96, 0xc2, 0x97, 0x54, 0x6f, 0xcc, 0x43, 0xbc, 0xd7, 0xd8, 0x96,
	0xae, 0x63, 0x0d, 0x72, 0x45, 0x5d, 0x26, 0x73, 0xf5, 0xce, 0xbc, 0x7a, 0x65, 0x3b, 0x00, 0xd2,
	0x89, 0x1f, 0xc7, 0x6f, 0x7b, 0x3e, 0xe6, 0x91, 0x42, 0x6d, 0xdc, 0x40, 0xc4, 0xe7, 0xb3, 0xca,
	0xef, 0xfe, 0x46, 0xa8, 0x20, 0x63, 0x5e, 0x1a, 0x26, 0xb6, 0xc3, 0x01, 0x3c, 0xba, 0x67, 0xad,
	0x8b, 0x4b, 0xb5, 0x23, 0x1e, 0xde, 0x31, 0x55, 0x4a, 0x76, 0x08, 0xe5, 0xd9, 0x1b, 0x9e, 0x5c,
	0x50, 0x35, 0x57, 0x3c, 0xd5, 0xb9, 0x6b, 0x56, 0x29, 0x7e, 0xc6, 0x2b, 0x5a, 0xf5, 0xfb, 0x90,
	0xa1, 0xb2, 0xbc, 0x04, 0x60, 0xb5, 0xba, 0x27, 0xed, 0x46, 0xbd, 0xdf, 0xc2, 0x75, 0x28, 0xc0,
	0xf2, 0x69, 0xfd, 0x27, 0xed, 0xd3, 0xfa, 0x89, 0x69, 0xb0, 0x3c, 0x64, 0xfb, 0xaf, 0xba, 0x27,
	0x18, 0xfe, 0x3c, 0x64, 0xcf, 0xfa, 0xc7, 0x2d, 0xcb, 0x4c, 0x57, 0x77, 0xa1, 0x68, 0xa9, 0xba,
	0xf3, 0x45, 0xe8, 0x4f, 0x03, 0xbc, 0x56, 0xe3, 0x0a, 0x35, 0x2e, 0x4d, 0xd3, 0x16, 0x68, 0x08,
	0x8b, 0xd2, 0x67, 0x50, 0xec, 0xd1, 0xcb, 0xb2, 0xcf, 0xc3, 0x0b, 0x21, 0xa9, 0x6a, 0xa1, 0x76,
	0xfc, 0xca, 0x50, 0x2d, 0xc4, 0x25, 0x31, 0xe2, 0x6a, 0x46, 0xb5, 0xaa, 0xbf, 0x35, 0xa0, 0xdc,
	0x0d, 0xc5, 0xc0, 0x89, 0xa8, 0x12, 0xa7, 0x5f, 0x6d, 0x5f, 0xc2, 0x6a, 0x7c, 0x35, 0x05, 0xb1,
	0x8a, 0x86, 0x8e, 0x9f, 0x27, 0x77, 0x0c, 0xe6, 0x6d, 0xcb, 0xd4, 0x86, 0x33, 0xa4, 0xba, 0x0b,
	0xf9, 0x59, 0x03, 0x23, 0xd0, 0x6c, 0x1d, 0xd5, 0x5f, 0x9d, 0xf4, 0xcd, 0x77, 0x58, 0x0e, 0x32,
	0xc7, 0xed, 0x17, 0xc7, 0xa6, 0x81, 0x30, 0x4a, 0x2d, 0x7c, 0x88, 0x54, 0x7b, 0xb0, 0xd6, 0x8d,
	0x7f, 0x0c, 0xe8, 0x58, 0x50, 0x95, 0xf3, 0x43, 0xd8, 0xd0, 0x7e, 0xe3, 0xa5, 0xcb, 0xa5, 0xed,
	0x0a, 0x3e, 0xb2, 0xcf, 0xa7, 0xa3, 0x51, 0xfc, 0xc7, 0x22, 0x67, 0x3d, 0x9a, 0x33, 0xea, 0xf2,
	0x44, 0xf0, 0xd1, 0x73, 0xa5, 0xae, 0xfe, 0xc6, 0x80, 0xf5, 0xaf, 0xc6, 0x8e, 0x2b, 0x4e, 0x7c,
	0x3f, 0x78, 0xce, 0x07, 0x6f, 0x84, 0x37, 0xd4, 0xde, 0xf6, 0xc1, 0x7c, 0xe3, 0xf9, 0x57, 0x9e,
	0x2d, 0x43, 0x27, 0xf9, 0xa3, 0xa1, 0x50, 0xdb, 0x56, 0x05, 0xd1, 0x42, 0xb3, 0x9d, 0x2f, 0xd1,
	0xa6, 0x1f, 0x3a, 0xea, 0x4f, 0x84, 0x55, 0x7a, 0x73, 0xab, 0xbd, 0xf1, 0x18, 0x4a, 0xb7, 0x19,
	0xac, 0x08, 0x86, 0xa7, 0x17, 0xc5, 0xf0, 0xb6, 0xff, 0x6e, 0xc0, 0xca, 0xad, 0x1f, 0x4c, 0x6c,
	0x03, 0xd6, 0xbb, 0x56, 0xfb, 0xb4, 0xdd, 0x6f, 0xbf, 0x6e, 0xdd, 0x7d, 0xc6, 0xe5, 0x20, 0xd3,
	0xb5, 0x5a, 0x4d, 0xd3, 0x60, 0x4b, 0x90, 0xea, 0x1d, 0x9a, 0x29, 0xb6, 0x0c, 0xe9, 0xde, 0xde,
	0x81, 0x99, 0x26, 0xe1, 0x69, 0xcd, 0xcc, 0x90, 0x70, 0xb0, 0x6f, 0x66, 0x91, 0xf2, 0xea, 0xd0,
	0x5c, 0x42, 0xe0, 0xd5, 0xde, 0x81, 0xb9, 0x4c, 0xc2, 0xd3, 0x9a, 0x99, 0x23, 0xe1, 0x60, 0xdf,
	0xcc, 0xa3, 0x70, 0xb4, 0x77, 0x60, 0x02, 0x09, 0x4f, 0x6b, 0x66, 0x01, 0x47, 0x78, 0x8e, 0x90,
	0x49, 0xd0, 0xc1, 0xbe, 0x59, 0x44, 0xa1, 0x71, 0xb0, 0x6f, 0x96, 0x51, 0xd7, 0xd8, 0xab, 0x1d,
	0x9a, 0x6c, 0xbe, 0x69, 0x57, 0x58, 0x19, 0x0a, 0x67, 0xdd, 0xfa, 0x8f, 0x5f, 0xa9, 0xb9, 0x9a,
	0x25, 0xd2, 0x9d, 0x7d, 0xd9, 0xea, 0x98, 0xab, 0xdb, 0x4f, 0x61, 0x49, 0xfd, 0x74, 0xc4, 0x57,
	0xa5, 0xf6, 0xc2, 0x3e, 0x3a, 0xb3, 0x4e, 0xeb, 0xb8, 0xee, 0x79, 0xc8, 0x36, 0x5b, 0x1d, 0xca,
	0x43, 0x00, 0x4b, 0xbd, 0x6e, 0xdd, 0xc2, 0x24, 0xb4, 0xbd, 0x07, 0xcb, 0x47, 0x23, 0xf5, 0x7b,
	0x0d, 0xa7, 0x70, 0xa4, 0xb7, 0x48, 0x1b, 0x25, 0x03, 0x25, 0x0b, 0x25, 0x3a, 0x2d, 0x6d, 0x12,
	0xd3, 0xdb, 0x47, 0xc0, 0x2c, 0xee, 0x0d, 0xfd, 0x49, 0xd3, 0xc1, 0xe2, 0xfc, 0x9c, 0xea, 0x1d,
	0x9c, 0x99, 0xd5, 0x79, 0x91, 0x88, 0x9e, 0x06, 0x5e, 0x75, 0xda, 0x38, 0x07, 0xd3, 0xa0, 0x83,
	0xd9, 0x79, 0x61, 0x77, 0x70, 0x46, 0x27, 0x66, 0xea, 0x79, 0xeb, 0x67, 0x3f, 0xba, 0x70, 0xe4,
	0x78, 0x7a, 0xbe, 0x33, 0xf0, 0x27, 0xbb, 0x89, 0xff, 0xd4, 0x8b, 0xc5, 0x0b, 0x7f, 0x77, 0xe0,
	0x87, 0xe2, 0xd6, 0x5f, 0xec, 0x6f, 0x0c, 0xe3, 0x7c, 0x89, 0x7e, 0x60, 0x3f, 0xfd, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x48, 0xb4, 0xb8, 0x8e, 0xea, 0x16, 0x00, 0x00,
}
