// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/decision_trees/proto/generic_tree_model_extensions.proto

package decision_trees

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Used in generic_tree_model.BinaryNode.left_child_test.
// Tests whether the feature's value belongs to the specified list,
// (or does not belong if inverse=True).
// For empty list use ConstResultTest instead.
type MatchingValuesTest struct {
	// When the feature is missing, the test's outcome is undefined.
	FeatureId            *FeatureId `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Value                []*Value   `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	Inverse              bool       `protobuf:"varint,3,opt,name=inverse,proto3" json:"inverse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MatchingValuesTest) Reset()         { *m = MatchingValuesTest{} }
func (m *MatchingValuesTest) String() string { return proto.CompactTextString(m) }
func (*MatchingValuesTest) ProtoMessage()    {}
func (*MatchingValuesTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608c74caac735e79, []int{0}
}

func (m *MatchingValuesTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchingValuesTest.Unmarshal(m, b)
}
func (m *MatchingValuesTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchingValuesTest.Marshal(b, m, deterministic)
}
func (m *MatchingValuesTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchingValuesTest.Merge(m, src)
}
func (m *MatchingValuesTest) XXX_Size() int {
	return xxx_messageInfo_MatchingValuesTest.Size(m)
}
func (m *MatchingValuesTest) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchingValuesTest.DiscardUnknown(m)
}

var xxx_messageInfo_MatchingValuesTest proto.InternalMessageInfo

func (m *MatchingValuesTest) GetFeatureId() *FeatureId {
	if m != nil {
		return m.FeatureId
	}
	return nil
}

func (m *MatchingValuesTest) GetValue() []*Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MatchingValuesTest) GetInverse() bool {
	if m != nil {
		return m.Inverse
	}
	return false
}

// Used in generic_tree_model.BinaryNode.left_child_test.
// Returns test_result if feature value is not missed. Otherwise
// BinaryNode.default_direction is used.
type ConstResultTest struct {
	FeatureId *FeatureId `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// value_for_dtype is used to store the type of the feature. The value itself
	// should be ignored, only its type is used.
	ValueForDtype        *Value   `protobuf:"bytes,2,opt,name=value_for_dtype,json=valueForDtype,proto3" json:"value_for_dtype,omitempty"`
	TestResult           bool     `protobuf:"varint,3,opt,name=test_result,json=testResult,proto3" json:"test_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConstResultTest) Reset()         { *m = ConstResultTest{} }
func (m *ConstResultTest) String() string { return proto.CompactTextString(m) }
func (*ConstResultTest) ProtoMessage()    {}
func (*ConstResultTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608c74caac735e79, []int{1}
}

func (m *ConstResultTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConstResultTest.Unmarshal(m, b)
}
func (m *ConstResultTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConstResultTest.Marshal(b, m, deterministic)
}
func (m *ConstResultTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstResultTest.Merge(m, src)
}
func (m *ConstResultTest) XXX_Size() int {
	return xxx_messageInfo_ConstResultTest.Size(m)
}
func (m *ConstResultTest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstResultTest.DiscardUnknown(m)
}

var xxx_messageInfo_ConstResultTest proto.InternalMessageInfo

func (m *ConstResultTest) GetFeatureId() *FeatureId {
	if m != nil {
		return m.FeatureId
	}
	return nil
}

func (m *ConstResultTest) GetValueForDtype() *Value {
	if m != nil {
		return m.ValueForDtype
	}
	return nil
}

func (m *ConstResultTest) GetTestResult() bool {
	if m != nil {
		return m.TestResult
	}
	return false
}

func init() {
	proto.RegisterType((*MatchingValuesTest)(nil), "tensorflow.decision_trees.MatchingValuesTest")
	proto.RegisterType((*ConstResultTest)(nil), "tensorflow.decision_trees.ConstResultTest")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/decision_trees/proto/generic_tree_model_extensions.proto", fileDescriptor_608c74caac735e79)
}

var fileDescriptor_608c74caac735e79 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x59, 0x8b, 0xff, 0xb6, 0x48, 0x61, 0x4f, 0xd1, 0x8b, 0xa1, 0x78, 0xe8, 0x29, 0x0b,
	0x15, 0x3c, 0x8b, 0x95, 0xe2, 0xdf, 0x4b, 0x10, 0x0f, 0x5e, 0x96, 0x64, 0x33, 0x49, 0x17, 0xd2,
	0x9d, 0xb2, 0x3b, 0xa9, 0xfa, 0x99, 0xfc, 0x14, 0x7e, 0x33, 0xc9, 0xc6, 0xa2, 0x82, 0x15, 0x11,
	0x6f, 0xb3, 0xc3, 0xbc, 0xf7, 0x7e, 0xcb, 0xe3, 0xd7, 0x04, 0xd6, 0xa3, 0x2b, 0x6b, 0x7c, 0x94,
	0x1a, 0x2d, 0x39, 0x93, 0xcb, 0x02, 0xb4, 0xf1, 0x06, 0xad, 0x22, 0x07, 0xe0, 0xe5, 0xc2, 0x21,
	0xa1, 0xac, 0xc0, 0x82, 0x33, 0x3a, 0xec, 0xd4, 0x1c, 0x0b, 0xa8, 0x15, 0x3c, 0xb5, 0x62, 0x83,
	0xd6, 0x27, 0xe1, 0x46, 0xec, 0x7f, 0x98, 0x25, 0x5f, 0x4d, 0x0e, 0x4e, 0xff, 0x9e, 0xd3, 0x99,
	0x0f, 0x5f, 0x18, 0x17, 0xb7, 0x19, 0xe9, 0x99, 0xb1, 0xd5, 0x7d, 0x56, 0x37, 0xe0, 0xef, 0xc0,
	0x93, 0x98, 0x70, 0x5e, 0x42, 0x46, 0x8d, 0x03, 0x65, 0x8a, 0x88, 0xc5, 0x6c, 0xd4, 0x1f, 0x1f,
	0x25, 0x6b, 0x41, 0x92, 0x69, 0x77, 0x7c, 0x59, 0xa4, 0xbb, 0xe5, 0x6a, 0x14, 0x27, 0x7c, 0x73,
	0xd9, 0x5a, 0x46, 0x1b, 0x71, 0x6f, 0xd4, 0x1f, 0xc7, 0x3f, 0xe8, 0x43, 0x74, 0xda, 0x9d, 0x8b,
	0x88, 0x6f, 0x1b, 0xbb, 0x04, 0xe7, 0x21, 0xea, 0xc5, 0x6c, 0xb4, 0x93, 0xae, 0x9e, 0xc3, 0x57,
	0xc6, 0x07, 0x13, 0xb4, 0x9e, 0x52, 0xf0, 0x4d, 0x4d, 0xff, 0x87, 0x7a, 0xc1, 0x07, 0x21, 0x5b,
	0x95, 0xe8, 0x54, 0x41, 0xcf, 0x8b, 0x16, 0x9a, 0xfd, 0x0a, 0x7a, 0x2f, 0x08, 0xa7, 0xe8, 0xce,
	0x5b, 0x99, 0x38, 0xe4, 0x7d, 0x02, 0x4f, 0xca, 0x05, 0xc2, 0xf7, 0x0f, 0xf0, 0x76, 0xd5, 0x31,
	0x9f, 0xdd, 0x3c, 0x5c, 0x55, 0x86, 0x66, 0x4d, 0x9e, 0x68, 0x9c, 0xcb, 0x4f, 0x05, 0x7e, 0x3f,
	0x56, 0x28, 0x35, 0x3a, 0x58, 0x53, 0x6f, 0xbe, 0x15, 0x6a, 0x3c, 0x7e, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x3e, 0xd4, 0xdb, 0x2f, 0x72, 0x02, 0x00, 0x00,
}
