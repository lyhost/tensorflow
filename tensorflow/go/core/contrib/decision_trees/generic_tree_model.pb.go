// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/decision_trees/proto/generic_tree_model.proto

package decision_trees

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BinaryNode_Direction int32

const (
	BinaryNode_LEFT  BinaryNode_Direction = 0
	BinaryNode_RIGHT BinaryNode_Direction = 1
)

var BinaryNode_Direction_name = map[int32]string{
	0: "LEFT",
	1: "RIGHT",
}

var BinaryNode_Direction_value = map[string]int32{
	"LEFT":  0,
	"RIGHT": 1,
}

func (x BinaryNode_Direction) String() string {
	return proto.EnumName(BinaryNode_Direction_name, int32(x))
}

func (BinaryNode_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{7, 0}
}

type InequalityTest_Type int32

const (
	InequalityTest_LESS_OR_EQUAL    InequalityTest_Type = 0
	InequalityTest_LESS_THAN        InequalityTest_Type = 1
	InequalityTest_GREATER_OR_EQUAL InequalityTest_Type = 2
	InequalityTest_GREATER_THAN     InequalityTest_Type = 3
)

var InequalityTest_Type_name = map[int32]string{
	0: "LESS_OR_EQUAL",
	1: "LESS_THAN",
	2: "GREATER_OR_EQUAL",
	3: "GREATER_THAN",
}

var InequalityTest_Type_value = map[string]int32{
	"LESS_OR_EQUAL":    0,
	"LESS_THAN":        1,
	"GREATER_OR_EQUAL": 2,
	"GREATER_THAN":     3,
}

func (x InequalityTest_Type) String() string {
	return proto.EnumName(InequalityTest_Type_name, int32(x))
}

func (InequalityTest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{13, 0}
}

// A generic handle for any type of model.
type Model struct {
	// Types that are valid to be assigned to Model:
	//	*Model_DecisionTree
	//	*Model_Ensemble
	//	*Model_CustomModel
	Model                isModel_Model `protobuf_oneof:"model"`
	AdditionalData       []*any.Any    `protobuf:"bytes,4,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Model) Reset()         { *m = Model{} }
func (m *Model) String() string { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()    {}
func (*Model) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{0}
}

func (m *Model) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Model.Unmarshal(m, b)
}
func (m *Model) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Model.Marshal(b, m, deterministic)
}
func (m *Model) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model.Merge(m, src)
}
func (m *Model) XXX_Size() int {
	return xxx_messageInfo_Model.Size(m)
}
func (m *Model) XXX_DiscardUnknown() {
	xxx_messageInfo_Model.DiscardUnknown(m)
}

var xxx_messageInfo_Model proto.InternalMessageInfo

type isModel_Model interface {
	isModel_Model()
}

type Model_DecisionTree struct {
	DecisionTree *DecisionTree `protobuf:"bytes,1,opt,name=decision_tree,json=decisionTree,proto3,oneof"`
}

type Model_Ensemble struct {
	Ensemble *Ensemble `protobuf:"bytes,2,opt,name=ensemble,proto3,oneof"`
}

type Model_CustomModel struct {
	CustomModel *any.Any `protobuf:"bytes,3,opt,name=custom_model,json=customModel,proto3,oneof"`
}

func (*Model_DecisionTree) isModel_Model() {}

func (*Model_Ensemble) isModel_Model() {}

func (*Model_CustomModel) isModel_Model() {}

func (m *Model) GetModel() isModel_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Model) GetDecisionTree() *DecisionTree {
	if x, ok := m.GetModel().(*Model_DecisionTree); ok {
		return x.DecisionTree
	}
	return nil
}

func (m *Model) GetEnsemble() *Ensemble {
	if x, ok := m.GetModel().(*Model_Ensemble); ok {
		return x.Ensemble
	}
	return nil
}

func (m *Model) GetCustomModel() *any.Any {
	if x, ok := m.GetModel().(*Model_CustomModel); ok {
		return x.CustomModel
	}
	return nil
}

func (m *Model) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Model) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Model_DecisionTree)(nil),
		(*Model_Ensemble)(nil),
		(*Model_CustomModel)(nil),
	}
}

type ModelAndFeatures struct {
	// Given a FeatureId feature_id, the feature's description is in
	// features[feature_id.id.value].
	Features             map[string]*ModelAndFeatures_Feature `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Model                *Model                               `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	AdditionalData       []*any.Any                           `protobuf:"bytes,3,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ModelAndFeatures) Reset()         { *m = ModelAndFeatures{} }
func (m *ModelAndFeatures) String() string { return proto.CompactTextString(m) }
func (*ModelAndFeatures) ProtoMessage()    {}
func (*ModelAndFeatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{1}
}

func (m *ModelAndFeatures) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModelAndFeatures.Unmarshal(m, b)
}
func (m *ModelAndFeatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModelAndFeatures.Marshal(b, m, deterministic)
}
func (m *ModelAndFeatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelAndFeatures.Merge(m, src)
}
func (m *ModelAndFeatures) XXX_Size() int {
	return xxx_messageInfo_ModelAndFeatures.Size(m)
}
func (m *ModelAndFeatures) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelAndFeatures.DiscardUnknown(m)
}

var xxx_messageInfo_ModelAndFeatures proto.InternalMessageInfo

func (m *ModelAndFeatures) GetFeatures() map[string]*ModelAndFeatures_Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ModelAndFeatures) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *ModelAndFeatures) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type ModelAndFeatures_Feature struct {
	// TODO(jonasz): Remove this field, as it's confusing. Ctx: cr/153569450.
	FeatureId            *FeatureId `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"` // Deprecated: Do not use.
	AdditionalData       []*any.Any `protobuf:"bytes,2,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ModelAndFeatures_Feature) Reset()         { *m = ModelAndFeatures_Feature{} }
func (m *ModelAndFeatures_Feature) String() string { return proto.CompactTextString(m) }
func (*ModelAndFeatures_Feature) ProtoMessage()    {}
func (*ModelAndFeatures_Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{1, 0}
}

func (m *ModelAndFeatures_Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModelAndFeatures_Feature.Unmarshal(m, b)
}
func (m *ModelAndFeatures_Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModelAndFeatures_Feature.Marshal(b, m, deterministic)
}
func (m *ModelAndFeatures_Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelAndFeatures_Feature.Merge(m, src)
}
func (m *ModelAndFeatures_Feature) XXX_Size() int {
	return xxx_messageInfo_ModelAndFeatures_Feature.Size(m)
}
func (m *ModelAndFeatures_Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelAndFeatures_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_ModelAndFeatures_Feature proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *ModelAndFeatures_Feature) GetFeatureId() *FeatureId {
	if m != nil {
		return m.FeatureId
	}
	return nil
}

func (m *ModelAndFeatures_Feature) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// An ordered sequence of models. This message can be used to express bagged or
// boosted models, as well as custom ensembles.
type Ensemble struct {
	Members []*Ensemble_Member `protobuf:"bytes,100,rep,name=members,proto3" json:"members,omitempty"`
	// The presence of a certain combination_technique indicates how to combine
	// the outputs of member models in order to compute the ensemble's output.
	//
	// Types that are valid to be assigned to CombinationTechnique:
	//	*Ensemble_SummationCombinationTechnique
	//	*Ensemble_AveragingCombinationTechnique
	//	*Ensemble_CustomCombinationTechnique
	CombinationTechnique isEnsemble_CombinationTechnique `protobuf_oneof:"combination_technique"`
	AdditionalData       []*any.Any                      `protobuf:"bytes,4,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *Ensemble) Reset()         { *m = Ensemble{} }
func (m *Ensemble) String() string { return proto.CompactTextString(m) }
func (*Ensemble) ProtoMessage()    {}
func (*Ensemble) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{2}
}

func (m *Ensemble) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ensemble.Unmarshal(m, b)
}
func (m *Ensemble) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ensemble.Marshal(b, m, deterministic)
}
func (m *Ensemble) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ensemble.Merge(m, src)
}
func (m *Ensemble) XXX_Size() int {
	return xxx_messageInfo_Ensemble.Size(m)
}
func (m *Ensemble) XXX_DiscardUnknown() {
	xxx_messageInfo_Ensemble.DiscardUnknown(m)
}

var xxx_messageInfo_Ensemble proto.InternalMessageInfo

func (m *Ensemble) GetMembers() []*Ensemble_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type isEnsemble_CombinationTechnique interface {
	isEnsemble_CombinationTechnique()
}

type Ensemble_SummationCombinationTechnique struct {
	SummationCombinationTechnique *Summation `protobuf:"bytes,1,opt,name=summation_combination_technique,json=summationCombinationTechnique,proto3,oneof"`
}

type Ensemble_AveragingCombinationTechnique struct {
	AveragingCombinationTechnique *Averaging `protobuf:"bytes,2,opt,name=averaging_combination_technique,json=averagingCombinationTechnique,proto3,oneof"`
}

type Ensemble_CustomCombinationTechnique struct {
	CustomCombinationTechnique *any.Any `protobuf:"bytes,3,opt,name=custom_combination_technique,json=customCombinationTechnique,proto3,oneof"`
}

func (*Ensemble_SummationCombinationTechnique) isEnsemble_CombinationTechnique() {}

func (*Ensemble_AveragingCombinationTechnique) isEnsemble_CombinationTechnique() {}

func (*Ensemble_CustomCombinationTechnique) isEnsemble_CombinationTechnique() {}

func (m *Ensemble) GetCombinationTechnique() isEnsemble_CombinationTechnique {
	if m != nil {
		return m.CombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetSummationCombinationTechnique() *Summation {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_SummationCombinationTechnique); ok {
		return x.SummationCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetAveragingCombinationTechnique() *Averaging {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_AveragingCombinationTechnique); ok {
		return x.AveragingCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetCustomCombinationTechnique() *any.Any {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_CustomCombinationTechnique); ok {
		return x.CustomCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Ensemble) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Ensemble_SummationCombinationTechnique)(nil),
		(*Ensemble_AveragingCombinationTechnique)(nil),
		(*Ensemble_CustomCombinationTechnique)(nil),
	}
}

type Ensemble_Member struct {
	Submodel             *Model               `protobuf:"bytes,1,opt,name=submodel,proto3" json:"submodel,omitempty"`
	SubmodelId           *wrappers.Int32Value `protobuf:"bytes,2,opt,name=submodel_id,json=submodelId,proto3" json:"submodel_id,omitempty"`
	AdditionalData       []*any.Any           `protobuf:"bytes,3,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Ensemble_Member) Reset()         { *m = Ensemble_Member{} }
func (m *Ensemble_Member) String() string { return proto.CompactTextString(m) }
func (*Ensemble_Member) ProtoMessage()    {}
func (*Ensemble_Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{2, 0}
}

func (m *Ensemble_Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ensemble_Member.Unmarshal(m, b)
}
func (m *Ensemble_Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ensemble_Member.Marshal(b, m, deterministic)
}
func (m *Ensemble_Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ensemble_Member.Merge(m, src)
}
func (m *Ensemble_Member) XXX_Size() int {
	return xxx_messageInfo_Ensemble_Member.Size(m)
}
func (m *Ensemble_Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Ensemble_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Ensemble_Member proto.InternalMessageInfo

func (m *Ensemble_Member) GetSubmodel() *Model {
	if m != nil {
		return m.Submodel
	}
	return nil
}

func (m *Ensemble_Member) GetSubmodelId() *wrappers.Int32Value {
	if m != nil {
		return m.SubmodelId
	}
	return nil
}

func (m *Ensemble_Member) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// When present, the Ensemble's output is the sum of member models' outputs.
type Summation struct {
	AdditionalData       []*any.Any `protobuf:"bytes,1,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Summation) Reset()         { *m = Summation{} }
func (m *Summation) String() string { return proto.CompactTextString(m) }
func (*Summation) ProtoMessage()    {}
func (*Summation) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{3}
}

func (m *Summation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summation.Unmarshal(m, b)
}
func (m *Summation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summation.Marshal(b, m, deterministic)
}
func (m *Summation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summation.Merge(m, src)
}
func (m *Summation) XXX_Size() int {
	return xxx_messageInfo_Summation.Size(m)
}
func (m *Summation) XXX_DiscardUnknown() {
	xxx_messageInfo_Summation.DiscardUnknown(m)
}

var xxx_messageInfo_Summation proto.InternalMessageInfo

func (m *Summation) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// When present, the Ensemble's output is the average of member models' outputs.
type Averaging struct {
	AdditionalData       []*any.Any `protobuf:"bytes,1,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Averaging) Reset()         { *m = Averaging{} }
func (m *Averaging) String() string { return proto.CompactTextString(m) }
func (*Averaging) ProtoMessage()    {}
func (*Averaging) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{4}
}

func (m *Averaging) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Averaging.Unmarshal(m, b)
}
func (m *Averaging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Averaging.Marshal(b, m, deterministic)
}
func (m *Averaging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Averaging.Merge(m, src)
}
func (m *Averaging) XXX_Size() int {
	return xxx_messageInfo_Averaging.Size(m)
}
func (m *Averaging) XXX_DiscardUnknown() {
	xxx_messageInfo_Averaging.DiscardUnknown(m)
}

var xxx_messageInfo_Averaging proto.InternalMessageInfo

func (m *Averaging) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type DecisionTree struct {
	Nodes                []*TreeNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	AdditionalData       []*any.Any  `protobuf:"bytes,2,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DecisionTree) Reset()         { *m = DecisionTree{} }
func (m *DecisionTree) String() string { return proto.CompactTextString(m) }
func (*DecisionTree) ProtoMessage()    {}
func (*DecisionTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{5}
}

func (m *DecisionTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecisionTree.Unmarshal(m, b)
}
func (m *DecisionTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecisionTree.Marshal(b, m, deterministic)
}
func (m *DecisionTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTree.Merge(m, src)
}
func (m *DecisionTree) XXX_Size() int {
	return xxx_messageInfo_DecisionTree.Size(m)
}
func (m *DecisionTree) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTree.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTree proto.InternalMessageInfo

func (m *DecisionTree) GetNodes() []*TreeNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DecisionTree) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type TreeNode struct {
	// Following fields are provided for convenience and better readability.
	// Filling them in is not required.
	NodeId      *wrappers.Int32Value `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Depth       *wrappers.Int32Value `protobuf:"bytes,2,opt,name=depth,proto3" json:"depth,omitempty"`
	SubtreeSize *wrappers.Int32Value `protobuf:"bytes,3,opt,name=subtree_size,json=subtreeSize,proto3" json:"subtree_size,omitempty"`
	// Types that are valid to be assigned to NodeType:
	//	*TreeNode_BinaryNode
	//	*TreeNode_Leaf
	//	*TreeNode_CustomNodeType
	NodeType             isTreeNode_NodeType `protobuf_oneof:"node_type"`
	AdditionalData       []*any.Any          `protobuf:"bytes,7,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TreeNode) Reset()         { *m = TreeNode{} }
func (m *TreeNode) String() string { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()    {}
func (*TreeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{6}
}

func (m *TreeNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeNode.Unmarshal(m, b)
}
func (m *TreeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeNode.Marshal(b, m, deterministic)
}
func (m *TreeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeNode.Merge(m, src)
}
func (m *TreeNode) XXX_Size() int {
	return xxx_messageInfo_TreeNode.Size(m)
}
func (m *TreeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeNode.DiscardUnknown(m)
}

var xxx_messageInfo_TreeNode proto.InternalMessageInfo

func (m *TreeNode) GetNodeId() *wrappers.Int32Value {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *TreeNode) GetDepth() *wrappers.Int32Value {
	if m != nil {
		return m.Depth
	}
	return nil
}

func (m *TreeNode) GetSubtreeSize() *wrappers.Int32Value {
	if m != nil {
		return m.SubtreeSize
	}
	return nil
}

type isTreeNode_NodeType interface {
	isTreeNode_NodeType()
}

type TreeNode_BinaryNode struct {
	BinaryNode *BinaryNode `protobuf:"bytes,4,opt,name=binary_node,json=binaryNode,proto3,oneof"`
}

type TreeNode_Leaf struct {
	Leaf *Leaf `protobuf:"bytes,5,opt,name=leaf,proto3,oneof"`
}

type TreeNode_CustomNodeType struct {
	CustomNodeType *any.Any `protobuf:"bytes,6,opt,name=custom_node_type,json=customNodeType,proto3,oneof"`
}

func (*TreeNode_BinaryNode) isTreeNode_NodeType() {}

func (*TreeNode_Leaf) isTreeNode_NodeType() {}

func (*TreeNode_CustomNodeType) isTreeNode_NodeType() {}

func (m *TreeNode) GetNodeType() isTreeNode_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (m *TreeNode) GetBinaryNode() *BinaryNode {
	if x, ok := m.GetNodeType().(*TreeNode_BinaryNode); ok {
		return x.BinaryNode
	}
	return nil
}

func (m *TreeNode) GetLeaf() *Leaf {
	if x, ok := m.GetNodeType().(*TreeNode_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (m *TreeNode) GetCustomNodeType() *any.Any {
	if x, ok := m.GetNodeType().(*TreeNode_CustomNodeType); ok {
		return x.CustomNodeType
	}
	return nil
}

func (m *TreeNode) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TreeNode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TreeNode_BinaryNode)(nil),
		(*TreeNode_Leaf)(nil),
		(*TreeNode_CustomNodeType)(nil),
	}
}

type BinaryNode struct {
	LeftChildId  *wrappers.Int32Value `protobuf:"bytes,1,opt,name=left_child_id,json=leftChildId,proto3" json:"left_child_id,omitempty"`
	RightChildId *wrappers.Int32Value `protobuf:"bytes,2,opt,name=right_child_id,json=rightChildId,proto3" json:"right_child_id,omitempty"`
	// When left_child_test is undefined for a particular datapoint (e.g. because
	// it's not defined when feature value is missing), the datapoint should go
	// in this direction.
	DefaultDirection BinaryNode_Direction `protobuf:"varint,3,opt,name=default_direction,json=defaultDirection,proto3,enum=tensorflow.decision_trees.BinaryNode_Direction" json:"default_direction,omitempty"`
	// When a datapoint satisfies the test, it should be propagated to the left
	// child.
	//
	// Types that are valid to be assigned to LeftChildTest:
	//	*BinaryNode_InequalityLeftChildTest
	//	*BinaryNode_CustomLeftChildTest
	LeftChildTest        isBinaryNode_LeftChildTest `protobuf_oneof:"left_child_test"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *BinaryNode) Reset()         { *m = BinaryNode{} }
func (m *BinaryNode) String() string { return proto.CompactTextString(m) }
func (*BinaryNode) ProtoMessage()    {}
func (*BinaryNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{7}
}

func (m *BinaryNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryNode.Unmarshal(m, b)
}
func (m *BinaryNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryNode.Marshal(b, m, deterministic)
}
func (m *BinaryNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryNode.Merge(m, src)
}
func (m *BinaryNode) XXX_Size() int {
	return xxx_messageInfo_BinaryNode.Size(m)
}
func (m *BinaryNode) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryNode.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryNode proto.InternalMessageInfo

func (m *BinaryNode) GetLeftChildId() *wrappers.Int32Value {
	if m != nil {
		return m.LeftChildId
	}
	return nil
}

func (m *BinaryNode) GetRightChildId() *wrappers.Int32Value {
	if m != nil {
		return m.RightChildId
	}
	return nil
}

func (m *BinaryNode) GetDefaultDirection() BinaryNode_Direction {
	if m != nil {
		return m.DefaultDirection
	}
	return BinaryNode_LEFT
}

type isBinaryNode_LeftChildTest interface {
	isBinaryNode_LeftChildTest()
}

type BinaryNode_InequalityLeftChildTest struct {
	InequalityLeftChildTest *InequalityTest `protobuf:"bytes,4,opt,name=inequality_left_child_test,json=inequalityLeftChildTest,proto3,oneof"`
}

type BinaryNode_CustomLeftChildTest struct {
	CustomLeftChildTest *any.Any `protobuf:"bytes,5,opt,name=custom_left_child_test,json=customLeftChildTest,proto3,oneof"`
}

func (*BinaryNode_InequalityLeftChildTest) isBinaryNode_LeftChildTest() {}

func (*BinaryNode_CustomLeftChildTest) isBinaryNode_LeftChildTest() {}

func (m *BinaryNode) GetLeftChildTest() isBinaryNode_LeftChildTest {
	if m != nil {
		return m.LeftChildTest
	}
	return nil
}

func (m *BinaryNode) GetInequalityLeftChildTest() *InequalityTest {
	if x, ok := m.GetLeftChildTest().(*BinaryNode_InequalityLeftChildTest); ok {
		return x.InequalityLeftChildTest
	}
	return nil
}

func (m *BinaryNode) GetCustomLeftChildTest() *any.Any {
	if x, ok := m.GetLeftChildTest().(*BinaryNode_CustomLeftChildTest); ok {
		return x.CustomLeftChildTest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BinaryNode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BinaryNode_InequalityLeftChildTest)(nil),
		(*BinaryNode_CustomLeftChildTest)(nil),
	}
}

// A SparseVector represents a vector in which only certain select elements
// are non-zero.  Maps labels to values (e.g. class id to probability or count).
type SparseVector struct {
	SparseValue          map[int64]*Value `protobuf:"bytes,1,rep,name=sparse_value,json=sparseValue,proto3" json:"sparse_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SparseVector) Reset()         { *m = SparseVector{} }
func (m *SparseVector) String() string { return proto.CompactTextString(m) }
func (*SparseVector) ProtoMessage()    {}
func (*SparseVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{8}
}

func (m *SparseVector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparseVector.Unmarshal(m, b)
}
func (m *SparseVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparseVector.Marshal(b, m, deterministic)
}
func (m *SparseVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparseVector.Merge(m, src)
}
func (m *SparseVector) XXX_Size() int {
	return xxx_messageInfo_SparseVector.Size(m)
}
func (m *SparseVector) XXX_DiscardUnknown() {
	xxx_messageInfo_SparseVector.DiscardUnknown(m)
}

var xxx_messageInfo_SparseVector proto.InternalMessageInfo

func (m *SparseVector) GetSparseValue() map[int64]*Value {
	if m != nil {
		return m.SparseValue
	}
	return nil
}

type Vector struct {
	Value                []*Value `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{9}
}

func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetValue() []*Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Leaf struct {
	// Types that are valid to be assigned to Leaf:
	//	*Leaf_Vector
	//	*Leaf_SparseVector
	Leaf isLeaf_Leaf `protobuf_oneof:"leaf"`
	// For non-standard handling of leaves.
	AdditionalData       []*any.Any `protobuf:"bytes,3,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Leaf) Reset()         { *m = Leaf{} }
func (m *Leaf) String() string { return proto.CompactTextString(m) }
func (*Leaf) ProtoMessage()    {}
func (*Leaf) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{10}
}

func (m *Leaf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Leaf.Unmarshal(m, b)
}
func (m *Leaf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Leaf.Marshal(b, m, deterministic)
}
func (m *Leaf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Leaf.Merge(m, src)
}
func (m *Leaf) XXX_Size() int {
	return xxx_messageInfo_Leaf.Size(m)
}
func (m *Leaf) XXX_DiscardUnknown() {
	xxx_messageInfo_Leaf.DiscardUnknown(m)
}

var xxx_messageInfo_Leaf proto.InternalMessageInfo

type isLeaf_Leaf interface {
	isLeaf_Leaf()
}

type Leaf_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}

type Leaf_SparseVector struct {
	SparseVector *SparseVector `protobuf:"bytes,2,opt,name=sparse_vector,json=sparseVector,proto3,oneof"`
}

func (*Leaf_Vector) isLeaf_Leaf() {}

func (*Leaf_SparseVector) isLeaf_Leaf() {}

func (m *Leaf) GetLeaf() isLeaf_Leaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *Leaf) GetVector() *Vector {
	if x, ok := m.GetLeaf().(*Leaf_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *Leaf) GetSparseVector() *SparseVector {
	if x, ok := m.GetLeaf().(*Leaf_SparseVector); ok {
		return x.SparseVector
	}
	return nil
}

func (m *Leaf) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Leaf) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Leaf_Vector)(nil),
		(*Leaf_SparseVector)(nil),
	}
}

type FeatureId struct {
	Id                   *wrappers.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AdditionalData       []*any.Any            `protobuf:"bytes,2,rep,name=additional_data,json=additionalData,proto3" json:"additional_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FeatureId) Reset()         { *m = FeatureId{} }
func (m *FeatureId) String() string { return proto.CompactTextString(m) }
func (*FeatureId) ProtoMessage()    {}
func (*FeatureId) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{11}
}

func (m *FeatureId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureId.Unmarshal(m, b)
}
func (m *FeatureId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureId.Marshal(b, m, deterministic)
}
func (m *FeatureId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureId.Merge(m, src)
}
func (m *FeatureId) XXX_Size() int {
	return xxx_messageInfo_FeatureId.Size(m)
}
func (m *FeatureId) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureId.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureId proto.InternalMessageInfo

func (m *FeatureId) GetId() *wrappers.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FeatureId) GetAdditionalData() []*any.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type ObliqueFeatures struct {
	// total value is sum(features[i] * weights[i]).
	Features             []*FeatureId `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	Weights              []float32    `protobuf:"fixed32,2,rep,packed,name=weights,proto3" json:"weights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ObliqueFeatures) Reset()         { *m = ObliqueFeatures{} }
func (m *ObliqueFeatures) String() string { return proto.CompactTextString(m) }
func (*ObliqueFeatures) ProtoMessage()    {}
func (*ObliqueFeatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{12}
}

func (m *ObliqueFeatures) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObliqueFeatures.Unmarshal(m, b)
}
func (m *ObliqueFeatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObliqueFeatures.Marshal(b, m, deterministic)
}
func (m *ObliqueFeatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObliqueFeatures.Merge(m, src)
}
func (m *ObliqueFeatures) XXX_Size() int {
	return xxx_messageInfo_ObliqueFeatures.Size(m)
}
func (m *ObliqueFeatures) XXX_DiscardUnknown() {
	xxx_messageInfo_ObliqueFeatures.DiscardUnknown(m)
}

var xxx_messageInfo_ObliqueFeatures proto.InternalMessageInfo

func (m *ObliqueFeatures) GetFeatures() []*FeatureId {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ObliqueFeatures) GetWeights() []float32 {
	if m != nil {
		return m.Weights
	}
	return nil
}

type InequalityTest struct {
	// When the feature is missing, the test's outcome is undefined.
	//
	// Types that are valid to be assigned to FeatureSum:
	//	*InequalityTest_FeatureId
	//	*InequalityTest_Oblique
	FeatureSum           isInequalityTest_FeatureSum `protobuf_oneof:"FeatureSum"`
	Type                 InequalityTest_Type         `protobuf:"varint,2,opt,name=type,proto3,enum=tensorflow.decision_trees.InequalityTest_Type" json:"type,omitempty"`
	Threshold            *Value                      `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *InequalityTest) Reset()         { *m = InequalityTest{} }
func (m *InequalityTest) String() string { return proto.CompactTextString(m) }
func (*InequalityTest) ProtoMessage()    {}
func (*InequalityTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{13}
}

func (m *InequalityTest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InequalityTest.Unmarshal(m, b)
}
func (m *InequalityTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InequalityTest.Marshal(b, m, deterministic)
}
func (m *InequalityTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InequalityTest.Merge(m, src)
}
func (m *InequalityTest) XXX_Size() int {
	return xxx_messageInfo_InequalityTest.Size(m)
}
func (m *InequalityTest) XXX_DiscardUnknown() {
	xxx_messageInfo_InequalityTest.DiscardUnknown(m)
}

var xxx_messageInfo_InequalityTest proto.InternalMessageInfo

type isInequalityTest_FeatureSum interface {
	isInequalityTest_FeatureSum()
}

type InequalityTest_FeatureId struct {
	FeatureId *FeatureId `protobuf:"bytes,1,opt,name=feature_id,json=featureId,proto3,oneof"`
}

type InequalityTest_Oblique struct {
	Oblique *ObliqueFeatures `protobuf:"bytes,4,opt,name=oblique,proto3,oneof"`
}

func (*InequalityTest_FeatureId) isInequalityTest_FeatureSum() {}

func (*InequalityTest_Oblique) isInequalityTest_FeatureSum() {}

func (m *InequalityTest) GetFeatureSum() isInequalityTest_FeatureSum {
	if m != nil {
		return m.FeatureSum
	}
	return nil
}

func (m *InequalityTest) GetFeatureId() *FeatureId {
	if x, ok := m.GetFeatureSum().(*InequalityTest_FeatureId); ok {
		return x.FeatureId
	}
	return nil
}

func (m *InequalityTest) GetOblique() *ObliqueFeatures {
	if x, ok := m.GetFeatureSum().(*InequalityTest_Oblique); ok {
		return x.Oblique
	}
	return nil
}

func (m *InequalityTest) GetType() InequalityTest_Type {
	if m != nil {
		return m.Type
	}
	return InequalityTest_LESS_OR_EQUAL
}

func (m *InequalityTest) GetThreshold() *Value {
	if m != nil {
		return m.Threshold
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InequalityTest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InequalityTest_FeatureId)(nil),
		(*InequalityTest_Oblique)(nil),
	}
}

// Represents a single value of any type, e.g. 5 or "abc".
type Value struct {
	// Types that are valid to be assigned to Value:
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_CustomValue
	Value                isValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_370e5bdb364002c0, []int{14}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

type isValue_Value interface {
	isValue_Value()
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Value_CustomValue struct {
	CustomValue *any.Any `protobuf:"bytes,5,opt,name=custom_value,json=customValue,proto3,oneof"`
}

func (*Value_FloatValue) isValue_Value() {}

func (*Value_DoubleValue) isValue_Value() {}

func (*Value_Int32Value) isValue_Value() {}

func (*Value_Int64Value) isValue_Value() {}

func (*Value_CustomValue) isValue_Value() {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Value) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Value) GetCustomValue() *any.Any {
	if x, ok := m.GetValue().(*Value_CustomValue); ok {
		return x.CustomValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Value) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_CustomValue)(nil),
	}
}

func init() {
	proto.RegisterEnum("tensorflow.decision_trees.BinaryNode_Direction", BinaryNode_Direction_name, BinaryNode_Direction_value)
	proto.RegisterEnum("tensorflow.decision_trees.InequalityTest_Type", InequalityTest_Type_name, InequalityTest_Type_value)
	proto.RegisterType((*Model)(nil), "tensorflow.decision_trees.Model")
	proto.RegisterType((*ModelAndFeatures)(nil), "tensorflow.decision_trees.ModelAndFeatures")
	proto.RegisterMapType((map[string]*ModelAndFeatures_Feature)(nil), "tensorflow.decision_trees.ModelAndFeatures.FeaturesEntry")
	proto.RegisterType((*ModelAndFeatures_Feature)(nil), "tensorflow.decision_trees.ModelAndFeatures.Feature")
	proto.RegisterType((*Ensemble)(nil), "tensorflow.decision_trees.Ensemble")
	proto.RegisterType((*Ensemble_Member)(nil), "tensorflow.decision_trees.Ensemble.Member")
	proto.RegisterType((*Summation)(nil), "tensorflow.decision_trees.Summation")
	proto.RegisterType((*Averaging)(nil), "tensorflow.decision_trees.Averaging")
	proto.RegisterType((*DecisionTree)(nil), "tensorflow.decision_trees.DecisionTree")
	proto.RegisterType((*TreeNode)(nil), "tensorflow.decision_trees.TreeNode")
	proto.RegisterType((*BinaryNode)(nil), "tensorflow.decision_trees.BinaryNode")
	proto.RegisterType((*SparseVector)(nil), "tensorflow.decision_trees.SparseVector")
	proto.RegisterMapType((map[int64]*Value)(nil), "tensorflow.decision_trees.SparseVector.SparseValueEntry")
	proto.RegisterType((*Vector)(nil), "tensorflow.decision_trees.Vector")
	proto.RegisterType((*Leaf)(nil), "tensorflow.decision_trees.Leaf")
	proto.RegisterType((*FeatureId)(nil), "tensorflow.decision_trees.FeatureId")
	proto.RegisterType((*ObliqueFeatures)(nil), "tensorflow.decision_trees.ObliqueFeatures")
	proto.RegisterType((*InequalityTest)(nil), "tensorflow.decision_trees.InequalityTest")
	proto.RegisterType((*Value)(nil), "tensorflow.decision_trees.Value")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/decision_trees/proto/generic_tree_model.proto", fileDescriptor_370e5bdb364002c0)
}

var fileDescriptor_370e5bdb364002c0 = []byte{
	// 1335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x5f, 0x93, 0xd3, 0x54,
	0x14, 0x6f, 0xd2, 0x7f, 0xdb, 0xd3, 0xee, 0x52, 0xae, 0x28, 0xa5, 0xa2, 0x2c, 0x41, 0x47, 0x74,
	0x9c, 0x74, 0x04, 0xdc, 0x01, 0x45, 0xdc, 0x96, 0x2d, 0xa4, 0xb8, 0x80, 0xde, 0x16, 0xc6, 0x51,
	0x67, 0x6a, 0xda, 0xdc, 0xb6, 0x19, 0xd3, 0xa4, 0x24, 0x37, 0x60, 0x79, 0xf5, 0xc5, 0x57, 0x3f,
	0x80, 0xef, 0x7e, 0x0e, 0x7d, 0xf6, 0x03, 0xc8, 0x07, 0xf0, 0x33, 0xf8, 0xe8, 0xdc, 0x3f, 0x49,
	0xba, 0x4b, 0x37, 0x1b, 0xd8, 0xb7, 0x7b, 0x6f, 0xcf, 0xef, 0x77, 0xee, 0x39, 0xe7, 0x9e, 0x3f,
	0x29, 0xec, 0x52, 0xe2, 0x06, 0x9e, 0x3f, 0x71, 0xbc, 0x67, 0xad, 0xb1, 0xe7, 0x52, 0xdf, 0x1e,
	0xb5, 0x2c, 0x32, 0xb6, 0x03, 0xdb, 0x73, 0x87, 0xd4, 0x27, 0x24, 0x68, 0x2d, 0x7c, 0x8f, 0x7a,
	0xad, 0x29, 0x71, 0x89, 0x6f, 0x8f, 0xf9, 0xd9, 0x70, 0xee, 0x59, 0xc4, 0xd1, 0xf9, 0x0f, 0xe8,
	0x5c, 0xc2, 0xa0, 0x1f, 0x44, 0x36, 0xcf, 0x4d, 0x3d, 0x6f, 0xea, 0x10, 0xc1, 0x30, 0x0a, 0x27,
	0x2d, 0xd3, 0x5d, 0x0a, 0x54, 0xf3, 0xdd, 0xc3, 0x3f, 0x3d, 0xf3, 0xcd, 0xc5, 0x82, 0xf8, 0x81,
	0xf8, 0x5d, 0xfb, 0x5d, 0x85, 0xe2, 0x7d, 0xa6, 0x05, 0x3d, 0x80, 0xcd, 0x03, 0xb4, 0x0d, 0x65,
	0x5b, 0xb9, 0x5c, 0xbd, 0xf2, 0x81, 0x7e, 0xa4, 0x5e, 0x7d, 0x4f, 0x6e, 0x07, 0x3e, 0x21, 0x46,
	0x0e, 0xd7, 0xac, 0x95, 0x3d, 0x6a, 0xc3, 0x06, 0x71, 0x03, 0x32, 0x1f, 0x39, 0xa4, 0xa1, 0x72,
	0xaa, 0x4b, 0x29, 0x54, 0x5d, 0x29, 0x6a, 0xe4, 0x70, 0x0c, 0x43, 0x37, 0xa0, 0x36, 0x0e, 0x03,
	0xea, 0xcd, 0x85, 0x23, 0x1a, 0x79, 0x4e, 0x73, 0x46, 0x17, 0x36, 0xe9, 0x91, 0x4d, 0x7a, 0xdb,
	0x5d, 0x1a, 0x39, 0x5c, 0x15, 0xb2, 0xc2, 0x9a, 0x2f, 0xe0, 0x94, 0x69, 0x59, 0x36, 0xb5, 0x3d,
	0xd7, 0x74, 0x86, 0x96, 0x49, 0xcd, 0x46, 0x61, 0x3b, 0x7f, 0x14, 0x1a, 0x6f, 0x25, 0xc2, 0x7b,
	0x26, 0x35, 0x3b, 0x65, 0x28, 0x72, 0x95, 0xda, 0xbf, 0x79, 0xa8, 0x73, 0xc6, 0xb6, 0x6b, 0xdd,
	0x21, 0x26, 0x0d, 0x7d, 0x12, 0xa0, 0x47, 0xb0, 0x31, 0x91, 0xeb, 0x86, 0xc2, 0x59, 0x6f, 0xa4,
	0x98, 0x76, 0x18, 0xae, 0x47, 0x8b, 0xae, 0x4b, 0xfd, 0x25, 0x8e, 0xa9, 0xd0, 0x8e, 0x54, 0x2a,
	0xdd, 0xb5, 0x7d, 0x1c, 0x27, 0x16, 0xe2, 0xeb, 0x6c, 0xcd, 0x67, 0xb7, 0xb5, 0xf9, 0x9b, 0x02,
	0x65, 0x79, 0x25, 0x74, 0x17, 0x40, 0x5e, 0x67, 0x68, 0x5b, 0xf2, 0x05, 0xbc, 0x97, 0x72, 0x0f,
	0x89, 0xeb, 0x59, 0x1d, 0xb5, 0xa1, 0xe0, 0xca, 0x24, 0xda, 0xae, 0xbb, 0x93, 0xfa, 0x0a, 0x77,
	0x5a, 0xc0, 0xe6, 0x01, 0x2f, 0xa1, 0x3a, 0xe4, 0x7f, 0x22, 0x4b, 0x7e, 0xa3, 0x0a, 0x66, 0x4b,
	0xd4, 0x83, 0xe2, 0x53, 0xd3, 0x09, 0xa3, 0xc7, 0x75, 0xf5, 0x35, 0x22, 0x80, 0x05, 0xc3, 0x67,
	0xea, 0x75, 0x45, 0xfb, 0xa3, 0x08, 0x1b, 0xd1, 0x23, 0x44, 0x7b, 0x50, 0x9e, 0x93, 0xf9, 0x88,
	0xf8, 0x41, 0xc3, 0xe2, 0xb7, 0xfe, 0x28, 0xc3, 0xd3, 0xd5, 0xef, 0x73, 0x08, 0x8e, 0xa0, 0xc8,
	0x85, 0x0b, 0x41, 0x38, 0x9f, 0x9b, 0xcc, 0xae, 0xe1, 0xd8, 0x9b, 0x8f, 0x6c, 0x57, 0xac, 0x29,
	0x19, 0xcf, 0x5c, 0xfb, 0x49, 0x48, 0x32, 0x78, 0xb8, 0x1f, 0x31, 0x18, 0x39, 0xfc, 0x4e, 0x4c,
	0x77, 0x3b, 0x61, 0x1b, 0x44, 0x64, 0x4c, 0x9f, 0xf9, 0x94, 0xf8, 0xe6, 0xd4, 0x76, 0xa7, 0x47,
	0xe8, 0x53, 0x8f, 0xd5, 0xd7, 0x8e, 0x18, 0x98, 0xbe, 0x98, 0x6e, 0xad, 0xbe, 0x6f, 0xe1, 0xbc,
	0x4c, 0xcf, 0xf5, 0xca, 0xd2, 0xd3, 0xb5, 0x29, 0xb0, 0x6b, 0x99, 0x4f, 0x96, 0xbd, 0xcd, 0xbf,
	0x14, 0x28, 0x89, 0x60, 0xa0, 0x9b, 0xb0, 0x11, 0x84, 0x23, 0x91, 0x56, 0x4a, 0xc6, 0xb4, 0x8a,
	0x11, 0xe8, 0x26, 0x54, 0xa3, 0x35, 0xcb, 0x07, 0xe1, 0xbd, 0xb7, 0x5f, 0xba, 0x43, 0xcf, 0xa5,
	0x57, 0xaf, 0x3c, 0x66, 0x4f, 0x09, 0x43, 0x24, 0xbf, 0x3e, 0x07, 0x5e, 0x21, 0x2f, 0x3b, 0x67,
	0xe1, 0xcd, 0xb5, 0x7e, 0xd5, 0xee, 0x41, 0x25, 0x7e, 0x15, 0xeb, 0x94, 0x28, 0xd9, 0x95, 0x30,
	0xae, 0x38, 0xe2, 0x27, 0xe5, 0xfa, 0x55, 0x81, 0xda, 0x6a, 0x4b, 0x40, 0x37, 0xa0, 0xe8, 0x7a,
	0x56, 0x5c, 0x24, 0xd3, 0xea, 0x3f, 0x93, 0x7f, 0xe0, 0x59, 0x04, 0x0b, 0xc4, 0x09, 0xeb, 0x87,
	0xf6, 0x67, 0x1e, 0x36, 0x22, 0x4a, 0x74, 0x0d, 0xca, 0x8c, 0x34, 0xa9, 0x68, 0xa9, 0x11, 0x2c,
	0x31, 0xd9, 0x9e, 0x85, 0x3e, 0x81, 0xa2, 0x45, 0x16, 0x74, 0x96, 0x25, 0xea, 0x42, 0x12, 0xdd,
	0x82, 0x5a, 0x10, 0x8e, 0x78, 0xe7, 0x0e, 0xec, 0xe7, 0x51, 0x02, 0xa4, 0x22, 0xab, 0x12, 0xd0,
	0xb7, 0x9f, 0x13, 0x64, 0x40, 0x95, 0x85, 0xdb, 0x5f, 0x0e, 0xd9, 0x1d, 0x1a, 0x05, 0x0e, 0x7f,
	0x3f, 0xc5, 0x6b, 0x1d, 0x2e, 0xcd, 0x8c, 0x34, 0x72, 0x18, 0x46, 0xf1, 0x0e, 0x7d, 0x0a, 0x05,
	0x87, 0x98, 0x93, 0x46, 0x91, 0x53, 0x5c, 0x48, 0xa1, 0xd8, 0x27, 0xe6, 0xc4, 0xc8, 0x61, 0x2e,
	0x8e, 0x76, 0xa1, 0x2e, 0x33, 0x9a, 0x3b, 0x8c, 0x2e, 0x17, 0xa4, 0x51, 0x4a, 0xcd, 0xe2, 0x2d,
	0x21, 0xcf, 0x94, 0x0e, 0x96, 0x8b, 0xb5, 0x99, 0x5b, 0x7e, 0x85, 0x37, 0x5f, 0x85, 0x4a, 0xac,
	0x59, 0x7b, 0x91, 0x07, 0x48, 0x2c, 0x44, 0x5f, 0xc2, 0xa6, 0x43, 0x26, 0x74, 0x38, 0x9e, 0xd9,
	0x8e, 0x95, 0x31, 0x98, 0x55, 0x86, 0xb8, 0xcd, 0x00, 0x3d, 0x0b, 0xb5, 0x61, 0xcb, 0xb7, 0xa7,
	0xb3, 0x15, 0x86, 0x0c, 0xa1, 0xad, 0x71, 0x48, 0x44, 0xf1, 0x03, 0x9c, 0xb6, 0xc8, 0xc4, 0x0c,
	0x1d, 0x3a, 0xb4, 0x6c, 0x9f, 0x8c, 0xd9, 0xd5, 0x79, 0x98, 0xb7, 0xae, 0xb4, 0x32, 0xc5, 0x49,
	0xdf, 0x8b, 0x60, 0xb8, 0x2e, 0x99, 0xe2, 0x13, 0x34, 0x83, 0xa6, 0xed, 0x92, 0x27, 0xa1, 0xe9,
	0xd8, 0x74, 0x39, 0x5c, 0x31, 0x96, 0x92, 0x80, 0xca, 0xe7, 0xf0, 0x61, 0x8a, 0x9a, 0x5e, 0x0c,
	0x1e, 0x90, 0x80, 0x1a, 0x39, 0x7c, 0x36, 0xa1, 0xdb, 0x8f, 0x1c, 0xc1, 0x7e, 0x42, 0x5f, 0xc1,
	0x5b, 0x32, 0xd0, 0x87, 0xb5, 0x14, 0x53, 0xc3, 0xfd, 0x86, 0x40, 0x1d, 0x20, 0xd3, 0xb6, 0xa1,
	0x92, 0xd8, 0xb0, 0x01, 0x85, 0xfd, 0xee, 0x9d, 0x41, 0x3d, 0x87, 0x2a, 0x50, 0xc4, 0xbd, 0xbb,
	0xc6, 0xa0, 0xae, 0x74, 0x4e, 0xc3, 0xa9, 0x43, 0x7a, 0xb4, 0xbf, 0x15, 0xa8, 0xf5, 0x17, 0xa6,
	0x1f, 0x90, 0xc7, 0x64, 0x4c, 0x3d, 0x1f, 0x7d, 0x0f, 0xb5, 0x80, 0xef, 0x87, 0xa2, 0xad, 0x8b,
	0x9a, 0x71, 0x3d, 0xad, 0x35, 0xae, 0xc0, 0xa3, 0x0d, 0x83, 0x8a, 0xb9, 0xaa, 0x1a, 0x24, 0x27,
	0xcd, 0x1f, 0xa1, 0x7e, 0x58, 0x60, 0x75, 0xa4, 0xc8, 0x8b, 0x91, 0x62, 0xe7, 0xe0, 0x48, 0x91,
	0xd6, 0x29, 0x64, 0xde, 0x27, 0xf3, 0xc3, 0x2e, 0x94, 0xa4, 0x21, 0x31, 0x8b, 0xb0, 0x20, 0x2b,
	0x8b, 0xf6, 0x42, 0x81, 0x02, 0xcb, 0x46, 0xf4, 0x39, 0x94, 0x9e, 0x72, 0x2a, 0xf9, 0xc2, 0x2f,
	0xa6, 0x31, 0x70, 0x41, 0x23, 0x87, 0x25, 0x84, 0x8d, 0xf1, 0x91, 0x1b, 0x05, 0x87, 0x7a, 0xec,
	0x18, 0xbf, 0xea, 0x47, 0x36, 0xc6, 0x07, 0xab, 0x61, 0x39, 0x61, 0x13, 0x2b, 0x89, 0x42, 0xa4,
	0xfd, 0x0c, 0x95, 0x78, 0x56, 0x44, 0x1f, 0x83, 0x1a, 0xa7, 0xef, 0xf9, 0x97, 0x68, 0xfa, 0xd4,
	0xb7, 0xdd, 0xa9, 0x70, 0x8d, 0x6a, 0x9f, 0x74, 0x94, 0xd4, 0xe6, 0x70, 0xea, 0xe1, 0xc8, 0x61,
	0x8d, 0x33, 0x9e, 0xdf, 0x77, 0x5f, 0x9a, 0xdf, 0x33, 0xcd, 0xb8, 0x2b, 0xa3, 0x7a, 0x03, 0xca,
	0xcf, 0x08, 0x2b, 0x0c, 0x01, 0xbf, 0x8b, 0x8a, 0xa3, 0xad, 0xf6, 0x4b, 0x1e, 0xb6, 0x0e, 0xe6,
	0x21, 0xea, 0xbe, 0xee, 0x50, 0x6d, 0xe4, 0x56, 0x47, 0xea, 0x3b, 0x50, 0xf6, 0x84, 0x21, 0xb2,
	0x14, 0xa4, 0x0d, 0xa5, 0x87, 0x4c, 0x36, 0x72, 0x38, 0x02, 0xa3, 0x0e, 0x14, 0x78, 0x61, 0x57,
	0x79, 0xd9, 0xd2, 0x33, 0xd7, 0x13, 0x9d, 0x15, 0x78, 0xcc, 0xb1, 0xe8, 0x16, 0x54, 0xe8, 0xcc,
	0x27, 0xc1, 0xcc, 0x73, 0x2c, 0xd9, 0xe6, 0x8e, 0x7f, 0xe7, 0x09, 0x44, 0xfb, 0x1a, 0x0a, 0xbc,
	0x5d, 0x9c, 0x86, 0xcd, 0xfd, 0x6e, 0xbf, 0x3f, 0x7c, 0x88, 0x87, 0xdd, 0x6f, 0x1e, 0xb5, 0xf7,
	0xeb, 0x39, 0xb4, 0x09, 0x15, 0x7e, 0x34, 0x30, 0xda, 0x0f, 0xea, 0x0a, 0x3a, 0x03, 0xf5, 0xbb,
	0xb8, 0xdb, 0x1e, 0x74, 0x71, 0x22, 0xa4, 0xa2, 0x3a, 0xd4, 0xa2, 0x53, 0x2e, 0x97, 0xef, 0xd4,
	0x00, 0xa4, 0xb1, 0xfd, 0x70, 0xae, 0xfd, 0xa3, 0x40, 0x91, 0x2b, 0x45, 0x17, 0xa1, 0x3a, 0x71,
	0x3c, 0x93, 0xc6, 0x55, 0x45, 0xb9, 0xac, 0xb2, 0x66, 0xc9, 0x0f, 0x85, 0xc8, 0x25, 0xa8, 0x59,
	0x5e, 0x38, 0x72, 0xa2, 0xca, 0xc3, 0x1c, 0xa3, 0xb0, 0x0f, 0x4a, 0x71, 0x1a, 0xf3, 0xd8, 0xac,
	0x2b, 0x48, 0x19, 0x66, 0x73, 0x91, 0xf1, 0xd8, 0x71, 0xab, 0x90, 0x22, 0x3b, 0xd7, 0xa4, 0x08,
	0x0b, 0x52, 0x5e, 0x8a, 0xec, 0x5c, 0x13, 0x22, 0xc9, 0x17, 0xad, 0x90, 0x29, 0x66, 0xf9, 0xa2,
	0xe5, 0x50, 0xf6, 0x49, 0xca, 0x31, 0x9d, 0x87, 0xdf, 0xdd, 0x9b, 0xda, 0x74, 0x16, 0x8e, 0xf4,
	0xb1, 0x37, 0x6f, 0xad, 0xfc, 0xaf, 0xb0, 0x7e, 0x39, 0xf5, 0x5a, 0x63, 0xcf, 0x27, 0x47, 0xfc,
	0xeb, 0xf0, 0x9f, 0xa2, 0x8c, 0x4a, 0x5c, 0xed, 0xd5, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0c,
	0xb3, 0x1c, 0xb7, 0xa4, 0x10, 0x00, 0x00,
}
