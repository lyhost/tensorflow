// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/tensor_forest/proto/fertile_stats.proto

package tensor_forest

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	decision_trees "github.com/tensorflow/tensorflow/tensorflow/go/core/contrib/decision_trees"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FertileStats struct {
	// Tracks stats for each node.  node_to_slot[i] is the FertileSlot for node i.
	// This may be sized to max_nodes initially, or grow dynamically as needed.
	NodeToSlot           []*FertileSlot `protobuf:"bytes,1,rep,name=node_to_slot,json=nodeToSlot,proto3" json:"node_to_slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FertileStats) Reset()         { *m = FertileStats{} }
func (m *FertileStats) String() string { return proto.CompactTextString(m) }
func (*FertileStats) ProtoMessage()    {}
func (*FertileStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{0}
}

func (m *FertileStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FertileStats.Unmarshal(m, b)
}
func (m *FertileStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FertileStats.Marshal(b, m, deterministic)
}
func (m *FertileStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FertileStats.Merge(m, src)
}
func (m *FertileStats) XXX_Size() int {
	return xxx_messageInfo_FertileStats.Size(m)
}
func (m *FertileStats) XXX_DiscardUnknown() {
	xxx_messageInfo_FertileStats.DiscardUnknown(m)
}

var xxx_messageInfo_FertileStats proto.InternalMessageInfo

func (m *FertileStats) GetNodeToSlot() []*FertileSlot {
	if m != nil {
		return m.NodeToSlot
	}
	return nil
}

type GiniStats struct {
	// This allows us to quickly track and calculate impurity (classification)
	//  by storing the sum of input weights and the sum of the squares of the
	// input weights.  Weighted gini is then: 1 - (square / sum * sum).
	// Updates to these numbers are:
	//   old_i = leaf->value(label)
	//   new_i = old_i + incoming_weight
	//   sum -> sum + incoming_weight
	//   square -> square - (old_i ^ 2) + (new_i ^ 2)
	//   total_left_sum -> total_left_sum - old_left_i * old_total_i +
	//                                      new_left_i * new_total_i
	Square               float32  `protobuf:"fixed32,2,opt,name=square,proto3" json:"square,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GiniStats) Reset()         { *m = GiniStats{} }
func (m *GiniStats) String() string { return proto.CompactTextString(m) }
func (*GiniStats) ProtoMessage()    {}
func (*GiniStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{1}
}

func (m *GiniStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GiniStats.Unmarshal(m, b)
}
func (m *GiniStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GiniStats.Marshal(b, m, deterministic)
}
func (m *GiniStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiniStats.Merge(m, src)
}
func (m *GiniStats) XXX_Size() int {
	return xxx_messageInfo_GiniStats.Size(m)
}
func (m *GiniStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GiniStats.DiscardUnknown(m)
}

var xxx_messageInfo_GiniStats proto.InternalMessageInfo

func (m *GiniStats) GetSquare() float32 {
	if m != nil {
		return m.Square
	}
	return 0
}

type LeafStat struct {
	// The sum of the weights of the training examples that we have seen.
	// This is here, outside of the leaf_stat oneof, because almost all
	// types will want it.
	WeightSum float32 `protobuf:"fixed32,3,opt,name=weight_sum,json=weightSum,proto3" json:"weight_sum,omitempty"`
	// Types that are valid to be assigned to LeafStat:
	//	*LeafStat_Classification
	//	*LeafStat_Regression
	LeafStat             isLeafStat_LeafStat `protobuf_oneof:"leaf_stat"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LeafStat) Reset()         { *m = LeafStat{} }
func (m *LeafStat) String() string { return proto.CompactTextString(m) }
func (*LeafStat) ProtoMessage()    {}
func (*LeafStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{2}
}

func (m *LeafStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafStat.Unmarshal(m, b)
}
func (m *LeafStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafStat.Marshal(b, m, deterministic)
}
func (m *LeafStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafStat.Merge(m, src)
}
func (m *LeafStat) XXX_Size() int {
	return xxx_messageInfo_LeafStat.Size(m)
}
func (m *LeafStat) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafStat.DiscardUnknown(m)
}

var xxx_messageInfo_LeafStat proto.InternalMessageInfo

func (m *LeafStat) GetWeightSum() float32 {
	if m != nil {
		return m.WeightSum
	}
	return 0
}

type isLeafStat_LeafStat interface {
	isLeafStat_LeafStat()
}

type LeafStat_Classification struct {
	Classification *LeafStat_GiniImpurityClassificationStats `protobuf:"bytes,1,opt,name=classification,proto3,oneof"`
}

type LeafStat_Regression struct {
	Regression *LeafStat_LeastSquaresRegressionStats `protobuf:"bytes,2,opt,name=regression,proto3,oneof"`
}

func (*LeafStat_Classification) isLeafStat_LeafStat() {}

func (*LeafStat_Regression) isLeafStat_LeafStat() {}

func (m *LeafStat) GetLeafStat() isLeafStat_LeafStat {
	if m != nil {
		return m.LeafStat
	}
	return nil
}

func (m *LeafStat) GetClassification() *LeafStat_GiniImpurityClassificationStats {
	if x, ok := m.GetLeafStat().(*LeafStat_Classification); ok {
		return x.Classification
	}
	return nil
}

func (m *LeafStat) GetRegression() *LeafStat_LeastSquaresRegressionStats {
	if x, ok := m.GetLeafStat().(*LeafStat_Regression); ok {
		return x.Regression
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LeafStat) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LeafStat_Classification)(nil),
		(*LeafStat_Regression)(nil),
	}
}

// TODO(thomaswc): Move the GiniStats out of LeafStats and into something
// that only tracks them for splits.
type LeafStat_GiniImpurityClassificationStats struct {
	// Types that are valid to be assigned to Counts:
	//	*LeafStat_GiniImpurityClassificationStats_DenseCounts
	//	*LeafStat_GiniImpurityClassificationStats_SparseCounts
	Counts               isLeafStat_GiniImpurityClassificationStats_Counts `protobuf_oneof:"counts"`
	Gini                 *GiniStats                                        `protobuf:"bytes,3,opt,name=gini,proto3" json:"gini,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *LeafStat_GiniImpurityClassificationStats) Reset() {
	*m = LeafStat_GiniImpurityClassificationStats{}
}
func (m *LeafStat_GiniImpurityClassificationStats) String() string { return proto.CompactTextString(m) }
func (*LeafStat_GiniImpurityClassificationStats) ProtoMessage()    {}
func (*LeafStat_GiniImpurityClassificationStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{2, 0}
}

func (m *LeafStat_GiniImpurityClassificationStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafStat_GiniImpurityClassificationStats.Unmarshal(m, b)
}
func (m *LeafStat_GiniImpurityClassificationStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafStat_GiniImpurityClassificationStats.Marshal(b, m, deterministic)
}
func (m *LeafStat_GiniImpurityClassificationStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafStat_GiniImpurityClassificationStats.Merge(m, src)
}
func (m *LeafStat_GiniImpurityClassificationStats) XXX_Size() int {
	return xxx_messageInfo_LeafStat_GiniImpurityClassificationStats.Size(m)
}
func (m *LeafStat_GiniImpurityClassificationStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafStat_GiniImpurityClassificationStats.DiscardUnknown(m)
}

var xxx_messageInfo_LeafStat_GiniImpurityClassificationStats proto.InternalMessageInfo

type isLeafStat_GiniImpurityClassificationStats_Counts interface {
	isLeafStat_GiniImpurityClassificationStats_Counts()
}

type LeafStat_GiniImpurityClassificationStats_DenseCounts struct {
	DenseCounts *decision_trees.Vector `protobuf:"bytes,1,opt,name=dense_counts,json=denseCounts,proto3,oneof"`
}

type LeafStat_GiniImpurityClassificationStats_SparseCounts struct {
	SparseCounts *decision_trees.SparseVector `protobuf:"bytes,2,opt,name=sparse_counts,json=sparseCounts,proto3,oneof"`
}

func (*LeafStat_GiniImpurityClassificationStats_DenseCounts) isLeafStat_GiniImpurityClassificationStats_Counts() {
}

func (*LeafStat_GiniImpurityClassificationStats_SparseCounts) isLeafStat_GiniImpurityClassificationStats_Counts() {
}

func (m *LeafStat_GiniImpurityClassificationStats) GetCounts() isLeafStat_GiniImpurityClassificationStats_Counts {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *LeafStat_GiniImpurityClassificationStats) GetDenseCounts() *decision_trees.Vector {
	if x, ok := m.GetCounts().(*LeafStat_GiniImpurityClassificationStats_DenseCounts); ok {
		return x.DenseCounts
	}
	return nil
}

func (m *LeafStat_GiniImpurityClassificationStats) GetSparseCounts() *decision_trees.SparseVector {
	if x, ok := m.GetCounts().(*LeafStat_GiniImpurityClassificationStats_SparseCounts); ok {
		return x.SparseCounts
	}
	return nil
}

func (m *LeafStat_GiniImpurityClassificationStats) GetGini() *GiniStats {
	if m != nil {
		return m.Gini
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LeafStat_GiniImpurityClassificationStats) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LeafStat_GiniImpurityClassificationStats_DenseCounts)(nil),
		(*LeafStat_GiniImpurityClassificationStats_SparseCounts)(nil),
	}
}

// This is the info needed for calculating variance for regression.
// Variance will still have to be summed over every output, but the
// number of outputs in regression problems is almost always 1.
type LeafStat_LeastSquaresRegressionStats struct {
	MeanOutput           *decision_trees.Vector `protobuf:"bytes,1,opt,name=mean_output,json=meanOutput,proto3" json:"mean_output,omitempty"`
	MeanOutputSquares    *decision_trees.Vector `protobuf:"bytes,2,opt,name=mean_output_squares,json=meanOutputSquares,proto3" json:"mean_output_squares,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *LeafStat_LeastSquaresRegressionStats) Reset()         { *m = LeafStat_LeastSquaresRegressionStats{} }
func (m *LeafStat_LeastSquaresRegressionStats) String() string { return proto.CompactTextString(m) }
func (*LeafStat_LeastSquaresRegressionStats) ProtoMessage()    {}
func (*LeafStat_LeastSquaresRegressionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{2, 1}
}

func (m *LeafStat_LeastSquaresRegressionStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeafStat_LeastSquaresRegressionStats.Unmarshal(m, b)
}
func (m *LeafStat_LeastSquaresRegressionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeafStat_LeastSquaresRegressionStats.Marshal(b, m, deterministic)
}
func (m *LeafStat_LeastSquaresRegressionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeafStat_LeastSquaresRegressionStats.Merge(m, src)
}
func (m *LeafStat_LeastSquaresRegressionStats) XXX_Size() int {
	return xxx_messageInfo_LeafStat_LeastSquaresRegressionStats.Size(m)
}
func (m *LeafStat_LeastSquaresRegressionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_LeafStat_LeastSquaresRegressionStats.DiscardUnknown(m)
}

var xxx_messageInfo_LeafStat_LeastSquaresRegressionStats proto.InternalMessageInfo

func (m *LeafStat_LeastSquaresRegressionStats) GetMeanOutput() *decision_trees.Vector {
	if m != nil {
		return m.MeanOutput
	}
	return nil
}

func (m *LeafStat_LeastSquaresRegressionStats) GetMeanOutputSquares() *decision_trees.Vector {
	if m != nil {
		return m.MeanOutputSquares
	}
	return nil
}

type FertileSlot struct {
	// The statistics for *all* the examples seen at this leaf.
	LeafStats  *LeafStat         `protobuf:"bytes,4,opt,name=leaf_stats,json=leafStats,proto3" json:"leaf_stats,omitempty"`
	Candidates []*SplitCandidate `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty"`
	// The statistics for the examples seen at this leaf after all the
	// splits have been initialized.  If post_init_leaf_stats.weight_sum
	// is > 0, then all candidates have been initialized.  We need to track
	// both leaf_stats and post_init_leaf_stats because the first is used
	// to create the decision_tree::Leaf and the second is used to infer
	// the statistics for the right side of a split (given the leaf side
	// stats).
	PostInitLeafStats    *LeafStat `protobuf:"bytes,6,opt,name=post_init_leaf_stats,json=postInitLeafStats,proto3" json:"post_init_leaf_stats,omitempty"`
	NodeId               int32     `protobuf:"varint,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Depth                int32     `protobuf:"varint,7,opt,name=depth,proto3" json:"depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FertileSlot) Reset()         { *m = FertileSlot{} }
func (m *FertileSlot) String() string { return proto.CompactTextString(m) }
func (*FertileSlot) ProtoMessage()    {}
func (*FertileSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{3}
}

func (m *FertileSlot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FertileSlot.Unmarshal(m, b)
}
func (m *FertileSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FertileSlot.Marshal(b, m, deterministic)
}
func (m *FertileSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FertileSlot.Merge(m, src)
}
func (m *FertileSlot) XXX_Size() int {
	return xxx_messageInfo_FertileSlot.Size(m)
}
func (m *FertileSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_FertileSlot.DiscardUnknown(m)
}

var xxx_messageInfo_FertileSlot proto.InternalMessageInfo

func (m *FertileSlot) GetLeafStats() *LeafStat {
	if m != nil {
		return m.LeafStats
	}
	return nil
}

func (m *FertileSlot) GetCandidates() []*SplitCandidate {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *FertileSlot) GetPostInitLeafStats() *LeafStat {
	if m != nil {
		return m.PostInitLeafStats
	}
	return nil
}

func (m *FertileSlot) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *FertileSlot) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type SplitCandidate struct {
	// proto representing the potential node.
	Split *decision_trees.BinaryNode `protobuf:"bytes,1,opt,name=split,proto3" json:"split,omitempty"`
	// Right counts are inferred from FertileSlot.leaf_stats and left.
	LeftStats *LeafStat `protobuf:"bytes,4,opt,name=left_stats,json=leftStats,proto3" json:"left_stats,omitempty"`
	// Right stats (not full counts) are kept here.
	RightStats *LeafStat `protobuf:"bytes,5,opt,name=right_stats,json=rightStats,proto3" json:"right_stats,omitempty"`
	// Fields used when training with a graph runner.
	UniqueId             string   `protobuf:"bytes,6,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SplitCandidate) Reset()         { *m = SplitCandidate{} }
func (m *SplitCandidate) String() string { return proto.CompactTextString(m) }
func (*SplitCandidate) ProtoMessage()    {}
func (*SplitCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{4}
}

func (m *SplitCandidate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SplitCandidate.Unmarshal(m, b)
}
func (m *SplitCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SplitCandidate.Marshal(b, m, deterministic)
}
func (m *SplitCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitCandidate.Merge(m, src)
}
func (m *SplitCandidate) XXX_Size() int {
	return xxx_messageInfo_SplitCandidate.Size(m)
}
func (m *SplitCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_SplitCandidate proto.InternalMessageInfo

func (m *SplitCandidate) GetSplit() *decision_trees.BinaryNode {
	if m != nil {
		return m.Split
	}
	return nil
}

func (m *SplitCandidate) GetLeftStats() *LeafStat {
	if m != nil {
		return m.LeftStats
	}
	return nil
}

func (m *SplitCandidate) GetRightStats() *LeafStat {
	if m != nil {
		return m.RightStats
	}
	return nil
}

func (m *SplitCandidate) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

// Proto used for tracking tree paths during inference time.
type TreePath struct {
	// Nodes are listed in order that they were traversed. i.e. nodes_visited[0]
	// is the tree's root node.
	NodesVisited         []*decision_trees.TreeNode `protobuf:"bytes,1,rep,name=nodes_visited,json=nodesVisited,proto3" json:"nodes_visited,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TreePath) Reset()         { *m = TreePath{} }
func (m *TreePath) String() string { return proto.CompactTextString(m) }
func (*TreePath) ProtoMessage()    {}
func (*TreePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_dba135fb4ecc6113, []int{5}
}

func (m *TreePath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreePath.Unmarshal(m, b)
}
func (m *TreePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreePath.Marshal(b, m, deterministic)
}
func (m *TreePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreePath.Merge(m, src)
}
func (m *TreePath) XXX_Size() int {
	return xxx_messageInfo_TreePath.Size(m)
}
func (m *TreePath) XXX_DiscardUnknown() {
	xxx_messageInfo_TreePath.DiscardUnknown(m)
}

var xxx_messageInfo_TreePath proto.InternalMessageInfo

func (m *TreePath) GetNodesVisited() []*decision_trees.TreeNode {
	if m != nil {
		return m.NodesVisited
	}
	return nil
}

func init() {
	proto.RegisterType((*FertileStats)(nil), "tensorflow.tensorforest.FertileStats")
	proto.RegisterType((*GiniStats)(nil), "tensorflow.tensorforest.GiniStats")
	proto.RegisterType((*LeafStat)(nil), "tensorflow.tensorforest.LeafStat")
	proto.RegisterType((*LeafStat_GiniImpurityClassificationStats)(nil), "tensorflow.tensorforest.LeafStat.GiniImpurityClassificationStats")
	proto.RegisterType((*LeafStat_LeastSquaresRegressionStats)(nil), "tensorflow.tensorforest.LeafStat.LeastSquaresRegressionStats")
	proto.RegisterType((*FertileSlot)(nil), "tensorflow.tensorforest.FertileSlot")
	proto.RegisterType((*SplitCandidate)(nil), "tensorflow.tensorforest.SplitCandidate")
	proto.RegisterType((*TreePath)(nil), "tensorflow.tensorforest.TreePath")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/tensor_forest/proto/fertile_stats.proto", fileDescriptor_dba135fb4ecc6113)
}

var fileDescriptor_dba135fb4ecc6113 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0xc7, 0x31, 0x90, 0x90, 0x8c, 0x01, 0x09, 0x3f, 0xf4, 0x88, 0x40, 0x4f, 0x2f, 0x2f, 0xbc,
	0x8a, 0x9c, 0x12, 0x29, 0x95, 0x7a, 0x68, 0x55, 0x89, 0x06, 0x09, 0x88, 0x84, 0x68, 0xeb, 0x20,
	0x0e, 0xbd, 0x58, 0xc6, 0x1e, 0x27, 0xab, 0x3a, 0xbb, 0x61, 0x77, 0x5c, 0xc4, 0x67, 0xe9, 0xd7,
	0xe8, 0xa5, 0xdf, 0xaa, 0xc7, 0x4a, 0xbd, 0x54, 0xbb, 0xeb, 0x04, 0xd3, 0x26, 0x21, 0xea, 0x6d,
	0x77, 0xb2, 0xff, 0xdf, 0xfe, 0x67, 0x66, 0x3d, 0x81, 0x97, 0x84, 0x5c, 0x09, 0x99, 0xa4, 0xe2,
	0xae, 0x1d, 0x09, 0x4e, 0x92, 0xdd, 0xb4, 0x6d, 0x28, 0x48, 0x84, 0x44, 0x45, 0xed, 0xb1, 0x14,
	0x24, 0xda, 0x09, 0x4a, 0x62, 0x29, 0x06, 0x8a, 0x42, 0x52, 0x2d, 0x13, 0xf3, 0xf6, 0x1e, 0xb4,
	0xad, 0x7c, 0x69, 0x24, 0xfb, 0xc7, 0x33, 0xa0, 0x31, 0x46, 0x4c, 0x31, 0xc1, 0x03, 0x92, 0x88,
	0x2a, 0xa7, 0x0e, 0x90, 0xa3, 0x64, 0x91, 0x89, 0x05, 0x23, 0x11, 0x63, 0x6a, 0xd1, 0x8d, 0x6b,
	0xd8, 0x3c, 0xb5, 0x37, 0xf6, 0xf5, 0x85, 0xde, 0x29, 0x6c, 0x72, 0x11, 0x63, 0x40, 0x22, 0x50,
	0xa9, 0xa0, 0x9a, 0x53, 0x5f, 0x6b, 0xba, 0x9d, 0xff, 0x5b, 0x73, 0x1c, 0xb4, 0x26, 0xe2, 0x54,
	0x90, 0x0f, 0x5a, 0x79, 0x25, 0xf4, 0xba, 0x71, 0x08, 0xd5, 0x33, 0xc6, 0x99, 0x85, 0xfe, 0x0d,
	0x65, 0x75, 0x9b, 0x85, 0x12, 0x6b, 0xab, 0x75, 0xa7, 0xb9, 0xea, 0xe7, 0xbb, 0xc6, 0xd7, 0x12,
	0x54, 0x2e, 0x30, 0x4c, 0xf4, 0x29, 0xef, 0x1f, 0x80, 0x3b, 0x64, 0x83, 0x21, 0x05, 0x2a, 0x1b,
	0xd5, 0xd6, 0xcc, 0xc1, 0xaa, 0x8d, 0xf4, 0xb3, 0x91, 0xf7, 0x11, 0xb6, 0xa3, 0x34, 0x54, 0x8a,
	0x25, 0x2c, 0x0a, 0x89, 0x09, 0x5e, 0x73, 0xea, 0x4e, 0xd3, 0xed, 0xbc, 0x99, 0x6b, 0x6d, 0x42,
	0x6e, 0x69, 0x23, 0xbd, 0xd1, 0x38, 0x93, 0x8c, 0xee, 0x4f, 0x1e, 0x31, 0x8c, 0xbd, 0xf3, 0x15,
	0xff, 0x17, 0xb4, 0x17, 0x00, 0x48, 0x1c, 0x48, 0x54, 0xba, 0x90, 0xc6, 0xb4, 0xdb, 0x79, 0xfd,
	0xf4, 0x45, 0x17, 0x18, 0x2a, 0xea, 0x9b, 0xdc, 0x94, 0x3f, 0xd5, 0x4f, 0x2e, 0x29, 0x20, 0xf7,
	0x7f, 0x38, 0xf0, 0xef, 0x13, 0xb6, 0x74, 0x2b, 0x62, 0xe4, 0x0a, 0x83, 0x48, 0x64, 0x9c, 0x54,
	0x9e, 0xef, 0x7f, 0x45, 0x1b, 0x8f, 0x7b, 0xdd, 0xba, 0xc6, 0x88, 0x84, 0x3c, 0x5f, 0xf1, 0x5d,
	0x23, 0x3c, 0x31, 0x3a, 0xef, 0x12, 0xb6, 0xd4, 0x38, 0x94, 0x0f, 0x20, 0x9b, 0xcf, 0xd1, 0x02,
	0x50, 0xdf, 0x9c, 0x9f, 0xe2, 0x36, 0xad, 0x3e, 0xe7, 0xbd, 0x80, 0xf5, 0x01, 0xe3, 0xcc, 0xb4,
	0xc8, 0xed, 0x34, 0xe6, 0x96, 0x65, 0xda, 0x7f, 0xdf, 0x9c, 0xef, 0x56, 0xa0, 0x6c, 0x0d, 0xec,
	0x7f, 0x71, 0xe0, 0x60, 0x41, 0xad, 0xbc, 0x2e, 0xb8, 0x23, 0x0c, 0x79, 0x20, 0x32, 0x1a, 0x67,
	0xb4, 0x74, 0xe2, 0x3e, 0x68, 0xd5, 0x5b, 0x23, 0xf2, 0xde, 0xc3, 0x5f, 0x05, 0x46, 0x60, 0x5f,
	0xdc, 0x24, 0xf7, 0x25, 0x58, 0x3b, 0x0f, 0xac, 0xdc, 0x65, 0xd7, 0x85, 0x6a, 0x8a, 0x61, 0x62,
	0x3e, 0xcd, 0xc6, 0xe7, 0x55, 0x70, 0x0b, 0x8f, 0xdf, 0x3b, 0x06, 0x98, 0xfe, 0xa8, 0x6a, 0xeb,
	0xbf, 0x5f, 0x33, 0xf3, 0xc9, 0xf8, 0x86, 0x68, 0xb3, 0x3e, 0x03, 0x88, 0x42, 0x1e, 0xb3, 0x38,
	0x24, 0x54, 0xf9, 0x87, 0x77, 0x34, 0x97, 0xd0, 0x1f, 0xa7, 0x8c, 0x4e, 0x26, 0xe7, 0xfd, 0x82,
	0xd4, 0xf3, 0x61, 0x77, 0x2c, 0x14, 0x05, 0x8c, 0x33, 0x0a, 0x0a, 0xa6, 0xca, 0xcb, 0x9a, 0xda,
	0xd1, 0xf2, 0x1e, 0x67, 0x74, 0x31, 0x35, 0xb7, 0x07, 0x1b, 0x66, 0x2e, 0xb0, 0xb8, 0x56, 0xaa,
	0x3b, 0xcd, 0x92, 0x5f, 0xd6, 0xdb, 0x5e, 0xec, 0xed, 0x42, 0x29, 0xc6, 0x31, 0x0d, 0x6b, 0x1b,
	0x26, 0x6c, 0x37, 0x8d, 0x6f, 0x0e, 0x6c, 0x3f, 0x76, 0xe8, 0xbd, 0x82, 0x92, 0xd2, 0x91, 0xbc,
	0x9d, 0xcf, 0x16, 0xb4, 0xa0, 0xcb, 0x78, 0x28, 0xef, 0x2f, 0x45, 0x8c, 0xbe, 0xd5, 0xd8, 0xea,
	0x26, 0xf4, 0x07, 0xd5, 0x4d, 0x68, 0xfa, 0xa6, 0xa4, 0x9d, 0x2e, 0x06, 0x51, 0x5a, 0x16, 0x01,
	0x46, 0x65, 0x19, 0x07, 0x50, 0xcd, 0x38, 0xbb, 0xcd, 0x4c, 0x19, 0x74, 0x35, 0xab, 0x7e, 0xc5,
	0x06, 0x7a, 0x71, 0xe3, 0x0a, 0x2a, 0x57, 0x12, 0xf1, 0x5d, 0x48, 0x43, 0xef, 0x1c, 0xb6, 0x74,
	0x79, 0x54, 0xf0, 0x89, 0x29, 0x46, 0x18, 0xe7, 0xdd, 0x3c, 0x5c, 0x90, 0xb3, 0xd6, 0x9a, 0x8c,
	0xcd, 0xfc, 0x55, 0xd7, 0x56, 0xd8, 0xbd, 0xfc, 0xd0, 0x1b, 0x30, 0x1a, 0x66, 0x37, 0xad, 0x48,
	0x8c, 0xda, 0x85, 0x71, 0x3f, 0x7b, 0x39, 0x10, 0xed, 0x48, 0x48, 0x9c, 0xfd, 0x0f, 0xf3, 0xdd,
	0x71, 0x6e, 0xca, 0x66, 0xec, 0x3f, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xbb, 0xac, 0x02,
	0x8f, 0x06, 0x00, 0x00,
}
