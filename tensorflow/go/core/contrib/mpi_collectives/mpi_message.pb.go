// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/mpi_collectives/mpi_message.proto

package mpi_collectives

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	framework "github.com/tensorflow/tensorflow/tensorflow/go/core/framework"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MPIRequest_RequestType int32

const (
	MPIRequest_ALLREDUCE MPIRequest_RequestType = 0
	MPIRequest_ALLGATHER MPIRequest_RequestType = 1
)

var MPIRequest_RequestType_name = map[int32]string{
	0: "ALLREDUCE",
	1: "ALLGATHER",
}

var MPIRequest_RequestType_value = map[string]int32{
	"ALLREDUCE": 0,
	"ALLGATHER": 1,
}

func (x MPIRequest_RequestType) String() string {
	return proto.EnumName(MPIRequest_RequestType_name, int32(x))
}

func (MPIRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c92b1de3845fb64, []int{0, 0}
}

type MPIResponse_ResponseType int32

const (
	MPIResponse_ALLREDUCE MPIResponse_ResponseType = 0
	MPIResponse_ALLGATHER MPIResponse_ResponseType = 1
	MPIResponse_ERROR     MPIResponse_ResponseType = 2
	MPIResponse_DONE      MPIResponse_ResponseType = 3
	MPIResponse_SHUTDOWN  MPIResponse_ResponseType = 4
)

var MPIResponse_ResponseType_name = map[int32]string{
	0: "ALLREDUCE",
	1: "ALLGATHER",
	2: "ERROR",
	3: "DONE",
	4: "SHUTDOWN",
}

var MPIResponse_ResponseType_value = map[string]int32{
	"ALLREDUCE": 0,
	"ALLGATHER": 1,
	"ERROR":     2,
	"DONE":      3,
	"SHUTDOWN":  4,
}

func (x MPIResponse_ResponseType) String() string {
	return proto.EnumName(MPIResponse_ResponseType_name, int32(x))
}

func (MPIResponse_ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5c92b1de3845fb64, []int{1, 0}
}

// An MPIRequest is a message sent from a rank greater than zero to the
// coordinator (rank zero), informing the coordinator of an operation that
// the rank wants to do and the tensor that it wants to apply the operation to.
type MPIRequest struct {
	// The request rank is necessary to create a consistent ordering of results,
	// for example in the allgather where the order of outputs should be sorted
	// by rank.
	RequestRank          int32                       `protobuf:"varint,1,opt,name=request_rank,json=requestRank,proto3" json:"request_rank,omitempty"`
	RequestType          MPIRequest_RequestType      `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3,enum=tensorflow.contrib.mpi_collectives.MPIRequest_RequestType" json:"request_type,omitempty"`
	TensorType           framework.DataType          `protobuf:"varint,3,opt,name=tensor_type,json=tensorType,proto3,enum=tensorflow.DataType" json:"tensor_type,omitempty"`
	TensorName           string                      `protobuf:"bytes,4,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
	TensorShape          *framework.TensorShapeProto `protobuf:"bytes,5,opt,name=tensor_shape,json=tensorShape,proto3" json:"tensor_shape,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MPIRequest) Reset()         { *m = MPIRequest{} }
func (m *MPIRequest) String() string { return proto.CompactTextString(m) }
func (*MPIRequest) ProtoMessage()    {}
func (*MPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c92b1de3845fb64, []int{0}
}

func (m *MPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MPIRequest.Unmarshal(m, b)
}
func (m *MPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MPIRequest.Marshal(b, m, deterministic)
}
func (m *MPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MPIRequest.Merge(m, src)
}
func (m *MPIRequest) XXX_Size() int {
	return xxx_messageInfo_MPIRequest.Size(m)
}
func (m *MPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MPIRequest proto.InternalMessageInfo

func (m *MPIRequest) GetRequestRank() int32 {
	if m != nil {
		return m.RequestRank
	}
	return 0
}

func (m *MPIRequest) GetRequestType() MPIRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return MPIRequest_ALLREDUCE
}

func (m *MPIRequest) GetTensorType() framework.DataType {
	if m != nil {
		return m.TensorType
	}
	return framework.DataType_DT_INVALID
}

func (m *MPIRequest) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

func (m *MPIRequest) GetTensorShape() *framework.TensorShapeProto {
	if m != nil {
		return m.TensorShape
	}
	return nil
}

// An MPIResponse is a message sent from the coordinator (rank zero) to a rank
// greater than zero, informing the rank of an operation should be performed
// now. If the operation requested would result in an error (for example, due
// to a type or shape mismatch), then the MPIResponse can contain an error and
// an error message instead. Finally, an MPIResponse can be a DONE message (if
// there are no more tensors to reduce on this tick of the background loop) or
// SHUTDOWN if all MPI processes should shut down.
type MPIResponse struct {
	// Empty if the type is DONE or SHUTDOWN.
	ResponseType MPIResponse_ResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=tensorflow.contrib.mpi_collectives.MPIResponse_ResponseType" json:"response_type,omitempty"`
	TensorName   string                   `protobuf:"bytes,2,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
	// Empty unless response_type is ERROR.
	ErrorMessage         string   `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MPIResponse) Reset()         { *m = MPIResponse{} }
func (m *MPIResponse) String() string { return proto.CompactTextString(m) }
func (*MPIResponse) ProtoMessage()    {}
func (*MPIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c92b1de3845fb64, []int{1}
}

func (m *MPIResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MPIResponse.Unmarshal(m, b)
}
func (m *MPIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MPIResponse.Marshal(b, m, deterministic)
}
func (m *MPIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MPIResponse.Merge(m, src)
}
func (m *MPIResponse) XXX_Size() int {
	return xxx_messageInfo_MPIResponse.Size(m)
}
func (m *MPIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MPIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MPIResponse proto.InternalMessageInfo

func (m *MPIResponse) GetResponseType() MPIResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return MPIResponse_ALLREDUCE
}

func (m *MPIResponse) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

func (m *MPIResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("tensorflow.contrib.mpi_collectives.MPIRequest_RequestType", MPIRequest_RequestType_name, MPIRequest_RequestType_value)
	proto.RegisterEnum("tensorflow.contrib.mpi_collectives.MPIResponse_ResponseType", MPIResponse_ResponseType_name, MPIResponse_ResponseType_value)
	proto.RegisterType((*MPIRequest)(nil), "tensorflow.contrib.mpi_collectives.MPIRequest")
	proto.RegisterType((*MPIResponse)(nil), "tensorflow.contrib.mpi_collectives.MPIResponse")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/mpi_collectives/mpi_message.proto", fileDescriptor_5c92b1de3845fb64)
}

var fileDescriptor_5c92b1de3845fb64 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x35, 0xe9, 0xae, 0x34, 0x37, 0x59, 0x09, 0x83, 0x0f, 0xa1, 0x08, 0xc6, 0x88, 0x10, 0x50,
	0x26, 0x50, 0xf5, 0x45, 0x04, 0xa9, 0x26, 0x58, 0xb1, 0xbb, 0x29, 0xd3, 0x14, 0x41, 0x90, 0x65,
	0x36, 0x4c, 0xb7, 0x61, 0x37, 0x99, 0x38, 0x93, 0x5a, 0xfa, 0x05, 0xfe, 0xa0, 0x1f, 0x24, 0x99,
	0x99, 0xed, 0xc6, 0xaa, 0xd5, 0xa7, 0xdc, 0x7b, 0xe6, 0x9e, 0x33, 0x39, 0x87, 0x3b, 0xf0, 0xa2,
	0x63, 0x8d, 0xe4, 0xe2, 0x6c, 0xcd, 0x2f, 0x93, 0x92, 0x37, 0x9d, 0xa8, 0x16, 0x49, 0xdd, 0x56,
	0xf3, 0x92, 0xaf, 0xd7, 0xac, 0xec, 0xaa, 0x6f, 0x4c, 0xaa, 0xbe, 0x66, 0x52, 0xd2, 0x25, 0xc3,
	0xad, 0xe0, 0x1d, 0x47, 0xd1, 0x96, 0x85, 0x0d, 0x0b, 0xdf, 0x60, 0xed, 0x3d, 0xfb, 0x45, 0x59,
	0xb0, 0xe4, 0x4c, 0xd0, 0x9a, 0x5d, 0x72, 0xb1, 0x4a, 0xf4, 0xc9, 0x5c, 0x9e, 0xd3, 0xd6, 0x28,
	0xee, 0x3d, 0xb9, 0x65, 0xfa, 0xaa, 0x65, 0x52, 0x8f, 0x45, 0x3f, 0x6c, 0x80, 0xe9, 0xf1, 0x07,
	0xc2, 0xbe, 0x5e, 0x30, 0xd9, 0xa1, 0x47, 0xe0, 0x09, 0x5d, 0xce, 0x05, 0x6d, 0x56, 0x81, 0x15,
	0x5a, 0xf1, 0x98, 0xb8, 0x06, 0x23, 0xb4, 0x59, 0xa1, 0x2f, 0xdb, 0x91, 0x5e, 0x28, 0xb0, 0x43,
	0x2b, 0xbe, 0xb7, 0xff, 0x0a, 0xff, 0xdb, 0x01, 0xde, 0x5e, 0x84, 0xcd, 0xb7, 0xb8, 0x6a, 0xd9,
	0xb5, 0x7c, 0xdf, 0xa0, 0x97, 0xe0, 0x1a, 0x37, 0x4a, 0x7d, 0x47, 0xa9, 0xdf, 0x1f, 0xaa, 0xa7,
	0xb4, 0xa3, 0x8a, 0x07, 0x1a, 0x54, 0xb4, 0x87, 0xd7, 0xb4, 0x86, 0xd6, 0x2c, 0x18, 0x85, 0x56,
	0xec, 0x6c, 0x06, 0x66, 0xb4, 0x66, 0xe8, 0x0d, 0x78, 0xc3, 0x94, 0x82, 0x71, 0x68, 0xc5, 0xee,
	0xfe, 0x83, 0xa1, 0x70, 0xa1, 0xca, 0x93, 0xfe, 0xf8, 0xb8, 0x0f, 0x87, 0x18, 0x49, 0x85, 0x44,
	0x4f, 0xc1, 0x1d, 0xfc, 0x34, 0x9a, 0x80, 0x73, 0x70, 0x74, 0x44, 0xb2, 0xf4, 0xf4, 0x5d, 0xe6,
	0xdf, 0x31, 0xed, 0xfb, 0x83, 0xe2, 0x30, 0x23, 0xbe, 0x15, 0x7d, 0xb7, 0xc1, 0x55, 0x6e, 0x65,
	0xcb, 0x1b, 0xc9, 0x10, 0x85, 0x89, 0x30, 0xb5, 0xf6, 0x65, 0x29, 0x5f, 0xaf, 0xff, 0x3b, 0x35,
	0xcd, 0xc5, 0x9b, 0x42, 0xf9, 0xf7, 0xc4, 0xa0, 0xbb, 0x99, 0x80, 0xfd, 0x5b, 0x02, 0x8f, 0x61,
	0xc2, 0x84, 0xe0, 0x62, 0xb3, 0x7a, 0x2a, 0x5b, 0x87, 0x78, 0x0a, 0x9c, 0x6a, 0x2c, 0xca, 0xc1,
	0x1b, 0xde, 0x71, 0xbb, 0x4d, 0xe4, 0xc0, 0x38, 0x23, 0x24, 0x27, 0xbe, 0x8d, 0x76, 0x61, 0x94,
	0xe6, 0xb3, 0xcc, 0xdf, 0x41, 0x1e, 0xec, 0x9e, 0x1c, 0x9e, 0x16, 0x69, 0xfe, 0x69, 0xe6, 0x8f,
	0xde, 0x4e, 0x3f, 0x7f, 0x5c, 0x56, 0xdd, 0xf9, 0xc5, 0x02, 0x97, 0xbc, 0x4e, 0x06, 0x4b, 0xf9,
	0xe7, 0x72, 0xc9, 0xf5, 0xb6, 0xfe, 0xe5, 0xe9, 0x2c, 0xee, 0xaa, 0xb5, 0x7d, 0xfe, 0x33, 0x00,
	0x00, 0xff, 0xff, 0xe4, 0x6a, 0x4a, 0x2d, 0x67, 0x03, 0x00, 0x00,
}
