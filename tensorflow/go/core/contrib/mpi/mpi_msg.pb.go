// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/mpi/mpi_msg.proto

package mpi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protobuf "github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MPIRecvTensorResponse struct {
	Response             *protobuf.RecvTensorResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	SingleSend           bool                         `protobuf:"varint,2,opt,name=singleSend,proto3" json:"singleSend,omitempty"`
	Key                  string                       `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	StepId               int64                        `protobuf:"varint,4,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	Checksum             uint64                       `protobuf:"varint,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *MPIRecvTensorResponse) Reset()         { *m = MPIRecvTensorResponse{} }
func (m *MPIRecvTensorResponse) String() string { return proto.CompactTextString(m) }
func (*MPIRecvTensorResponse) ProtoMessage()    {}
func (*MPIRecvTensorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7a0d391c5fb656, []int{0}
}

func (m *MPIRecvTensorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MPIRecvTensorResponse.Unmarshal(m, b)
}
func (m *MPIRecvTensorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MPIRecvTensorResponse.Marshal(b, m, deterministic)
}
func (m *MPIRecvTensorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MPIRecvTensorResponse.Merge(m, src)
}
func (m *MPIRecvTensorResponse) XXX_Size() int {
	return xxx_messageInfo_MPIRecvTensorResponse.Size(m)
}
func (m *MPIRecvTensorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MPIRecvTensorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MPIRecvTensorResponse proto.InternalMessageInfo

func (m *MPIRecvTensorResponse) GetResponse() *protobuf.RecvTensorResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *MPIRecvTensorResponse) GetSingleSend() bool {
	if m != nil {
		return m.SingleSend
	}
	return false
}

func (m *MPIRecvTensorResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MPIRecvTensorResponse) GetStepId() int64 {
	if m != nil {
		return m.StepId
	}
	return 0
}

func (m *MPIRecvTensorResponse) GetChecksum() uint64 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func init() {
	proto.RegisterType((*MPIRecvTensorResponse)(nil), "tensorflow.MPIRecvTensorResponse")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/mpi/mpi_msg.proto", fileDescriptor_2d7a0d391c5fb656)
}

var fileDescriptor_2d7a0d391c5fb656 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x49, 0xcd, 0x2b,
	0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0xd7, 0x4f, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0x4c, 0xd2, 0xcf,
	0x2d, 0xc8, 0x04, 0xe1, 0xf8, 0xdc, 0xe2, 0x74, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x2e,
	0x84, 0x2a, 0x29, 0x55, 0x14, 0x1d, 0x45, 0xa9, 0xfa, 0x60, 0x25, 0x49, 0xa5, 0x69, 0xfa, 0xe5,
	0xf9, 0x45, 0xd9, 0xa9, 0x45, 0x10, 0x2d, 0x4a, 0xbb, 0x18, 0xb9, 0x44, 0x7d, 0x03, 0x3c, 0x83,
	0x52, 0x93, 0xcb, 0x42, 0xc0, 0x1a, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0xac,
	0xb8, 0x38, 0x8a, 0xa0, 0x6c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x39, 0x3d, 0x84, 0x99,
	0x7a, 0x98, 0x3a, 0x82, 0xe0, 0xea, 0x85, 0xe4, 0xb8, 0xb8, 0x8a, 0x33, 0xf3, 0xd2, 0x73, 0x52,
	0x83, 0x53, 0xf3, 0x52, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x82, 0x90, 0x44, 0x84, 0x04, 0xb8,
	0x98, 0xb3, 0x53, 0x2b, 0x25, 0x98, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x71, 0x2e,
	0xf6, 0xe2, 0x92, 0xd4, 0x82, 0xf8, 0xcc, 0x14, 0x09, 0x16, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x36,
	0x10, 0xd7, 0x33, 0x45, 0x48, 0x8a, 0x8b, 0x23, 0x39, 0x23, 0x35, 0x39, 0xbb, 0xb8, 0x34, 0x57,
	0x82, 0x55, 0x81, 0x51, 0x83, 0x25, 0x08, 0xce, 0x77, 0x72, 0x89, 0xb2, 0x4f, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x47, 0xf2, 0x30, 0x76, 0x66, 0x7a, 0x3e, 0x24, 0x24,
	0x90, 0x02, 0xf0, 0x07, 0x23, 0x63, 0x12, 0x1b, 0x38, 0x24, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd8, 0x21, 0x48, 0x30, 0x64, 0x01, 0x00, 0x00,
}
