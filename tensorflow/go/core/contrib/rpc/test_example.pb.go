// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/rpc/python/kernel_tests/test_example.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A TestCase holds a sequence of values.
type TestCase struct {
	Values               []int32  `protobuf:"varint,1,rep,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestCase) Reset()         { *m = TestCase{} }
func (m *TestCase) String() string { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()    {}
func (*TestCase) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c22795348e2385b, []int{0}
}

func (m *TestCase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestCase.Unmarshal(m, b)
}
func (m *TestCase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestCase.Marshal(b, m, deterministic)
}
func (m *TestCase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestCase.Merge(m, src)
}
func (m *TestCase) XXX_Size() int {
	return xxx_messageInfo_TestCase.Size(m)
}
func (m *TestCase) XXX_DiscardUnknown() {
	xxx_messageInfo_TestCase.DiscardUnknown(m)
}

var xxx_messageInfo_TestCase proto.InternalMessageInfo

func (m *TestCase) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*TestCase)(nil), "tensorflow.contrib.rpc.TestCase")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/rpc/python/kernel_tests/test_example.proto", fileDescriptor_1c22795348e2385b)
}

var fileDescriptor_1c22795348e2385b = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x95, 0xa2, 0x68, 0x10, 0x84, 0x05, 0x8b, 0x08, 0xc2, 0xb2, 0x27, 0x4f, 0x09, 0x78,
	0x17, 0x59, 0x85, 0x42, 0x8f, 0xba, 0x05, 0x41, 0x90, 0x92, 0xc6, 0xe7, 0x6e, 0x30, 0x9b, 0x84,
	0xc9, 0xec, 0xd6, 0xfe, 0x65, 0x7f, 0x85, 0x08, 0xad, 0xf6, 0x50, 0xe8, 0xa5, 0xbd, 0x0c, 0x33,
	0xf0, 0xde, 0x37, 0xcc, 0xf0, 0xc4, 0x1d, 0xc3, 0xa7, 0x40, 0x1f, 0x2e, 0xcc, 0x95, 0x09, 0x9e,
	0xc9, 0xce, 0x14, 0x45, 0xa3, 0xe2, 0x82, 0x9b, 0xe0, 0xd5, 0x27, 0xc8, 0xc3, 0x4d, 0x19, 0x89,
	0x93, 0xfa, 0xad, 0x53, 0x7c, 0xe9, 0x36, 0x3a, 0xc8, 0x48, 0x81, 0x43, 0x36, 0xfc, 0xb7, 0xcb,
	0xa5, 0x5d, 0x52, 0x34, 0x45, 0x21, 0x4e, 0x26, 0x48, 0xfc, 0xa8, 0x13, 0xb2, 0xa1, 0x38, 0xee,
	0xb5, 0xeb, 0x90, 0x2e, 0x0f, 0xf3, 0xc1, 0xcd, 0xd1, 0xf3, 0x72, 0xba, 0xfd, 0x1e, 0x88, 0xf3,
	0x95, 0xa8, 0x02, 0xf5, 0xd6, 0x20, 0x7b, 0x12, 0xa7, 0x63, 0x6f, 0x08, 0x2d, 0x3c, 0x67, 0xb9,
	0xdc, 0x4c, 0x97, 0x2b, 0xd7, 0xd5, 0x56, 0x45, 0x71, 0x90, 0x4d, 0xc4, 0x59, 0xe5, 0x80, 0x38,
	0x0a, 0x84, 0x1e, 0xb4, 0x23, 0xea, 0x9b, 0xb8, 0xa8, 0x42, 0x0b, 0xb6, 0x2d, 0xd2, 0x1e, 0xf0,
	0x10, 0xd7, 0xa5, 0x9b, 0xeb, 0x45, 0x1a, 0x69, 0xeb, 0x5e, 0x2c, 0x37, 0x63, 0xdf, 0x6b, 0x67,
	0xdf, 0x4b, 0xaa, 0xbb, 0x1d, 0xfe, 0xa6, 0x11, 0xf9, 0xdf, 0x15, 0x7b, 0xdd, 0xf4, 0x50, 0xbe,
	0xde, 0xd7, 0x96, 0x9b, 0x6e, 0x26, 0x4d, 0x68, 0xd5, 0x5a, 0xe8, 0x36, 0xb7, 0x75, 0x50, 0x26,
	0x10, 0xd6, 0x23, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x49, 0x76, 0xbf, 0xab, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestCaseServiceClient is the client API for TestCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestCaseServiceClient interface {
	// Copy input, and increment each entry in 'values' by 1.
	Increment(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error)
	// Sleep forever.
	SleepForever(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error)
	// Sleep forever 50% of the time, return immediately the other 50%.
	SometimesSleepForever(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error)
	// Always fails with InvalidArgument.
	AlwaysFailWithInvalidArgument(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error)
	// Fails with InvalidArgument 50% of the time.
	SometimesFailWithInvalidArgument(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error)
}

type testCaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestCaseServiceClient(cc *grpc.ClientConn) TestCaseServiceClient {
	return &testCaseServiceClient{cc}
}

func (c *testCaseServiceClient) Increment(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error) {
	out := new(TestCase)
	err := c.cc.Invoke(ctx, "/tensorflow.contrib.rpc.TestCaseService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) SleepForever(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error) {
	out := new(TestCase)
	err := c.cc.Invoke(ctx, "/tensorflow.contrib.rpc.TestCaseService/SleepForever", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) SometimesSleepForever(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error) {
	out := new(TestCase)
	err := c.cc.Invoke(ctx, "/tensorflow.contrib.rpc.TestCaseService/SometimesSleepForever", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) AlwaysFailWithInvalidArgument(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error) {
	out := new(TestCase)
	err := c.cc.Invoke(ctx, "/tensorflow.contrib.rpc.TestCaseService/AlwaysFailWithInvalidArgument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) SometimesFailWithInvalidArgument(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*TestCase, error) {
	out := new(TestCase)
	err := c.cc.Invoke(ctx, "/tensorflow.contrib.rpc.TestCaseService/SometimesFailWithInvalidArgument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestCaseServiceServer is the server API for TestCaseService service.
type TestCaseServiceServer interface {
	// Copy input, and increment each entry in 'values' by 1.
	Increment(context.Context, *TestCase) (*TestCase, error)
	// Sleep forever.
	SleepForever(context.Context, *TestCase) (*TestCase, error)
	// Sleep forever 50% of the time, return immediately the other 50%.
	SometimesSleepForever(context.Context, *TestCase) (*TestCase, error)
	// Always fails with InvalidArgument.
	AlwaysFailWithInvalidArgument(context.Context, *TestCase) (*TestCase, error)
	// Fails with InvalidArgument 50% of the time.
	SometimesFailWithInvalidArgument(context.Context, *TestCase) (*TestCase, error)
}

// UnimplementedTestCaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTestCaseServiceServer struct {
}

func (*UnimplementedTestCaseServiceServer) Increment(ctx context.Context, req *TestCase) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (*UnimplementedTestCaseServiceServer) SleepForever(ctx context.Context, req *TestCase) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SleepForever not implemented")
}
func (*UnimplementedTestCaseServiceServer) SometimesSleepForever(ctx context.Context, req *TestCase) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SometimesSleepForever not implemented")
}
func (*UnimplementedTestCaseServiceServer) AlwaysFailWithInvalidArgument(ctx context.Context, req *TestCase) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlwaysFailWithInvalidArgument not implemented")
}
func (*UnimplementedTestCaseServiceServer) SometimesFailWithInvalidArgument(ctx context.Context, req *TestCase) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SometimesFailWithInvalidArgument not implemented")
}

func RegisterTestCaseServiceServer(s *grpc.Server, srv TestCaseServiceServer) {
	s.RegisterService(&_TestCaseService_serviceDesc, srv)
}

func _TestCaseService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.contrib.rpc.TestCaseService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).Increment(ctx, req.(*TestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_SleepForever_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).SleepForever(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.contrib.rpc.TestCaseService/SleepForever",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).SleepForever(ctx, req.(*TestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_SometimesSleepForever_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).SometimesSleepForever(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.contrib.rpc.TestCaseService/SometimesSleepForever",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).SometimesSleepForever(ctx, req.(*TestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_AlwaysFailWithInvalidArgument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).AlwaysFailWithInvalidArgument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.contrib.rpc.TestCaseService/AlwaysFailWithInvalidArgument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).AlwaysFailWithInvalidArgument(ctx, req.(*TestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_SometimesFailWithInvalidArgument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).SometimesFailWithInvalidArgument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.contrib.rpc.TestCaseService/SometimesFailWithInvalidArgument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).SometimesFailWithInvalidArgument(ctx, req.(*TestCase))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestCaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.contrib.rpc.TestCaseService",
	HandlerType: (*TestCaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _TestCaseService_Increment_Handler,
		},
		{
			MethodName: "SleepForever",
			Handler:    _TestCaseService_SleepForever_Handler,
		},
		{
			MethodName: "SometimesSleepForever",
			Handler:    _TestCaseService_SometimesSleepForever_Handler,
		},
		{
			MethodName: "AlwaysFailWithInvalidArgument",
			Handler:    _TestCaseService_AlwaysFailWithInvalidArgument_Handler,
		},
		{
			MethodName: "SometimesFailWithInvalidArgument",
			Handler:    _TestCaseService_SometimesFailWithInvalidArgument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorflow/contrib/rpc/python/kernel_tests/test_example.proto",
}
