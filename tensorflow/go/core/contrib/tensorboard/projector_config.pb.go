// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto

package tensorboard

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SpriteMetadata struct {
	ImagePath string `protobuf:"bytes,1,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// [width, height] of a single image in the sprite.
	SingleImageDim       []uint32 `protobuf:"varint,2,rep,packed,name=single_image_dim,json=singleImageDim,proto3" json:"single_image_dim,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpriteMetadata) Reset()         { *m = SpriteMetadata{} }
func (m *SpriteMetadata) String() string { return proto.CompactTextString(m) }
func (*SpriteMetadata) ProtoMessage()    {}
func (*SpriteMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_46fad38fd6bd9b1a, []int{0}
}

func (m *SpriteMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpriteMetadata.Unmarshal(m, b)
}
func (m *SpriteMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpriteMetadata.Marshal(b, m, deterministic)
}
func (m *SpriteMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpriteMetadata.Merge(m, src)
}
func (m *SpriteMetadata) XXX_Size() int {
	return xxx_messageInfo_SpriteMetadata.Size(m)
}
func (m *SpriteMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SpriteMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SpriteMetadata proto.InternalMessageInfo

func (m *SpriteMetadata) GetImagePath() string {
	if m != nil {
		return m.ImagePath
	}
	return ""
}

func (m *SpriteMetadata) GetSingleImageDim() []uint32 {
	if m != nil {
		return m.SingleImageDim
	}
	return nil
}

type EmbeddingInfo struct {
	TensorName    string `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
	MetadataPath  string `protobuf:"bytes,2,opt,name=metadata_path,json=metadataPath,proto3" json:"metadata_path,omitempty"`
	BookmarksPath string `protobuf:"bytes,3,opt,name=bookmarks_path,json=bookmarksPath,proto3" json:"bookmarks_path,omitempty"`
	// Shape of the 2D tensor [N x D]. If missing, it will be inferred from the
	// model checkpoint.
	TensorShape []uint32        `protobuf:"varint,4,rep,packed,name=tensor_shape,json=tensorShape,proto3" json:"tensor_shape,omitempty"`
	Sprite      *SpriteMetadata `protobuf:"bytes,5,opt,name=sprite,proto3" json:"sprite,omitempty"`
	// Path to the TSV file holding the tensor values. If missing, the tensor
	// is assumed to be stored in the model checkpoint.
	TensorPath           string   `protobuf:"bytes,6,opt,name=tensor_path,json=tensorPath,proto3" json:"tensor_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmbeddingInfo) Reset()         { *m = EmbeddingInfo{} }
func (m *EmbeddingInfo) String() string { return proto.CompactTextString(m) }
func (*EmbeddingInfo) ProtoMessage()    {}
func (*EmbeddingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_46fad38fd6bd9b1a, []int{1}
}

func (m *EmbeddingInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmbeddingInfo.Unmarshal(m, b)
}
func (m *EmbeddingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmbeddingInfo.Marshal(b, m, deterministic)
}
func (m *EmbeddingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbeddingInfo.Merge(m, src)
}
func (m *EmbeddingInfo) XXX_Size() int {
	return xxx_messageInfo_EmbeddingInfo.Size(m)
}
func (m *EmbeddingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbeddingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EmbeddingInfo proto.InternalMessageInfo

func (m *EmbeddingInfo) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

func (m *EmbeddingInfo) GetMetadataPath() string {
	if m != nil {
		return m.MetadataPath
	}
	return ""
}

func (m *EmbeddingInfo) GetBookmarksPath() string {
	if m != nil {
		return m.BookmarksPath
	}
	return ""
}

func (m *EmbeddingInfo) GetTensorShape() []uint32 {
	if m != nil {
		return m.TensorShape
	}
	return nil
}

func (m *EmbeddingInfo) GetSprite() *SpriteMetadata {
	if m != nil {
		return m.Sprite
	}
	return nil
}

func (m *EmbeddingInfo) GetTensorPath() string {
	if m != nil {
		return m.TensorPath
	}
	return ""
}

type ProjectorConfig struct {
	// Path to the checkpoint file. Use either this or model_checkpoint_dir.
	ModelCheckpointPath string           `protobuf:"bytes,1,opt,name=model_checkpoint_path,json=modelCheckpointPath,proto3" json:"model_checkpoint_path,omitempty"`
	Embeddings          []*EmbeddingInfo `protobuf:"bytes,2,rep,name=embeddings,proto3" json:"embeddings,omitempty"`
	// Path to the checkpoint directory. The directory will be scanned for the
	// latest checkpoint file.
	ModelCheckpointDir   string   `protobuf:"bytes,3,opt,name=model_checkpoint_dir,json=modelCheckpointDir,proto3" json:"model_checkpoint_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectorConfig) Reset()         { *m = ProjectorConfig{} }
func (m *ProjectorConfig) String() string { return proto.CompactTextString(m) }
func (*ProjectorConfig) ProtoMessage()    {}
func (*ProjectorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_46fad38fd6bd9b1a, []int{2}
}

func (m *ProjectorConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectorConfig.Unmarshal(m, b)
}
func (m *ProjectorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectorConfig.Marshal(b, m, deterministic)
}
func (m *ProjectorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectorConfig.Merge(m, src)
}
func (m *ProjectorConfig) XXX_Size() int {
	return xxx_messageInfo_ProjectorConfig.Size(m)
}
func (m *ProjectorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectorConfig proto.InternalMessageInfo

func (m *ProjectorConfig) GetModelCheckpointPath() string {
	if m != nil {
		return m.ModelCheckpointPath
	}
	return ""
}

func (m *ProjectorConfig) GetEmbeddings() []*EmbeddingInfo {
	if m != nil {
		return m.Embeddings
	}
	return nil
}

func (m *ProjectorConfig) GetModelCheckpointDir() string {
	if m != nil {
		return m.ModelCheckpointDir
	}
	return ""
}

func init() {
	proto.RegisterType((*SpriteMetadata)(nil), "tensorflow.SpriteMetadata")
	proto.RegisterType((*EmbeddingInfo)(nil), "tensorflow.EmbeddingInfo")
	proto.RegisterType((*ProjectorConfig)(nil), "tensorflow.ProjectorConfig")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto", fileDescriptor_46fad38fd6bd9b1a)
}

var fileDescriptor_46fad38fd6bd9b1a = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x51, 0x6b, 0xe2, 0x40,
	0x14, 0x85, 0x89, 0xee, 0x0a, 0x5e, 0x8d, 0xbb, 0xcc, 0xee, 0x42, 0x76, 0x61, 0x59, 0xd7, 0x52,
	0xc8, 0x53, 0x52, 0xd2, 0xa7, 0xbe, 0x56, 0x8b, 0xf8, 0xd0, 0x22, 0xf1, 0xa9, 0x7d, 0x09, 0x93,
	0x64, 0x4c, 0xa6, 0x66, 0xe6, 0x86, 0xc9, 0x48, 0xff, 0x57, 0x7f, 0x5b, 0x7f, 0x40, 0x71, 0x12,
	0x35, 0xb6, 0xbe, 0x0d, 0x67, 0x0e, 0xf7, 0x9c, 0xfb, 0x71, 0x61, 0xae, 0x99, 0xac, 0x50, 0xad,
	0x0b, 0x7c, 0xf1, 0x13, 0x94, 0x5a, 0xf1, 0xd8, 0xaf, 0xa5, 0x18, 0xa9, 0x4a, 0xfd, 0xb2, 0xd8,
	0x66, 0x5c, 0x56, 0x7e, 0xa9, 0xf0, 0x99, 0x25, 0x1a, 0xd5, 0xf1, 0x15, 0x25, 0x28, 0xd7, 0x3c,
	0xf3, 0x4a, 0x85, 0x1a, 0x09, 0x1c, 0x07, 0x4d, 0x1e, 0x61, 0xb4, 0x2a, 0x15, 0xd7, 0xec, 0x9e,
	0x69, 0x9a, 0x52, 0x4d, 0xc9, 0x5f, 0x00, 0x2e, 0x68, 0xc6, 0xa2, 0x92, 0xea, 0xdc, 0xb1, 0xc6,
	0x96, 0xdb, 0x0f, 0xfb, 0x46, 0x59, 0x52, 0x9d, 0x13, 0x17, 0xbe, 0x57, 0x5c, 0x66, 0x05, 0x8b,
	0x6a, 0x57, 0xca, 0x85, 0xd3, 0x19, 0x77, 0x5d, 0x3b, 0x1c, 0xd5, 0xfa, 0x62, 0x27, 0xcf, 0xb8,
	0x98, 0xbc, 0x59, 0x60, 0xdf, 0x89, 0x98, 0xa5, 0x29, 0x97, 0xd9, 0x42, 0xae, 0x91, 0xfc, 0x83,
	0x41, 0x1d, 0x1d, 0x49, 0x2a, 0x58, 0x33, 0xbb, 0x69, 0xf3, 0x40, 0x05, 0x23, 0x17, 0x60, 0x8b,
	0xa6, 0x47, 0x1d, 0xdf, 0x31, 0x96, 0xe1, 0x5e, 0x34, 0x0d, 0x2e, 0x61, 0x14, 0x23, 0x6e, 0x04,
	0x55, 0x9b, 0xaa, 0x76, 0x75, 0x8d, 0xcb, 0x3e, 0xa8, 0xc6, 0xf6, 0x1f, 0x86, 0x4d, 0x58, 0x95,
	0xd3, 0x92, 0x39, 0x5f, 0x4c, 0xc9, 0xa6, 0xc0, 0x6a, 0x27, 0x91, 0x00, 0x7a, 0x95, 0x59, 0xde,
	0xf9, 0x3a, 0xb6, 0xdc, 0x41, 0xf0, 0xc7, 0x3b, 0x92, 0xf1, 0x4e, 0xb1, 0x84, 0x8d, 0xb3, 0xb5,
	0x83, 0x89, 0xee, 0xb5, 0x77, 0xd8, 0xe5, 0x4e, 0x5e, 0x2d, 0xf8, 0xb6, 0xdc, 0x83, 0x9f, 0x1a,
	0xee, 0x24, 0x80, 0x5f, 0x02, 0x53, 0x56, 0x44, 0x49, 0xce, 0x92, 0x4d, 0x89, 0x5c, 0xea, 0x36,
	0xde, 0x1f, 0xe6, 0x73, 0x7a, 0xf8, 0x33, 0xfd, 0x6f, 0x00, 0xd8, 0x9e, 0x5e, 0x65, 0x10, 0x0f,
	0x82, 0xdf, 0xed, 0x82, 0x27, 0x6c, 0xc3, 0x96, 0x99, 0x5c, 0xc1, 0xcf, 0x4f, 0x71, 0x29, 0x57,
	0x0d, 0x27, 0xf2, 0x21, 0x6d, 0xc6, 0xd5, 0xed, 0xe2, 0x69, 0x9e, 0x71, 0x9d, 0x6f, 0x63, 0x2f,
	0x41, 0xe1, 0xb7, 0x0e, 0xed, 0xfc, 0x33, 0x43, 0x3f, 0x41, 0xc5, 0xce, 0x9d, 0x61, 0xdc, 0x33,
	0x47, 0x76, 0xfd, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xf2, 0xae, 0x3c, 0xaf, 0x02, 0x00, 0x00,
}
