// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/contrib/boosted_trees/proto/tree_config.proto

package boosted_trees

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TreeNode describes a node in a tree.
type TreeNode struct {
	// Types that are valid to be assigned to Node:
	//	*TreeNode_Leaf
	//	*TreeNode_DenseFloatBinarySplit
	//	*TreeNode_SparseFloatBinarySplitDefaultLeft
	//	*TreeNode_SparseFloatBinarySplitDefaultRight
	//	*TreeNode_CategoricalIdBinarySplit
	//	*TreeNode_CategoricalIdSetMembershipBinarySplit
	//	*TreeNode_ObliviousDenseFloatBinarySplit
	//	*TreeNode_ObliviousCategoricalIdBinarySplit
	Node                 isTreeNode_Node   `protobuf_oneof:"node"`
	NodeMetadata         *TreeNodeMetadata `protobuf:"bytes,777,opt,name=node_metadata,json=nodeMetadata,proto3" json:"node_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TreeNode) Reset()         { *m = TreeNode{} }
func (m *TreeNode) String() string { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()    {}
func (*TreeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{0}
}

func (m *TreeNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeNode.Unmarshal(m, b)
}
func (m *TreeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeNode.Marshal(b, m, deterministic)
}
func (m *TreeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeNode.Merge(m, src)
}
func (m *TreeNode) XXX_Size() int {
	return xxx_messageInfo_TreeNode.Size(m)
}
func (m *TreeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeNode.DiscardUnknown(m)
}

var xxx_messageInfo_TreeNode proto.InternalMessageInfo

type isTreeNode_Node interface {
	isTreeNode_Node()
}

type TreeNode_Leaf struct {
	Leaf *Leaf `protobuf:"bytes,1,opt,name=leaf,proto3,oneof"`
}

type TreeNode_DenseFloatBinarySplit struct {
	DenseFloatBinarySplit *DenseFloatBinarySplit `protobuf:"bytes,2,opt,name=dense_float_binary_split,json=denseFloatBinarySplit,proto3,oneof"`
}

type TreeNode_SparseFloatBinarySplitDefaultLeft struct {
	SparseFloatBinarySplitDefaultLeft *SparseFloatBinarySplitDefaultLeft `protobuf:"bytes,3,opt,name=sparse_float_binary_split_default_left,json=sparseFloatBinarySplitDefaultLeft,proto3,oneof"`
}

type TreeNode_SparseFloatBinarySplitDefaultRight struct {
	SparseFloatBinarySplitDefaultRight *SparseFloatBinarySplitDefaultRight `protobuf:"bytes,4,opt,name=sparse_float_binary_split_default_right,json=sparseFloatBinarySplitDefaultRight,proto3,oneof"`
}

type TreeNode_CategoricalIdBinarySplit struct {
	CategoricalIdBinarySplit *CategoricalIdBinarySplit `protobuf:"bytes,5,opt,name=categorical_id_binary_split,json=categoricalIdBinarySplit,proto3,oneof"`
}

type TreeNode_CategoricalIdSetMembershipBinarySplit struct {
	CategoricalIdSetMembershipBinarySplit *CategoricalIdSetMembershipBinarySplit `protobuf:"bytes,6,opt,name=categorical_id_set_membership_binary_split,json=categoricalIdSetMembershipBinarySplit,proto3,oneof"`
}

type TreeNode_ObliviousDenseFloatBinarySplit struct {
	ObliviousDenseFloatBinarySplit *ObliviousDenseFloatBinarySplit `protobuf:"bytes,7,opt,name=oblivious_dense_float_binary_split,json=obliviousDenseFloatBinarySplit,proto3,oneof"`
}

type TreeNode_ObliviousCategoricalIdBinarySplit struct {
	ObliviousCategoricalIdBinarySplit *ObliviousCategoricalIdBinarySplit `protobuf:"bytes,8,opt,name=oblivious_categorical_id_binary_split,json=obliviousCategoricalIdBinarySplit,proto3,oneof"`
}

func (*TreeNode_Leaf) isTreeNode_Node() {}

func (*TreeNode_DenseFloatBinarySplit) isTreeNode_Node() {}

func (*TreeNode_SparseFloatBinarySplitDefaultLeft) isTreeNode_Node() {}

func (*TreeNode_SparseFloatBinarySplitDefaultRight) isTreeNode_Node() {}

func (*TreeNode_CategoricalIdBinarySplit) isTreeNode_Node() {}

func (*TreeNode_CategoricalIdSetMembershipBinarySplit) isTreeNode_Node() {}

func (*TreeNode_ObliviousDenseFloatBinarySplit) isTreeNode_Node() {}

func (*TreeNode_ObliviousCategoricalIdBinarySplit) isTreeNode_Node() {}

func (m *TreeNode) GetNode() isTreeNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *TreeNode) GetLeaf() *Leaf {
	if x, ok := m.GetNode().(*TreeNode_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (m *TreeNode) GetDenseFloatBinarySplit() *DenseFloatBinarySplit {
	if x, ok := m.GetNode().(*TreeNode_DenseFloatBinarySplit); ok {
		return x.DenseFloatBinarySplit
	}
	return nil
}

func (m *TreeNode) GetSparseFloatBinarySplitDefaultLeft() *SparseFloatBinarySplitDefaultLeft {
	if x, ok := m.GetNode().(*TreeNode_SparseFloatBinarySplitDefaultLeft); ok {
		return x.SparseFloatBinarySplitDefaultLeft
	}
	return nil
}

func (m *TreeNode) GetSparseFloatBinarySplitDefaultRight() *SparseFloatBinarySplitDefaultRight {
	if x, ok := m.GetNode().(*TreeNode_SparseFloatBinarySplitDefaultRight); ok {
		return x.SparseFloatBinarySplitDefaultRight
	}
	return nil
}

func (m *TreeNode) GetCategoricalIdBinarySplit() *CategoricalIdBinarySplit {
	if x, ok := m.GetNode().(*TreeNode_CategoricalIdBinarySplit); ok {
		return x.CategoricalIdBinarySplit
	}
	return nil
}

func (m *TreeNode) GetCategoricalIdSetMembershipBinarySplit() *CategoricalIdSetMembershipBinarySplit {
	if x, ok := m.GetNode().(*TreeNode_CategoricalIdSetMembershipBinarySplit); ok {
		return x.CategoricalIdSetMembershipBinarySplit
	}
	return nil
}

func (m *TreeNode) GetObliviousDenseFloatBinarySplit() *ObliviousDenseFloatBinarySplit {
	if x, ok := m.GetNode().(*TreeNode_ObliviousDenseFloatBinarySplit); ok {
		return x.ObliviousDenseFloatBinarySplit
	}
	return nil
}

func (m *TreeNode) GetObliviousCategoricalIdBinarySplit() *ObliviousCategoricalIdBinarySplit {
	if x, ok := m.GetNode().(*TreeNode_ObliviousCategoricalIdBinarySplit); ok {
		return x.ObliviousCategoricalIdBinarySplit
	}
	return nil
}

func (m *TreeNode) GetNodeMetadata() *TreeNodeMetadata {
	if m != nil {
		return m.NodeMetadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TreeNode) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TreeNode_Leaf)(nil),
		(*TreeNode_DenseFloatBinarySplit)(nil),
		(*TreeNode_SparseFloatBinarySplitDefaultLeft)(nil),
		(*TreeNode_SparseFloatBinarySplitDefaultRight)(nil),
		(*TreeNode_CategoricalIdBinarySplit)(nil),
		(*TreeNode_CategoricalIdSetMembershipBinarySplit)(nil),
		(*TreeNode_ObliviousDenseFloatBinarySplit)(nil),
		(*TreeNode_ObliviousCategoricalIdBinarySplit)(nil),
	}
}

// TreeNodeMetadata encodes metadata associated with each node in a tree.
type TreeNodeMetadata struct {
	// The gain associated with this node.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// The original leaf node before this node was split.
	OriginalLeaf *Leaf `protobuf:"bytes,2,opt,name=original_leaf,json=originalLeaf,proto3" json:"original_leaf,omitempty"`
	// The original layer of leaves before that layer was converted to a split.
	OriginalObliviousLeaves []*Leaf  `protobuf:"bytes,3,rep,name=original_oblivious_leaves,json=originalObliviousLeaves,proto3" json:"original_oblivious_leaves,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *TreeNodeMetadata) Reset()         { *m = TreeNodeMetadata{} }
func (m *TreeNodeMetadata) String() string { return proto.CompactTextString(m) }
func (*TreeNodeMetadata) ProtoMessage()    {}
func (*TreeNodeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{1}
}

func (m *TreeNodeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeNodeMetadata.Unmarshal(m, b)
}
func (m *TreeNodeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeNodeMetadata.Marshal(b, m, deterministic)
}
func (m *TreeNodeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeNodeMetadata.Merge(m, src)
}
func (m *TreeNodeMetadata) XXX_Size() int {
	return xxx_messageInfo_TreeNodeMetadata.Size(m)
}
func (m *TreeNodeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeNodeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TreeNodeMetadata proto.InternalMessageInfo

func (m *TreeNodeMetadata) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *TreeNodeMetadata) GetOriginalLeaf() *Leaf {
	if m != nil {
		return m.OriginalLeaf
	}
	return nil
}

func (m *TreeNodeMetadata) GetOriginalObliviousLeaves() []*Leaf {
	if m != nil {
		return m.OriginalObliviousLeaves
	}
	return nil
}

// Leaves can either hold dense or sparse information.
type Leaf struct {
	// Types that are valid to be assigned to Leaf:
	//	*Leaf_Vector
	//	*Leaf_SparseVector
	Leaf                 isLeaf_Leaf `protobuf_oneof:"leaf"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Leaf) Reset()         { *m = Leaf{} }
func (m *Leaf) String() string { return proto.CompactTextString(m) }
func (*Leaf) ProtoMessage()    {}
func (*Leaf) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{2}
}

func (m *Leaf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Leaf.Unmarshal(m, b)
}
func (m *Leaf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Leaf.Marshal(b, m, deterministic)
}
func (m *Leaf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Leaf.Merge(m, src)
}
func (m *Leaf) XXX_Size() int {
	return xxx_messageInfo_Leaf.Size(m)
}
func (m *Leaf) XXX_DiscardUnknown() {
	xxx_messageInfo_Leaf.DiscardUnknown(m)
}

var xxx_messageInfo_Leaf proto.InternalMessageInfo

type isLeaf_Leaf interface {
	isLeaf_Leaf()
}

type Leaf_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}

type Leaf_SparseVector struct {
	SparseVector *SparseVector `protobuf:"bytes,2,opt,name=sparse_vector,json=sparseVector,proto3,oneof"`
}

func (*Leaf_Vector) isLeaf_Leaf() {}

func (*Leaf_SparseVector) isLeaf_Leaf() {}

func (m *Leaf) GetLeaf() isLeaf_Leaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *Leaf) GetVector() *Vector {
	if x, ok := m.GetLeaf().(*Leaf_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *Leaf) GetSparseVector() *SparseVector {
	if x, ok := m.GetLeaf().(*Leaf_SparseVector); ok {
		return x.SparseVector
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Leaf) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Leaf_Vector)(nil),
		(*Leaf_SparseVector)(nil),
	}
}

type Vector struct {
	Value                []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{3}
}

func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type SparseVector struct {
	Index                []int32   `protobuf:"varint,1,rep,packed,name=index,proto3" json:"index,omitempty"`
	Value                []float32 `protobuf:"fixed32,2,rep,packed,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SparseVector) Reset()         { *m = SparseVector{} }
func (m *SparseVector) String() string { return proto.CompactTextString(m) }
func (*SparseVector) ProtoMessage()    {}
func (*SparseVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{4}
}

func (m *SparseVector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparseVector.Unmarshal(m, b)
}
func (m *SparseVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparseVector.Marshal(b, m, deterministic)
}
func (m *SparseVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparseVector.Merge(m, src)
}
func (m *SparseVector) XXX_Size() int {
	return xxx_messageInfo_SparseVector.Size(m)
}
func (m *SparseVector) XXX_DiscardUnknown() {
	xxx_messageInfo_SparseVector.DiscardUnknown(m)
}

var xxx_messageInfo_SparseVector proto.InternalMessageInfo

func (m *SparseVector) GetIndex() []int32 {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *SparseVector) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Split rule for dense float features.
type DenseFloatBinarySplit struct {
	// Float feature column and split threshold describing
	// the rule feature <= threshold.
	FeatureColumn int32 `protobuf:"varint,1,opt,name=feature_column,json=featureColumn,proto3" json:"feature_column,omitempty"`
	// If feature column is multivalent, this holds the index of the dimension
	// for the split. Defaults to 0.
	DimensionId int32   `protobuf:"varint,5,opt,name=dimension_id,json=dimensionId,proto3" json:"dimension_id,omitempty"`
	Threshold   float32 `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId               int32    `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId              int32    `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DenseFloatBinarySplit) Reset()         { *m = DenseFloatBinarySplit{} }
func (m *DenseFloatBinarySplit) String() string { return proto.CompactTextString(m) }
func (*DenseFloatBinarySplit) ProtoMessage()    {}
func (*DenseFloatBinarySplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{5}
}

func (m *DenseFloatBinarySplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DenseFloatBinarySplit.Unmarshal(m, b)
}
func (m *DenseFloatBinarySplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DenseFloatBinarySplit.Marshal(b, m, deterministic)
}
func (m *DenseFloatBinarySplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenseFloatBinarySplit.Merge(m, src)
}
func (m *DenseFloatBinarySplit) XXX_Size() int {
	return xxx_messageInfo_DenseFloatBinarySplit.Size(m)
}
func (m *DenseFloatBinarySplit) XXX_DiscardUnknown() {
	xxx_messageInfo_DenseFloatBinarySplit.DiscardUnknown(m)
}

var xxx_messageInfo_DenseFloatBinarySplit proto.InternalMessageInfo

func (m *DenseFloatBinarySplit) GetFeatureColumn() int32 {
	if m != nil {
		return m.FeatureColumn
	}
	return 0
}

func (m *DenseFloatBinarySplit) GetDimensionId() int32 {
	if m != nil {
		return m.DimensionId
	}
	return 0
}

func (m *DenseFloatBinarySplit) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *DenseFloatBinarySplit) GetLeftId() int32 {
	if m != nil {
		return m.LeftId
	}
	return 0
}

func (m *DenseFloatBinarySplit) GetRightId() int32 {
	if m != nil {
		return m.RightId
	}
	return 0
}

// Split rule for sparse float features defaulting left for missing features.
type SparseFloatBinarySplitDefaultLeft struct {
	Split                *DenseFloatBinarySplit `protobuf:"bytes,1,opt,name=split,proto3" json:"split,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SparseFloatBinarySplitDefaultLeft) Reset()         { *m = SparseFloatBinarySplitDefaultLeft{} }
func (m *SparseFloatBinarySplitDefaultLeft) String() string { return proto.CompactTextString(m) }
func (*SparseFloatBinarySplitDefaultLeft) ProtoMessage()    {}
func (*SparseFloatBinarySplitDefaultLeft) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{6}
}

func (m *SparseFloatBinarySplitDefaultLeft) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparseFloatBinarySplitDefaultLeft.Unmarshal(m, b)
}
func (m *SparseFloatBinarySplitDefaultLeft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparseFloatBinarySplitDefaultLeft.Marshal(b, m, deterministic)
}
func (m *SparseFloatBinarySplitDefaultLeft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparseFloatBinarySplitDefaultLeft.Merge(m, src)
}
func (m *SparseFloatBinarySplitDefaultLeft) XXX_Size() int {
	return xxx_messageInfo_SparseFloatBinarySplitDefaultLeft.Size(m)
}
func (m *SparseFloatBinarySplitDefaultLeft) XXX_DiscardUnknown() {
	xxx_messageInfo_SparseFloatBinarySplitDefaultLeft.DiscardUnknown(m)
}

var xxx_messageInfo_SparseFloatBinarySplitDefaultLeft proto.InternalMessageInfo

func (m *SparseFloatBinarySplitDefaultLeft) GetSplit() *DenseFloatBinarySplit {
	if m != nil {
		return m.Split
	}
	return nil
}

// Split rule for sparse float features defaulting right for missing features.
type SparseFloatBinarySplitDefaultRight struct {
	Split                *DenseFloatBinarySplit `protobuf:"bytes,1,opt,name=split,proto3" json:"split,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SparseFloatBinarySplitDefaultRight) Reset()         { *m = SparseFloatBinarySplitDefaultRight{} }
func (m *SparseFloatBinarySplitDefaultRight) String() string { return proto.CompactTextString(m) }
func (*SparseFloatBinarySplitDefaultRight) ProtoMessage()    {}
func (*SparseFloatBinarySplitDefaultRight) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{7}
}

func (m *SparseFloatBinarySplitDefaultRight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SparseFloatBinarySplitDefaultRight.Unmarshal(m, b)
}
func (m *SparseFloatBinarySplitDefaultRight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SparseFloatBinarySplitDefaultRight.Marshal(b, m, deterministic)
}
func (m *SparseFloatBinarySplitDefaultRight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SparseFloatBinarySplitDefaultRight.Merge(m, src)
}
func (m *SparseFloatBinarySplitDefaultRight) XXX_Size() int {
	return xxx_messageInfo_SparseFloatBinarySplitDefaultRight.Size(m)
}
func (m *SparseFloatBinarySplitDefaultRight) XXX_DiscardUnknown() {
	xxx_messageInfo_SparseFloatBinarySplitDefaultRight.DiscardUnknown(m)
}

var xxx_messageInfo_SparseFloatBinarySplitDefaultRight proto.InternalMessageInfo

func (m *SparseFloatBinarySplitDefaultRight) GetSplit() *DenseFloatBinarySplit {
	if m != nil {
		return m.Split
	}
	return nil
}

// Split rule for categorical features with a single feature Id.
type CategoricalIdBinarySplit struct {
	// Categorical feature column and Id describing
	// the rule feature == Id.
	FeatureColumn int32 `protobuf:"varint,1,opt,name=feature_column,json=featureColumn,proto3" json:"feature_column,omitempty"`
	FeatureId     int64 `protobuf:"varint,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId               int32    `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId              int32    `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CategoricalIdBinarySplit) Reset()         { *m = CategoricalIdBinarySplit{} }
func (m *CategoricalIdBinarySplit) String() string { return proto.CompactTextString(m) }
func (*CategoricalIdBinarySplit) ProtoMessage()    {}
func (*CategoricalIdBinarySplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{8}
}

func (m *CategoricalIdBinarySplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CategoricalIdBinarySplit.Unmarshal(m, b)
}
func (m *CategoricalIdBinarySplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CategoricalIdBinarySplit.Marshal(b, m, deterministic)
}
func (m *CategoricalIdBinarySplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoricalIdBinarySplit.Merge(m, src)
}
func (m *CategoricalIdBinarySplit) XXX_Size() int {
	return xxx_messageInfo_CategoricalIdBinarySplit.Size(m)
}
func (m *CategoricalIdBinarySplit) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoricalIdBinarySplit.DiscardUnknown(m)
}

var xxx_messageInfo_CategoricalIdBinarySplit proto.InternalMessageInfo

func (m *CategoricalIdBinarySplit) GetFeatureColumn() int32 {
	if m != nil {
		return m.FeatureColumn
	}
	return 0
}

func (m *CategoricalIdBinarySplit) GetFeatureId() int64 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *CategoricalIdBinarySplit) GetLeftId() int32 {
	if m != nil {
		return m.LeftId
	}
	return 0
}

func (m *CategoricalIdBinarySplit) GetRightId() int32 {
	if m != nil {
		return m.RightId
	}
	return 0
}

// Split rule for categorical features with a set of feature Ids.
type CategoricalIdSetMembershipBinarySplit struct {
	// Categorical feature column and Id describing
	// the rule feature ∈ feature_ids.
	FeatureColumn int32 `protobuf:"varint,1,opt,name=feature_column,json=featureColumn,proto3" json:"feature_column,omitempty"`
	// Sorted list of Ids in the set.
	FeatureIds []int64 `protobuf:"varint,2,rep,packed,name=feature_ids,json=featureIds,proto3" json:"feature_ids,omitempty"`
	// Node children indexing into a contiguous
	// vector of nodes starting from the root.
	LeftId               int32    `protobuf:"varint,3,opt,name=left_id,json=leftId,proto3" json:"left_id,omitempty"`
	RightId              int32    `protobuf:"varint,4,opt,name=right_id,json=rightId,proto3" json:"right_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CategoricalIdSetMembershipBinarySplit) Reset()         { *m = CategoricalIdSetMembershipBinarySplit{} }
func (m *CategoricalIdSetMembershipBinarySplit) String() string { return proto.CompactTextString(m) }
func (*CategoricalIdSetMembershipBinarySplit) ProtoMessage()    {}
func (*CategoricalIdSetMembershipBinarySplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{9}
}

func (m *CategoricalIdSetMembershipBinarySplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CategoricalIdSetMembershipBinarySplit.Unmarshal(m, b)
}
func (m *CategoricalIdSetMembershipBinarySplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CategoricalIdSetMembershipBinarySplit.Marshal(b, m, deterministic)
}
func (m *CategoricalIdSetMembershipBinarySplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoricalIdSetMembershipBinarySplit.Merge(m, src)
}
func (m *CategoricalIdSetMembershipBinarySplit) XXX_Size() int {
	return xxx_messageInfo_CategoricalIdSetMembershipBinarySplit.Size(m)
}
func (m *CategoricalIdSetMembershipBinarySplit) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoricalIdSetMembershipBinarySplit.DiscardUnknown(m)
}

var xxx_messageInfo_CategoricalIdSetMembershipBinarySplit proto.InternalMessageInfo

func (m *CategoricalIdSetMembershipBinarySplit) GetFeatureColumn() int32 {
	if m != nil {
		return m.FeatureColumn
	}
	return 0
}

func (m *CategoricalIdSetMembershipBinarySplit) GetFeatureIds() []int64 {
	if m != nil {
		return m.FeatureIds
	}
	return nil
}

func (m *CategoricalIdSetMembershipBinarySplit) GetLeftId() int32 {
	if m != nil {
		return m.LeftId
	}
	return 0
}

func (m *CategoricalIdSetMembershipBinarySplit) GetRightId() int32 {
	if m != nil {
		return m.RightId
	}
	return 0
}

// Split rule for dense float features in the oblivious case.
type ObliviousDenseFloatBinarySplit struct {
	// Float feature column and split threshold describing
	// the rule feature <= threshold.
	FeatureColumn        int32    `protobuf:"varint,1,opt,name=feature_column,json=featureColumn,proto3" json:"feature_column,omitempty"`
	Threshold            float32  `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObliviousDenseFloatBinarySplit) Reset()         { *m = ObliviousDenseFloatBinarySplit{} }
func (m *ObliviousDenseFloatBinarySplit) String() string { return proto.CompactTextString(m) }
func (*ObliviousDenseFloatBinarySplit) ProtoMessage()    {}
func (*ObliviousDenseFloatBinarySplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{10}
}

func (m *ObliviousDenseFloatBinarySplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObliviousDenseFloatBinarySplit.Unmarshal(m, b)
}
func (m *ObliviousDenseFloatBinarySplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObliviousDenseFloatBinarySplit.Marshal(b, m, deterministic)
}
func (m *ObliviousDenseFloatBinarySplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObliviousDenseFloatBinarySplit.Merge(m, src)
}
func (m *ObliviousDenseFloatBinarySplit) XXX_Size() int {
	return xxx_messageInfo_ObliviousDenseFloatBinarySplit.Size(m)
}
func (m *ObliviousDenseFloatBinarySplit) XXX_DiscardUnknown() {
	xxx_messageInfo_ObliviousDenseFloatBinarySplit.DiscardUnknown(m)
}

var xxx_messageInfo_ObliviousDenseFloatBinarySplit proto.InternalMessageInfo

func (m *ObliviousDenseFloatBinarySplit) GetFeatureColumn() int32 {
	if m != nil {
		return m.FeatureColumn
	}
	return 0
}

func (m *ObliviousDenseFloatBinarySplit) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

// Split rule for categorical features with a single feature Id in the oblivious
// case.
type ObliviousCategoricalIdBinarySplit struct {
	// Categorical feature column and Id describing the rule feature == Id.
	FeatureColumn        int32    `protobuf:"varint,1,opt,name=feature_column,json=featureColumn,proto3" json:"feature_column,omitempty"`
	FeatureId            int64    `protobuf:"varint,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObliviousCategoricalIdBinarySplit) Reset()         { *m = ObliviousCategoricalIdBinarySplit{} }
func (m *ObliviousCategoricalIdBinarySplit) String() string { return proto.CompactTextString(m) }
func (*ObliviousCategoricalIdBinarySplit) ProtoMessage()    {}
func (*ObliviousCategoricalIdBinarySplit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{11}
}

func (m *ObliviousCategoricalIdBinarySplit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObliviousCategoricalIdBinarySplit.Unmarshal(m, b)
}
func (m *ObliviousCategoricalIdBinarySplit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObliviousCategoricalIdBinarySplit.Marshal(b, m, deterministic)
}
func (m *ObliviousCategoricalIdBinarySplit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObliviousCategoricalIdBinarySplit.Merge(m, src)
}
func (m *ObliviousCategoricalIdBinarySplit) XXX_Size() int {
	return xxx_messageInfo_ObliviousCategoricalIdBinarySplit.Size(m)
}
func (m *ObliviousCategoricalIdBinarySplit) XXX_DiscardUnknown() {
	xxx_messageInfo_ObliviousCategoricalIdBinarySplit.DiscardUnknown(m)
}

var xxx_messageInfo_ObliviousCategoricalIdBinarySplit proto.InternalMessageInfo

func (m *ObliviousCategoricalIdBinarySplit) GetFeatureColumn() int32 {
	if m != nil {
		return m.FeatureColumn
	}
	return 0
}

func (m *ObliviousCategoricalIdBinarySplit) GetFeatureId() int64 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

// DecisionTreeConfig describes a list of connected nodes.
// Node 0 must be the root and can carry any payload including a leaf
// in the case of representing the bias.
// Note that each node id is implicitly its index in the list of nodes.
type DecisionTreeConfig struct {
	Nodes                []*TreeNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DecisionTreeConfig) Reset()         { *m = DecisionTreeConfig{} }
func (m *DecisionTreeConfig) String() string { return proto.CompactTextString(m) }
func (*DecisionTreeConfig) ProtoMessage()    {}
func (*DecisionTreeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{12}
}

func (m *DecisionTreeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecisionTreeConfig.Unmarshal(m, b)
}
func (m *DecisionTreeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecisionTreeConfig.Marshal(b, m, deterministic)
}
func (m *DecisionTreeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTreeConfig.Merge(m, src)
}
func (m *DecisionTreeConfig) XXX_Size() int {
	return xxx_messageInfo_DecisionTreeConfig.Size(m)
}
func (m *DecisionTreeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTreeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTreeConfig proto.InternalMessageInfo

func (m *DecisionTreeConfig) GetNodes() []*TreeNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type DecisionTreeMetadata struct {
	// How many times tree weight was updated (due to reweighting of the final
	// ensemble, dropout, shrinkage etc).
	NumTreeWeightUpdates int32 `protobuf:"varint,1,opt,name=num_tree_weight_updates,json=numTreeWeightUpdates,proto3" json:"num_tree_weight_updates,omitempty"`
	// Number of layers grown for this tree.
	NumLayersGrown int32 `protobuf:"varint,2,opt,name=num_layers_grown,json=numLayersGrown,proto3" json:"num_layers_grown,omitempty"`
	// Whether the tree is finalized in that no more layers can be grown.
	IsFinalized          bool     `protobuf:"varint,3,opt,name=is_finalized,json=isFinalized,proto3" json:"is_finalized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DecisionTreeMetadata) Reset()         { *m = DecisionTreeMetadata{} }
func (m *DecisionTreeMetadata) String() string { return proto.CompactTextString(m) }
func (*DecisionTreeMetadata) ProtoMessage()    {}
func (*DecisionTreeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{13}
}

func (m *DecisionTreeMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecisionTreeMetadata.Unmarshal(m, b)
}
func (m *DecisionTreeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecisionTreeMetadata.Marshal(b, m, deterministic)
}
func (m *DecisionTreeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTreeMetadata.Merge(m, src)
}
func (m *DecisionTreeMetadata) XXX_Size() int {
	return xxx_messageInfo_DecisionTreeMetadata.Size(m)
}
func (m *DecisionTreeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTreeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTreeMetadata proto.InternalMessageInfo

func (m *DecisionTreeMetadata) GetNumTreeWeightUpdates() int32 {
	if m != nil {
		return m.NumTreeWeightUpdates
	}
	return 0
}

func (m *DecisionTreeMetadata) GetNumLayersGrown() int32 {
	if m != nil {
		return m.NumLayersGrown
	}
	return 0
}

func (m *DecisionTreeMetadata) GetIsFinalized() bool {
	if m != nil {
		return m.IsFinalized
	}
	return false
}

type GrowingMetadata struct {
	// Number of trees that we have attempted to build. After pruning, these
	// trees might have been removed.
	NumTreesAttempted int64 `protobuf:"varint,1,opt,name=num_trees_attempted,json=numTreesAttempted,proto3" json:"num_trees_attempted,omitempty"`
	// Number of layers that we have attempted to build. After pruning, these
	// layers might have been removed.
	NumLayersAttempted int64 `protobuf:"varint,2,opt,name=num_layers_attempted,json=numLayersAttempted,proto3" json:"num_layers_attempted,omitempty"`
	// Sorted list of column handlers that have been used in at least one split
	// so far.
	UsedHandlerIds       []int64  `protobuf:"varint,3,rep,packed,name=used_handler_ids,json=usedHandlerIds,proto3" json:"used_handler_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrowingMetadata) Reset()         { *m = GrowingMetadata{} }
func (m *GrowingMetadata) String() string { return proto.CompactTextString(m) }
func (*GrowingMetadata) ProtoMessage()    {}
func (*GrowingMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{14}
}

func (m *GrowingMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrowingMetadata.Unmarshal(m, b)
}
func (m *GrowingMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrowingMetadata.Marshal(b, m, deterministic)
}
func (m *GrowingMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrowingMetadata.Merge(m, src)
}
func (m *GrowingMetadata) XXX_Size() int {
	return xxx_messageInfo_GrowingMetadata.Size(m)
}
func (m *GrowingMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_GrowingMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_GrowingMetadata proto.InternalMessageInfo

func (m *GrowingMetadata) GetNumTreesAttempted() int64 {
	if m != nil {
		return m.NumTreesAttempted
	}
	return 0
}

func (m *GrowingMetadata) GetNumLayersAttempted() int64 {
	if m != nil {
		return m.NumLayersAttempted
	}
	return 0
}

func (m *GrowingMetadata) GetUsedHandlerIds() []int64 {
	if m != nil {
		return m.UsedHandlerIds
	}
	return nil
}

// DecisionTreeEnsembleConfig describes an ensemble of decision trees.
type DecisionTreeEnsembleConfig struct {
	Trees        []*DecisionTreeConfig   `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
	TreeWeights  []float32               `protobuf:"fixed32,2,rep,packed,name=tree_weights,json=treeWeights,proto3" json:"tree_weights,omitempty"`
	TreeMetadata []*DecisionTreeMetadata `protobuf:"bytes,3,rep,name=tree_metadata,json=treeMetadata,proto3" json:"tree_metadata,omitempty"`
	// Metadata that is used during the training.
	GrowingMetadata      *GrowingMetadata `protobuf:"bytes,4,opt,name=growing_metadata,json=growingMetadata,proto3" json:"growing_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DecisionTreeEnsembleConfig) Reset()         { *m = DecisionTreeEnsembleConfig{} }
func (m *DecisionTreeEnsembleConfig) String() string { return proto.CompactTextString(m) }
func (*DecisionTreeEnsembleConfig) ProtoMessage()    {}
func (*DecisionTreeEnsembleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb214f1bbef8805, []int{15}
}

func (m *DecisionTreeEnsembleConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DecisionTreeEnsembleConfig.Unmarshal(m, b)
}
func (m *DecisionTreeEnsembleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DecisionTreeEnsembleConfig.Marshal(b, m, deterministic)
}
func (m *DecisionTreeEnsembleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecisionTreeEnsembleConfig.Merge(m, src)
}
func (m *DecisionTreeEnsembleConfig) XXX_Size() int {
	return xxx_messageInfo_DecisionTreeEnsembleConfig.Size(m)
}
func (m *DecisionTreeEnsembleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DecisionTreeEnsembleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DecisionTreeEnsembleConfig proto.InternalMessageInfo

func (m *DecisionTreeEnsembleConfig) GetTrees() []*DecisionTreeConfig {
	if m != nil {
		return m.Trees
	}
	return nil
}

func (m *DecisionTreeEnsembleConfig) GetTreeWeights() []float32 {
	if m != nil {
		return m.TreeWeights
	}
	return nil
}

func (m *DecisionTreeEnsembleConfig) GetTreeMetadata() []*DecisionTreeMetadata {
	if m != nil {
		return m.TreeMetadata
	}
	return nil
}

func (m *DecisionTreeEnsembleConfig) GetGrowingMetadata() *GrowingMetadata {
	if m != nil {
		return m.GrowingMetadata
	}
	return nil
}

func init() {
	proto.RegisterType((*TreeNode)(nil), "tensorflow.boosted_trees.trees.TreeNode")
	proto.RegisterType((*TreeNodeMetadata)(nil), "tensorflow.boosted_trees.trees.TreeNodeMetadata")
	proto.RegisterType((*Leaf)(nil), "tensorflow.boosted_trees.trees.Leaf")
	proto.RegisterType((*Vector)(nil), "tensorflow.boosted_trees.trees.Vector")
	proto.RegisterType((*SparseVector)(nil), "tensorflow.boosted_trees.trees.SparseVector")
	proto.RegisterType((*DenseFloatBinarySplit)(nil), "tensorflow.boosted_trees.trees.DenseFloatBinarySplit")
	proto.RegisterType((*SparseFloatBinarySplitDefaultLeft)(nil), "tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultLeft")
	proto.RegisterType((*SparseFloatBinarySplitDefaultRight)(nil), "tensorflow.boosted_trees.trees.SparseFloatBinarySplitDefaultRight")
	proto.RegisterType((*CategoricalIdBinarySplit)(nil), "tensorflow.boosted_trees.trees.CategoricalIdBinarySplit")
	proto.RegisterType((*CategoricalIdSetMembershipBinarySplit)(nil), "tensorflow.boosted_trees.trees.CategoricalIdSetMembershipBinarySplit")
	proto.RegisterType((*ObliviousDenseFloatBinarySplit)(nil), "tensorflow.boosted_trees.trees.ObliviousDenseFloatBinarySplit")
	proto.RegisterType((*ObliviousCategoricalIdBinarySplit)(nil), "tensorflow.boosted_trees.trees.ObliviousCategoricalIdBinarySplit")
	proto.RegisterType((*DecisionTreeConfig)(nil), "tensorflow.boosted_trees.trees.DecisionTreeConfig")
	proto.RegisterType((*DecisionTreeMetadata)(nil), "tensorflow.boosted_trees.trees.DecisionTreeMetadata")
	proto.RegisterType((*GrowingMetadata)(nil), "tensorflow.boosted_trees.trees.GrowingMetadata")
	proto.RegisterType((*DecisionTreeEnsembleConfig)(nil), "tensorflow.boosted_trees.trees.DecisionTreeEnsembleConfig")
}

func init() {
	proto.RegisterFile("tensorflow/contrib/boosted_trees/proto/tree_config.proto", fileDescriptor_ebb214f1bbef8805)
}

var fileDescriptor_ebb214f1bbef8805 = []byte{
	// 1078 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xfa, 0x2f, 0xc9, 0x71, 0x92, 0x86, 0x21, 0x55, 0x5c, 0x7e, 0x42, 0xb2, 0x22, 0x25,
	0x42, 0xc8, 0xae, 0x02, 0x95, 0xaa, 0x5e, 0x54, 0x34, 0x49, 0x8b, 0x2d, 0xd2, 0x22, 0x4d, 0x4a,
	0x11, 0xbd, 0x59, 0xc6, 0x9e, 0xf1, 0x7a, 0xa4, 0xdd, 0x1d, 0xb3, 0x33, 0x9b, 0x10, 0xde, 0x00,
	0x89, 0xcb, 0x82, 0x04, 0x12, 0x37, 0x20, 0x9e, 0x80, 0x17, 0xe0, 0x1d, 0x78, 0x19, 0x2e, 0xab,
	0x39, 0x6b, 0xef, 0xda, 0x51, 0xe2, 0x75, 0x7f, 0x6e, 0xac, 0x9d, 0x33, 0xe7, 0xfb, 0xe6, 0xf3,
	0x39, 0x67, 0xbf, 0xdd, 0x85, 0x3b, 0x46, 0x44, 0x5a, 0xc5, 0xfd, 0x40, 0x9d, 0xb5, 0x7a, 0x2a,
	0x32, 0xb1, 0xec, 0xb6, 0xba, 0x4a, 0x69, 0x23, 0xb8, 0x67, 0x62, 0x21, 0x74, 0x6b, 0x18, 0x2b,
	0xa3, 0x5a, 0xf6, 0xda, 0xeb, 0xa9, 0xa8, 0x2f, 0xfd, 0x26, 0x46, 0xc8, 0x56, 0x8e, 0x6c, 0x4e,
	0x21, 0x9a, 0xf8, 0xeb, 0x3e, 0x5f, 0x86, 0xa5, 0x27, 0xb1, 0x10, 0x8f, 0x15, 0x17, 0xe4, 0x2e,
	0x54, 0x02, 0xc1, 0xfa, 0x0d, 0x67, 0xdb, 0xd9, 0xab, 0xef, 0x7f, 0xd8, 0x9c, 0x8d, 0x6d, 0x1e,
	0x0b, 0xd6, 0x6f, 0x2f, 0x50, 0xc4, 0x90, 0x21, 0x34, 0xb8, 0x88, 0xb4, 0xf0, 0xfa, 0x81, 0x62,
	0xc6, 0xeb, 0xca, 0x88, 0xc5, 0xe7, 0x9e, 0x1e, 0x06, 0xd2, 0x34, 0x4a, 0xc8, 0x77, 0xbb, 0x88,
	0xef, 0xc8, 0xe2, 0x1f, 0x5a, 0xf8, 0x01, 0xa2, 0x4f, 0x2c, 0xb8, 0xbd, 0x40, 0xaf, 0xf3, 0xcb,
	0x36, 0xc8, 0xaf, 0x0e, 0xdc, 0xd4, 0x43, 0x16, 0x5f, 0x7a, 0xa6, 0xc7, 0x45, 0x9f, 0x25, 0x81,
	0xf1, 0x02, 0xd1, 0x37, 0x8d, 0x32, 0x0a, 0xb8, 0x5f, 0x24, 0xe0, 0x04, 0xd9, 0x2e, 0x1e, 0x74,
	0x94, 0x32, 0x1d, 0x8b, 0xbe, 0x15, 0xb3, 0xa3, 0x8b, 0x92, 0xc8, 0x6f, 0x0e, 0x7c, 0x54, 0x2c,
	0x2c, 0x96, 0xfe, 0xc0, 0x34, 0x2a, 0xa8, 0xec, 0xe0, 0xb5, 0x94, 0x51, 0xcb, 0xd4, 0x5e, 0xa0,
	0xae, 0x2e, 0xcc, 0x22, 0xe7, 0xf0, 0x6e, 0x8f, 0x19, 0xe1, 0xab, 0x58, 0xf6, 0x58, 0xe0, 0x49,
	0x3e, 0xdd, 0xa9, 0x2a, 0xca, 0xb9, 0x53, 0x24, 0xe7, 0x30, 0xa7, 0xe8, 0xf0, 0xe9, 0x66, 0x35,
	0x7a, 0x57, 0xec, 0x91, 0x3f, 0x1d, 0xf8, 0xf8, 0xc2, 0xd9, 0x5a, 0x18, 0x2f, 0x14, 0x61, 0x57,
	0xc4, 0x7a, 0x20, 0x87, 0xd3, 0x52, 0x6a, 0x28, 0xe5, 0xc1, 0x4b, 0x49, 0x39, 0x11, 0xe6, 0x51,
	0x46, 0x37, 0xad, 0x6b, 0xb7, 0x37, 0x4f, 0x22, 0xf9, 0xd9, 0x01, 0x57, 0x75, 0x03, 0x79, 0x2a,
	0x55, 0xa2, 0xbd, 0x2b, 0x27, 0x7a, 0x11, 0xc5, 0xdd, 0x2b, 0x12, 0xf7, 0xd5, 0x98, 0xe9, 0xaa,
	0xd1, 0xde, 0x52, 0x33, 0x33, 0xc8, 0x2f, 0x0e, 0xec, 0xe6, 0x72, 0x66, 0x75, 0x6e, 0x69, 0xbe,
	0x11, 0xcf, 0x14, 0xcd, 0x68, 0xe1, 0x8e, 0x2a, 0x4a, 0x22, 0x4f, 0x61, 0x35, 0x52, 0x5c, 0x78,
	0xa1, 0x30, 0x8c, 0x33, 0xc3, 0x1a, 0x3f, 0xa5, 0xed, 0xba, 0x55, 0x74, 0xfe, 0xd8, 0x6b, 0x1e,
	0x8d, 0x80, 0x74, 0x25, 0x9a, 0x58, 0x1d, 0xd4, 0xa0, 0x62, 0xd7, 0xee, 0x7f, 0x0e, 0xac, 0x5f,
	0x4c, 0x25, 0x04, 0x2a, 0x3e, 0x93, 0x11, 0xda, 0x53, 0x89, 0xe2, 0x35, 0xe9, 0xc0, 0xaa, 0x8a,
	0xa5, 0x2f, 0x23, 0x16, 0x78, 0xe8, 0x5d, 0xa5, 0xf9, 0xbd, 0x8b, 0xae, 0x8c, 0xa1, 0x76, 0x45,
	0xbe, 0x83, 0x1b, 0x19, 0x55, 0x5e, 0xf3, 0x40, 0xb0, 0x53, 0xa1, 0x1b, 0xe5, 0xed, 0xf2, 0xdc,
	0xb4, 0x9b, 0x63, 0x9a, 0xac, 0xd8, 0xc7, 0x48, 0xe2, 0xfe, 0xed, 0x40, 0x05, 0x8f, 0xfa, 0x1c,
	0x6a, 0xa7, 0xa2, 0x67, 0x54, 0x3c, 0xb2, 0xda, 0x9b, 0x45, 0xbc, 0x4f, 0x31, 0xbb, 0xbd, 0x40,
	0x47, 0x38, 0x72, 0x02, 0xab, 0x23, 0x8b, 0x19, 0x11, 0xa5, 0xff, 0xfb, 0x93, 0xf9, 0x8c, 0x24,
	0xa3, 0x5b, 0xd1, 0x13, 0x6b, 0x5b, 0x7d, 0x5b, 0x43, 0x77, 0x0b, 0x6a, 0x69, 0x84, 0x6c, 0x40,
	0xf5, 0x94, 0x05, 0x89, 0x68, 0x38, 0xdb, 0xe5, 0xbd, 0x12, 0x4d, 0x17, 0xee, 0x5d, 0x58, 0x99,
	0xe4, 0xb1, 0x59, 0x32, 0xe2, 0xe2, 0x07, 0xcc, 0xaa, 0xd2, 0x74, 0x91, 0x63, 0x4b, 0x93, 0xd8,
	0x7f, 0x1c, 0xb8, 0x7e, 0xf9, 0xac, 0xef, 0xc2, 0x5a, 0x5f, 0x30, 0x93, 0xc4, 0xf6, 0x11, 0x16,
	0x24, 0x61, 0xda, 0xe8, 0x2a, 0x5d, 0x1d, 0x45, 0x0f, 0x31, 0x48, 0x76, 0x60, 0x85, 0xcb, 0x50,
	0x44, 0x5a, 0xaa, 0xc8, 0x93, 0x1c, 0x2d, 0xab, 0x4a, 0xeb, 0x59, 0xac, 0xc3, 0xc9, 0x7b, 0xb0,
	0x6c, 0x06, 0xb1, 0xd0, 0x03, 0x15, 0x70, 0x2c, 0x4c, 0x89, 0xe6, 0x01, 0xb2, 0x09, 0x8b, 0xf6,
	0xa1, 0x60, 0xb1, 0x65, 0xc4, 0xd6, 0xec, 0xb2, 0xc3, 0xc9, 0x0d, 0x58, 0x42, 0x53, 0xb6, 0x3b,
	0x15, 0xdc, 0x59, 0xc4, 0x75, 0x87, 0xbb, 0x43, 0xd8, 0x29, 0x7c, 0x38, 0x90, 0x2f, 0xa1, 0x9a,
	0xde, 0x8b, 0xce, 0x6b, 0x3c, 0xef, 0x68, 0xca, 0xe1, 0x7e, 0x0f, 0x6e, 0xb1, 0xe9, 0xbf, 0xd9,
	0x23, 0x9f, 0x3b, 0xd0, 0xb8, 0xf2, 0x8e, 0x9f, 0xb3, 0x3b, 0xef, 0x03, 0x8c, 0xd3, 0x64, 0x5a,
	0xfb, 0x32, 0x5d, 0x1e, 0x45, 0x3a, 0xaf, 0x56, 0xfb, 0xbf, 0x1c, 0xd8, 0x9d, 0xcb, 0xe5, 0xe7,
	0xd5, 0xf8, 0x01, 0xd4, 0x73, 0x8d, 0x1a, 0xc7, 0xb3, 0x4c, 0x21, 0x13, 0xa9, 0x5f, 0x49, 0xa5,
	0x80, 0xad, 0xd9, 0x6e, 0x3f, 0xaf, 0xba, 0x99, 0xc3, 0xeb, 0x4a, 0xd8, 0x29, 0xb4, 0xf0, 0x37,
	0xd3, 0x2b, 0xf7, 0x09, 0x90, 0x23, 0xd1, 0x93, 0xf6, 0x9e, 0xb2, 0x56, 0x7c, 0x88, 0xaf, 0x95,
	0xe4, 0x1e, 0x54, 0xad, 0x43, 0x6b, 0xbc, 0xd7, 0xeb, 0xfb, 0x7b, 0xf3, 0x1a, 0x3e, 0x4d, 0x61,
	0xee, 0xef, 0x0e, 0x6c, 0x4c, 0xd2, 0x66, 0xee, 0x7e, 0x1b, 0x36, 0xa3, 0x24, 0x44, 0xac, 0x77,
	0x26, 0xb0, 0xca, 0xc9, 0x90, 0x33, 0x83, 0x47, 0x59, 0xf5, 0x1b, 0x51, 0x12, 0x5a, 0xc4, 0x37,
	0xb8, 0xf9, 0x75, 0xba, 0x47, 0xf6, 0x60, 0xdd, 0xc2, 0x02, 0x76, 0x2e, 0x62, 0xed, 0xf9, 0xb1,
	0x3a, 0x8b, 0xf0, 0xaf, 0x54, 0xe9, 0x5a, 0x94, 0x84, 0xc7, 0x18, 0xfe, 0xc2, 0x46, 0xad, 0x71,
	0x48, 0xed, 0xf5, 0xad, 0x31, 0xcb, 0x1f, 0x45, 0xda, 0xda, 0x25, 0x5a, 0x97, 0xfa, 0xe1, 0x38,
	0xe4, 0xfe, 0xe1, 0xc0, 0x35, 0x9b, 0x2c, 0x23, 0x3f, 0xd3, 0xd5, 0x84, 0xb7, 0xc7, 0xba, 0xb4,
	0xc7, 0x8c, 0x11, 0xe1, 0xd0, 0x08, 0x8e, 0x9a, 0xca, 0xf4, 0xad, 0x91, 0x26, 0x7d, 0x7f, 0xbc,
	0x41, 0x6e, 0xc1, 0xc6, 0x84, 0xa0, 0x1c, 0x90, 0xd6, 0x97, 0x64, 0xa2, 0x72, 0xc4, 0x1e, 0xac,
	0x27, 0x5a, 0x70, 0x6f, 0xc0, 0x22, 0x1e, 0x88, 0x18, 0x87, 0xb2, 0x8c, 0x43, 0xb9, 0x66, 0xe3,
	0xed, 0x34, 0xdc, 0xe1, 0xda, 0xfd, 0xb7, 0x04, 0xef, 0x4c, 0x16, 0xef, 0x41, 0xa4, 0x45, 0xd8,
	0x0d, 0xc6, 0xbd, 0x69, 0x43, 0x15, 0x65, 0x8e, 0x7a, 0xb3, 0x5f, 0xec, 0x06, 0x17, 0xdb, 0x4b,
	0x53, 0x02, 0x5b, 0xab, 0x89, 0x46, 0xe8, 0x91, 0x85, 0xd7, 0x4d, 0x56, 0x7e, 0x4d, 0xbe, 0x85,
	0x55, 0x4c, 0xc9, 0x5e, 0x01, 0xd2, 0x47, 0xe4, 0x67, 0x2f, 0x73, 0x68, 0xfe, 0x16, 0x60, 0x26,
	0x47, 0xe1, 0x19, 0xac, 0xfb, 0x69, 0x17, 0x72, 0xf6, 0xf4, 0x45, 0xb9, 0x55, 0xc4, 0x7e, 0xa1,
	0x7b, 0xf4, 0x9a, 0x3f, 0x1d, 0x38, 0x78, 0xfc, 0xac, 0xe3, 0x4b, 0x33, 0x48, 0xba, 0xcd, 0x9e,
	0x0a, 0x5b, 0x13, 0xdf, 0x55, 0x97, 0x5f, 0xfa, 0xaa, 0xd5, 0x53, 0xb1, 0xb8, 0xfc, 0xab, 0xeb,
	0x7f, 0xc7, 0xe9, 0xd6, 0xf0, 0x3b, 0xeb, 0xd3, 0x17, 0x01, 0x00, 0x00, 0xff, 0xff, 0x03, 0xc8,
	0xe1, 0xae, 0xa3, 0x0d, 0x00, 0x00,
}
